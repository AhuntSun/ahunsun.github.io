(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{454:function(v,_,t){"use strict";t.r(_);var o=t(27),e=Object(o.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"_14-编译器和解析器：v8如何执行一段javascript代码的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-编译器和解析器：v8如何执行一段javascript代码的"}},[v._v("#")]),v._v(" 14.编译器和解析器：V8如何执行一段JavaScript代码的")]),v._v(" "),t("p",[v._v("前面我们已经花了很多篇幅来介绍 "),t("code",[v._v("JavaScript")]),v._v(" 是如何工作的，了解这些内容能帮助你从底层理解 "),t("code",[v._v("JavaScript")]),v._v(" 的工作机制，从而能帮助你更好地理解和应用 "),t("code",[v._v("JavaScript")]),v._v("。")]),v._v(" "),t("p",[v._v("今天这篇文章我们就继续“向下”分析，站在 "),t("code",[v._v("JavaScript")]),v._v(" 引擎 "),t("code",[v._v("V8")]),v._v(" 的视角，来分析 "),t("code",[v._v("JavaScript")]),v._v(" 代码是如何被执行的。")]),v._v(" "),t("p",[v._v("前端工具和框架的自身更新速度非常块，而且还不断有新的出现。要想追赶上前端工具和框架的更新速度，你就需要抓住那些本质的知识，然后才能更加轻松地理解这些上层应用。比如我们接下来要介绍的"),t("code",[v._v("V8")]),v._v(" 执行机制，能帮助你从底层了解 "),t("code",[v._v("JavaScript")]),v._v("，也能帮助你深入理解语言转换器 "),t("code",[v._v("Babel")]),v._v("、语法检查工具 "),t("code",[v._v("ESLint")]),v._v("、前端框架 "),t("code",[v._v("Vue")]),v._v(" 和 "),t("code",[v._v("React")]),v._v(" 的一些底层实现机制。因此，了解 "),t("code",[v._v("V8")]),v._v("的编译流程能让你对语言以及相关工具有更加充分的认识。")]),v._v(" "),t("p",[v._v("要深入理解 "),t("code",[v._v("V8")]),v._v(" 的工作原理，你需要搞清楚一些概念和原理，比如接下来我们要详细讲解的编译器（"),t("code",[v._v("Compiler")]),v._v("）、解释器（"),t("code",[v._v("Interpreter")]),v._v("）、抽象语法树（"),t("code",[v._v("AST")]),v._v("）、字节码（"),t("code",[v._v("Bytecode")]),v._v("）、即时编译器（"),t("code",[v._v("JIT")]),v._v("）等概念，都是你需要重点关注的。")]),v._v(" "),t("h2",{attrs:{id:"编译器和解释器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编译器和解释器"}},[v._v("#")]),v._v(" 编译器和解释器")]),v._v(" "),t("p",[v._v("之所以存在编译器和解释器，是因为机器不能直接理解我们所写的代码，所以在执行程序之前，需要将我们所写的代码“翻译”成机器能读懂的机器语言。按语言的执行流程，可以把语言划分为"),t("strong",[v._v("编译型语言")]),v._v("和"),t("strong",[v._v("解释型语言")]),v._v("。")]),v._v(" "),t("p",[t("strong",[v._v("编译型语言")]),v._v("在程序执行之前，需要经过编译器的"),t("strong",[v._v("编译过程")]),v._v("，并且编译之后会直接"),t("strong",[v._v("保留")]),v._v("机器能读懂的"),t("strong",[v._v("二进制文件")]),v._v("，这样每次运行程序时，都可以直接运行该二进制文件，而"),t("strong",[v._v("不需要再次重新编译")]),v._v("了。比如 "),t("code",[v._v("C/C++")]),v._v("、"),t("code",[v._v("GO")]),v._v(" 等都是"),t("strong",[v._v("编译型语言")]),v._v("。")]),v._v(" "),t("p",[v._v("而由"),t("strong",[v._v("解释型语言")]),v._v("编写的程序，在每次运行时都需要通过"),t("strong",[v._v("解释器")]),v._v("对程序进行"),t("strong",[v._v("动态解释和执行")]),v._v("。比如 "),t("code",[v._v("Python")]),v._v("、"),t("code",[v._v("JavaScript")]),v._v(" 等都属于解释型语言。")]),v._v(" "),t("p",[v._v("那编译器和解释器是如何“翻译”代码的呢？具体流程你可以参考下图")]),v._v(" "),t("p",[t("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/browser/part3/ls14/1.png",alt:""}})]),v._v(" "),t("p",[v._v("从图中你可以看出这二者的执行流程，大致可阐述为如下：")]),v._v(" "),t("ol",[t("li",[v._v("在编译型语言的编译过程中，编译器首先会依次对源代码进行"),t("strong",[v._v("词法分析")]),v._v("、"),t("strong",[v._v("语法分析")]),v._v("，"),t("strong",[v._v("生成抽象语法树")]),v._v("（"),t("code",[v._v("AST")]),v._v("），然后是"),t("strong",[v._v("优化代码")]),v._v("，最后再"),t("strong",[v._v("生成")]),v._v("处理器能够理解的"),t("strong",[v._v("机器码")]),v._v("。如果编译成功，将会生成一个"),t("strong",[v._v("可执行的文件")]),v._v("（"),t("code",[v._v("exe")]),v._v("）。但如果编译过程发生了语法或者其他的错误，那么编译器就会抛出异常，最后的二进制文件也不会生成成功；")]),v._v(" "),t("li",[v._v("在解释型语言的解释过程中，同样解释器也会对源代码进行"),t("strong",[v._v("词法分析")]),v._v("、"),t("strong",[v._v("语法分析")]),v._v("，"),t("strong",[v._v("并生成抽象语法树")]),v._v("（"),t("code",[v._v("AST")]),v._v("），不过它会再基于抽象语法树"),t("strong",[v._v("生成字节码")]),v._v("，最后再根据字节码来执行程序、输出结果。")])]),v._v(" "),t("h2",{attrs:{id:"v8是如何执行一段-javascript-代码的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#v8是如何执行一段-javascript-代码的"}},[v._v("#")]),v._v(" "),t("code",[v._v("V8")]),v._v("是如何执行一段 "),t("code",[v._v("JavaScript")]),v._v(" 代码的")]),v._v(" "),t("p",[v._v("通过上面的介绍，相信你已经了解编译器和解释器了。那接下来，我们就重点分析下 "),t("code",[v._v("V8")]),v._v(" 是如何执行一段 "),t("code",[v._v("JavaScript")]),v._v(" 代码的。你可以先来“一览全局”，参考下图：")]),v._v(" "),t("p",[t("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/browser/part3/ls14/2.png",alt:""}})]),v._v(" "),t("p",[v._v("从图中可以清楚地看到，"),t("code",[v._v("V8")]),v._v(" 在执行过程中既有"),t("strong",[v._v("解释器")]),v._v(" "),t("code",[v._v("Ignition")]),v._v("，又有"),t("strong",[v._v("编译器")]),v._v(" "),t("code",[v._v("TurboFan")]),v._v("，那么它们是如何配合去执行一段 "),t("code",[v._v("JavaScript")]),v._v(" 代码的呢? 下面我们就按照上图来一一分解其执行流程。")]),v._v(" "),t("p",[t("strong",[v._v("1. 生成抽象语法树（"),t("code",[v._v("AST")]),v._v("）和执行上下文")])]),v._v(" "),t("p",[v._v("将源代码转换为抽象语法树，并生成执行上下文，而执行上下文我们在前面的文章中已经介绍过很多了，主要是代码在执行过程中的"),t("strong",[v._v("环境信息")]),v._v("。")]),v._v(" "),t("p",[v._v("那么下面我们就得重点讲解下"),t("strong",[v._v("抽象语法树")]),v._v("（下面表述中就直接用它的简称 "),t("code",[v._v("AST")]),v._v(" 了），看看什么是 "),t("code",[v._v("AST")]),v._v(" 以及 "),t("code",[v._v("AST")]),v._v(" 的生成过程是怎样的。")]),v._v(" "),t("p",[v._v("高级语言是开发者可以理解的语言，但是让编译器或者解释器来理解就非常困难了。对于编译器或者解释器来说，它们可以理解的就是 "),t("code",[v._v("AST")]),v._v(" 了。所以无论你使用的是"),t("strong",[v._v("解释型语言")]),v._v("还是"),t("strong",[v._v("编译型语言")]),v._v("，在编译过程中，它们都会生成一个 "),t("code",[v._v("AST")]),v._v("。这和渲染引擎将 "),t("code",[v._v("HTML")]),v._v(" 格式文件转换为计算机可以理解的 "),t("code",[v._v("DOM")]),v._v("树的情况类似。")]),v._v(" "),t("p",[v._v("你可以结合下面这段代码来直观地感受下什么是 "),t("code",[v._v("AST")]),v._v("：")]),v._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" myName "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[v._v('" 极客时间 "')]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("function")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[v._v("foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("return")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("23")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\nmyName "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[v._v('"geektime"')]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[v._v("foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br"),t("span",{staticClass:"line-number"},[v._v("3")]),t("br"),t("span",{staticClass:"line-number"},[v._v("4")]),t("br"),t("span",{staticClass:"line-number"},[v._v("5")]),t("br"),t("span",{staticClass:"line-number"},[v._v("6")]),t("br")])]),t("p",[v._v("这段代码经过"),t("code",[v._v("javascript-ast")]),v._v("站点处理后，生成的 "),t("code",[v._v("AST")]),v._v(" 结构如下：")]),v._v(" "),t("p",[t("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/browser/part3/ls14/3.png",alt:""}})]),v._v(" "),t("p",[v._v("从图中可以看出，"),t("code",[v._v("AST")]),v._v(" 的结构和代码的结构非常相似，其实你也可以把 "),t("code",[v._v("AST")]),v._v(" 看成代码的结构化的表示，编译器或者解释器后续的工作都需要依赖于 "),t("code",[v._v("AST")]),v._v("，而不是源代码。")]),v._v(" "),t("p",[t("code",[v._v("AST")]),v._v(" 是非常重要的一种数据结构，在很多项目中有着广泛的应用。其中最著名的一个项目是 "),t("code",[v._v("Babel")]),v._v("。"),t("code",[v._v("Babel")]),v._v(" 是一个被广泛使用的代码转码器，可以将 "),t("code",[v._v("ES6")]),v._v(" 代码转为 "),t("code",[v._v("ES5")]),v._v(" 代码，这意味着你可以现在就用 "),t("code",[v._v("ES6")]),v._v(" 编写程序，而不用担心现有环境是否支持 "),t("code",[v._v("ES6")]),v._v("。"),t("code",[v._v("Babel")]),v._v(" 的工作原理就是先将 "),t("code",[v._v("ES6")]),v._v(" 源码转换为"),t("code",[v._v("AST")]),v._v("，然后再将 "),t("code",[v._v("ES6")]),v._v(" 语法的 "),t("code",[v._v("AST")]),v._v(" 转换为 "),t("code",[v._v("ES5")]),v._v(" 语法的 "),t("code",[v._v("AST")]),v._v("，最后利用 "),t("code",[v._v("ES5")]),v._v(" 的 "),t("code",[v._v("AST")]),v._v(" 生成 "),t("code",[v._v("JavaScript")]),v._v(" 源代码。")]),v._v(" "),t("p",[v._v("除了 "),t("code",[v._v("Babel")]),v._v(" 外，还有 "),t("code",[v._v("ESLint")]),v._v(" 也使用 "),t("code",[v._v("AST")]),v._v("。"),t("code",[v._v("ESLint")]),v._v(" 是一个用来检查 "),t("code",[v._v("JavaScript")]),v._v(" 编写规范的插件，其检测流程也是需要将源码转换为 "),t("code",[v._v("AST")]),v._v("，然后再利用 "),t("code",[v._v("AST")]),v._v(" 来检查代码规范化的问题。")]),v._v(" "),t("p",[v._v("现在你知道了什么是 "),t("code",[v._v("AST")]),v._v(" 以及它的一些应用，那接下来我们再来看下 "),t("code",[v._v("AST")]),v._v(" 是如何生成的。通常，生成 "),t("code",[v._v("AST")]),v._v(" 需要经过两个阶段。")]),v._v(" "),t("p",[t("strong",[v._v("第一阶段是分词（"),t("code",[v._v("tokenize")]),v._v("），又称为词法分析")]),v._v("，其作用是将一行行的源码拆解成一个个 "),t("code",[v._v("token")]),v._v("。所谓"),t("code",[v._v("token")]),v._v("，指的是"),t("strong",[v._v("语法上不可能再分")]),v._v("的、"),t("strong",[v._v("最小的单个字符")]),v._v("或"),t("strong",[v._v("字符串")]),v._v("。你可以参考下图来更好地理解什么 "),t("code",[v._v("token")]),v._v("。")]),v._v(" "),t("p",[t("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/browser/part3/ls14/4.png",alt:""}})]),v._v(" "),t("p",[v._v("从图中可以看出，通过"),t("code",[v._v("var myName")]),v._v(" = “极客时间”简单地定义了一个变量，其中关键字“"),t("code",[v._v("var")]),v._v("”、标识符“"),t("code",[v._v("myName")]),v._v("” 、赋值运算符“"),t("code",[v._v("=")]),v._v("”、字符串“极客时间”四个都是 "),t("code",[v._v("token")]),v._v("，而且它们代表的属性还不一样。")]),v._v(" "),t("p",[t("strong",[v._v("第二阶段是解析（"),t("code",[v._v("parse")]),v._v("），又称为语法分析")]),v._v("，其作用是将上一步生成的 "),t("code",[v._v("token")]),v._v(" 数据，根据语法规则转为 "),t("code",[v._v("AST")]),v._v("。如果源码符合语法规则，这一步就会顺利完成。但如果源码存在语法错误，这一步就会终止，并抛出一个“语法错误”。")]),v._v(" "),t("p",[v._v("这就是 "),t("code",[v._v("AST")]),v._v(" 的生成过程，"),t("strong",[v._v("先分词")]),v._v("，"),t("strong",[v._v("再解析")]),v._v("。")]),v._v(" "),t("p",[v._v("有了 "),t("code",[v._v("AST")]),v._v(" 后，那接下来 "),t("code",[v._v("V8")]),v._v(" 就会"),t("strong",[v._v("生成")]),v._v("该段代码的"),t("strong",[v._v("执行上下文")]),v._v("。至于执行上下文的具体内容，你可以参考前面几篇文章的讲解。")]),v._v(" "),t("p",[t("strong",[v._v("2. 生成字节码")])]),v._v(" "),t("p",[v._v("有了 "),t("code",[v._v("AST")]),v._v(" 和执行上下文后，那接下来的第二步，"),t("strong",[v._v("解释器")]),v._v(" "),t("code",[v._v("Ignition")]),v._v(" 就登场了，它会根据 "),t("code",[v._v("AST")]),v._v(" "),t("strong",[v._v("生成字节码")]),v._v("，并"),t("strong",[v._v("解释执行字节码")]),v._v("。")]),v._v(" "),t("p",[v._v("其实一开始 "),t("code",[v._v("V8")]),v._v(" 并没有"),t("strong",[v._v("字节码")]),v._v("，而是直接将 "),t("code",[v._v("AST")]),v._v(" 转换为"),t("strong",[v._v("机器码")]),v._v("，由于执行机器码的效率是非常高效的，所以这种方式在发布后的一段时间内运行效果是非常好的。但是随着 "),t("code",[v._v("Chrome")]),v._v(" 在手机上的广泛普及，特别是运行在 "),t("code",[v._v("512M")]),v._v(" 内存的手机上，内存占用问题也暴露出来了，因为 "),t("code",[v._v("V8")]),v._v(" 需要消耗大量的内存来存放转换后的机器码。"),t("strong",[v._v("为了解决内存占用问题")]),v._v("，"),t("code",[v._v("V8")]),v._v(" 团队大幅重构了引擎架构，引入"),t("strong",[v._v("字节码")]),v._v("，并且抛弃了之前的编译器，最终花了将进四年的时间，实现了现在的这套架构。")]),v._v(" "),t("p",[v._v("那什么是字节码呢？为什么引入字节码就能解决内存占用问题呢？")]),v._v(" "),t("p",[v._v("字节码就是介于 "),t("code",[v._v("AST")]),v._v(" 和机器码之间的一种代码。但是与特定类型的机器码无关，字节码需要通过解释器将其转换为机器码后才能执行。")]),v._v(" "),t("p",[v._v("理解了什么是字节码，我们再来对比下"),t("strong",[v._v("高级代码")]),v._v("、"),t("strong",[v._v("字节码")]),v._v("和"),t("strong",[v._v("机器码")]),v._v("，你可以参考下图")]),v._v(" "),t("p",[t("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/browser/part3/ls14/5.png",alt:""}})]),v._v(" "),t("p",[v._v("从图中可以看出，机器码所占用的空间远远超过了字节码，所以使用字节码可以"),t("strong",[v._v("减少系统的内存使用")]),v._v("。")]),v._v(" "),t("p",[t("strong",[v._v("3. 执行代码")])]),v._v(" "),t("p",[v._v("生成字节码之后，接下来就要进入"),t("strong",[v._v("执行阶段")]),v._v("了。")]),v._v(" "),t("p",[v._v("通常，如果有一段第一次执行的字节码，解释器 "),t("code",[v._v("Ignition")]),v._v(" 会逐条解释执行。在执行字节码的过程中，如果发现有"),t("strong",[v._v("热点代码")]),v._v("（"),t("code",[v._v("HotSpot")]),v._v("），比如一段代码被"),t("strong",[v._v("重复执行多次")]),v._v("，这种就称为"),t("strong",[v._v("热点代码")]),v._v("，那么后台的编译器 "),t("code",[v._v("TurboFan")]),v._v(" 就会把该段"),t("strong",[v._v("热点的字节码")]),v._v("编译为"),t("strong",[v._v("高效的机器码")]),v._v("，然后当再次执行这段被优化的代码时，只需要执行编译后的机器码就可以了，这样就大大提升了代码的执行效率。")]),v._v(" "),t("p",[t("code",[v._v("V8")]),v._v(" 的解释器和编译器的取名也很有意思。解释器 "),t("code",[v._v("Ignition")]),v._v(" 是"),t("strong",[v._v("点火器")]),v._v("的意思，编译器 "),t("code",[v._v("TurboFan")]),v._v(" 是"),t("strong",[v._v("涡轮增压")]),v._v("的意思，寓意着代码启动时通过点火器慢慢发动，一旦启动，涡轮增压介入，其执行效率随着执行时间越来越高效率，因为"),t("strong",[v._v("热点代码")]),v._v("都被编译器 "),t("code",[v._v("TurboFan")]),v._v(" 转换了"),t("strong",[v._v("机器码")]),v._v("，直接执行机器码就省去了字节码“翻译”为机器码的过程。")]),v._v(" "),t("p",[v._v("其实字节码配合解释器和编译器是最近一段时间很火的技术，比如 "),t("code",[v._v("Java")]),v._v(" 和 "),t("code",[v._v("Python")]),v._v(" 的虚拟机也都是基于这种技术实现的，我们把这种技术称为"),t("strong",[v._v("即时编译")]),v._v("（"),t("code",[v._v("JIT")]),v._v("）。具体到 "),t("code",[v._v("V8")]),v._v("，就是指"),t("strong",[v._v("解释器")]),v._v(" "),t("code",[v._v("Ignition")]),v._v(" 在解释执行字节码的同时，收集代码信息，当它发现某一部分代码变热了之后，"),t("code",[v._v("TurboFan")]),v._v(" "),t("strong",[v._v("编译器")]),v._v("便闪亮登场，把热点的字节码转换为"),t("strong",[v._v("机器码")]),v._v("，并把转换后的机器码"),t("strong",[v._v("保存起来")]),v._v("，以备下次使用。")]),v._v(" "),t("p",[v._v("对于 "),t("code",[v._v("JavaScript")]),v._v(" 工作引擎，除了 "),t("code",[v._v("V8")]),v._v(" 使用了“字节码 +"),t("code",[v._v("JIT")]),v._v("”技术之外，苹果的 "),t("code",[v._v("SquirrelFish Extreme")]),v._v(" 和 "),t("code",[v._v("Mozilla")]),v._v(" 的 "),t("code",[v._v("SpiderMonkey")]),v._v(" 也都使用了该技术。")]),v._v(" "),t("p",[v._v("这么多语言的工作引擎都使用了“"),t("strong",[v._v("字节码")]),v._v(" +"),t("strong",[t("code",[v._v("JIT")])]),v._v("”技术，因此理解 "),t("code",[v._v("JIT")]),v._v(" 这套工作机制还是很有必要的。你可以结合下图看看 "),t("code",[v._v("JIT")]),v._v(" 的工作过程：")]),v._v(" "),t("p",[t("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/browser/part3/ls14/6.png",alt:""}})]),v._v(" "),t("h2",{attrs:{id:"javascript-的性能优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript-的性能优化"}},[v._v("#")]),v._v(" "),t("code",[v._v("JavaScript")]),v._v(" 的性能优化")]),v._v(" "),t("p",[v._v("到这里相信你现在已经了解"),t("code",[v._v("V8")]),v._v(" 是如何执行一段 "),t("code",[v._v("JavaScript")]),v._v(" 代码的了。在过去几年中，"),t("code",[v._v("JavaScript")]),v._v(" 的性能得到了大幅提升，这得益于 "),t("code",[v._v("V8")]),v._v(" 团队对解释器和编译器的不断改进和优化。")]),v._v(" "),t("p",[v._v("虽然在 "),t("code",[v._v("V8")]),v._v(" 诞生之初，也出现过一系列针对 "),t("code",[v._v("V8")]),v._v(" 而专门优化 "),t("code",[v._v("JavaScript")]),v._v(" 性能的方案，比如隐藏类、内联缓存等概念都是那时候提出来的。不过随着 "),t("code",[v._v("V8")]),v._v(" 的架构调整，你越来越不需要这些微优化策略了，相反，对于优化 "),t("code",[v._v("JavaScript")]),v._v(" 执行效率，你应该将优化的中心聚焦在单次"),t("strong",[v._v("脚本的执行时间")]),v._v("和"),t("strong",[v._v("脚本的网络下载")]),v._v("上，主要关注以下三点内容")]),v._v(" "),t("ul",[t("li",[v._v("提升单次脚本的执行速度，避免 "),t("code",[v._v("JavaScript")]),v._v(" 的长任务霸占主线程，这样可以使得页面快速响应交互；")]),v._v(" "),t("li",[v._v("避免大的内联脚本，因为在解析 "),t("code",[v._v("HTML")]),v._v(" 的过程中，"),t("strong",[v._v("解析和编译")]),v._v("也会占用主线程；")]),v._v(" "),t("li",[v._v("减少 "),t("code",[v._v("JavaScript")]),v._v(" 文件的容量，因为更小的文件会提升下载速度，并且占用更低的内存（比如代码丑化）；")])]),v._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),t("p",[v._v("好了，今天就讲到这里，下面我来总结下今天的内容。")]),v._v(" "),t("ul",[t("li",[v._v("首先我们介绍了"),t("strong",[v._v("编译器")]),v._v("和"),t("strong",[v._v("解释器")]),v._v("的区别。")]),v._v(" "),t("li",[v._v("紧接着又详细分析了 "),t("code",[v._v("V8")]),v._v(" 是如何执行一段 "),t("code",[v._v("JavaScript")]),v._v(" 代码的："),t("code",[v._v("V8")]),v._v(" 依据 "),t("code",[v._v("JavaScript")]),v._v(" 代码生成 "),t("code",[v._v("AST")]),v._v(" 和"),t("strong",[v._v("执行上下文")]),v._v("，再基于 "),t("code",[v._v("AST")]),v._v(" 生成"),t("strong",[v._v("字节码")]),v._v("，然后通过"),t("strong",[v._v("解释器执行字节码")]),v._v("，通过"),t("strong",[v._v("编译器来优化编译字节码")]),v._v("。")]),v._v(" "),t("li",[v._v("基于字节码和编译器，我们又介绍了 "),t("code",[v._v("JIT")]),v._v(" 技术。")]),v._v(" "),t("li",[v._v("最后我们延伸说明了下优化 "),t("code",[v._v("JavaScript")]),v._v(" 性能的一些策略。")]),v._v(" "),t("li",[v._v("之所以在本专栏里讲 "),t("code",[v._v("V8")]),v._v(" 的执行流程，是因为我觉得编译器和解释器的相关概念和理论对于程序员来说至关重要，向上能让你充分理解一些前端应用的本质，向下能打开计算机编译原理的大门。通过这些知识的学习能让你将很多模糊的概念关联起来，使其变得更加清楚，从而拓宽视野，上升到更高的层次。")])])])}),[],!1,null,null,null);_.default=e.exports}}]);