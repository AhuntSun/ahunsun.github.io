(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{440:function(s,n,t){"use strict";t.r(n);var a=t(27),e=Object(a.a)({},(function(){var s=this,n=s.$createElement,t=s._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_06-javascript实现哈希表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_06-javascript实现哈希表"}},[s._v("#")]),s._v(" 06.JavaScript实现哈希表")]),s._v(" "),t("h2",{attrs:{id:"一、哈希表简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、哈希表简介"}},[s._v("#")]),s._v(" 一、哈希表简介")]),s._v(" "),t("h3",{attrs:{id:"_1-1-认识哈希表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-认识哈希表"}},[s._v("#")]),s._v(" 1.1.认识哈希表")]),s._v(" "),t("p",[s._v("哈希表通常是基于"),t("strong",[s._v("数组")]),s._v("实现的，但是相对于数组，它存在更多优势：")]),s._v(" "),t("ul",[t("li",[s._v("哈希表可以提供非常快速的"),t("strong",[s._v("插入-删除-查找操作")]),s._v("；")]),s._v(" "),t("li",[s._v("无论多少数据，插入和删除值都只需要非常短的时间，即O(1)的时间级。实际上，只需要"),t("strong",[s._v("几个机器指令")]),s._v("即可完成；")]),s._v(" "),t("li",[s._v("哈希表的速度比"),t("strong",[s._v("树还要快")]),s._v("，基本可以瞬间查找到想要的元素。但是相对于树来说编码要简单得多。")])]),s._v(" "),t("p",[t("strong",[s._v("哈希表同样存在不足之处")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("哈希表中的数据是"),t("strong",[s._v("没有顺序")]),s._v("的，所以不能以一种固定的方式（比如从小到大 ）来遍历其中的元素。")]),s._v(" "),t("li",[s._v("通常情况下，哈希表中的key是"),t("strong",[s._v("不允许重复")]),s._v("的，不能放置相同的key，用于保存不同的元素。")])]),s._v(" "),t("p",[t("strong",[s._v("哈希表是什么？")])]),s._v(" "),t("ul",[t("li",[s._v("哈希表并不好理解，不像数组、链表和树等可通过图形的形式表示其结构和原理。")]),s._v(" "),t("li",[s._v("哈希表的结构就是"),t("strong",[s._v("数组")]),s._v("，但它神奇之处在于对"),t("strong",[s._v("下标值的一种变换")]),s._v("，这种变换我们可以称之为"),t("strong",[s._v("哈希函数")]),s._v("，通过哈希函数可以获取"),t("strong",[s._v("HashCode")]),s._v("。")])]),s._v(" "),t("p",[t("strong",[s._v("通过以下案例了解哈希表：")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("案例一：公司想要存储1000个人的信息，每一个工号对应一个员工的信息。若使用数组，增删数据时比较麻烦；使用链表，获取数据时比较麻烦。有没有一种数据结构，能把某一员工的姓名转换为它对应的工号，再根据工号查找该员工的完整信息呢？没错此时就可以使用哈希表的哈希函数来实现。")])]),s._v(" "),t("li",[t("p",[s._v("案例二：存储联系人和对应的电话号码：当要查找张三（比如）的号码时，若使用数组：由于不知道存储张三数据对象的下标值，所以查找起来十分麻烦，使用链表时也同样麻烦。而使用哈希表就能通过哈希函数把张三这个名称转换为它对应的下标值，再通过下标值查找效率就非常高了。")])])]),s._v(" "),t("p",[s._v("也就是说：哈希表最后还是基于数据来实现的，只不过哈希表能够通过哈希函数把字符串转化为对应的"),t("strong",[s._v("下标值")]),s._v("，建立字符串和下标值的对应关系。")]),s._v(" "),t("h3",{attrs:{id:"_1-2-哈希化的方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-哈希化的方式"}},[s._v("#")]),s._v(" 1.2.哈希化的方式")]),s._v(" "),t("p",[s._v("为了把字符串转化为对应的下标值，需要有一套编码系统，为了方便理解我们创建这样一套编码系统：比如"),t("strong",[s._v("a为1，b为2，c为3，以此类推z为26，空格为27（不考虑大写情况）")]),s._v("。")]),s._v(" "),t("p",[s._v("有了编码系统后，将字母转化为数字也有很多种方式：")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("方式一")]),s._v("：数字相加。例如"),t("strong",[s._v("cats转化为数字")]),s._v("：3+1+20+19=43，那么就把43作为cats单词的下标值储存在数组中；")]),s._v(" "),t("p",[s._v("但是这种方式会存在这样的问题：很多的单词按照该方式转化为数字后都是43，比如was。而在数组中"),t("strong",[s._v("一个下标值")]),s._v("只能"),t("strong",[s._v("储存一个数据")]),s._v("，所以该方式不合理。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("方式二")]),s._v("：幂的连乘。我们平时使用的"),t("strong",[s._v("大于10的数字")]),s._v("，就是用"),t("strong",[s._v("幂的连乘")]),s._v("来表示它的唯一性的。比如： 6543=6 * 10^3^ + 5 * 10^2^ + 4 * 10 + 3；这样单词也可以用该种方式来表示：cats = 3 * 27^3^ + 1 * 27^2^ + 20 * 27 + 17 =60337;")]),s._v(" "),t("p",[s._v("虽然该方式可以保证字符的唯一性，但是如果是较长的字符（如aaaaaaaaaa）所表示的数字就非常大，此时要求很大容量的数组，然而其中却有许多下标值指向的是无效的数据（比如不存在zxcvvv这样的单词），造成了数组空间的浪费。")])])]),s._v(" "),t("p",[t("strong",[s._v("两种方案总结：")])]),s._v(" "),t("ul",[t("li",[s._v("第一种方案（让数字相加求和）产生的"),t("strong",[s._v("数组下标太少")]),s._v("；")]),s._v(" "),t("li",[s._v("第二种方案（与27的幂相乘求和）产生的"),t("strong",[s._v("数组下标又太多")]),s._v("；")])]),s._v(" "),t("p",[s._v("现在需要一种"),t("strong",[s._v("压缩方法")]),s._v("，把幂的连乘方案系统中得到的"),t("strong",[s._v("巨大整数范围")]),s._v("压缩到"),t("strong",[s._v("可接受的数组范围")]),s._v("中。可以通过取余操作来实现。虽然取余操作得到的结构也有可能重复，但是可以通过其他方式解决。")]),s._v(" "),t("p",[t("strong",[s._v("哈希表的一些概念：")])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("哈希化："),t("strong",[s._v("将")]),s._v("大数字")]),s._v("转化成"),t("strong",[s._v("数组范围内下标")]),s._v("的过程，称之为"),t("strong",[s._v("哈希化")]),s._v("；")]),s._v(" "),t("li",[t("strong",[s._v("哈希函数："),t("strong",[s._v("我们通常会将")]),s._v("单词")]),s._v("转化成"),t("strong",[s._v("大数字")]),s._v("，把"),t("strong",[s._v("大数字")]),s._v("进行"),t("strong",[s._v("哈希化")]),s._v("的代码实现放在一个函数中，该函数就称为"),t("strong",[s._v("哈希函数")]),s._v("；")]),s._v(" "),t("li",[t("strong",[s._v("哈希表："),t("strong",[s._v("对最终数据插入的")]),s._v("数组")]),s._v("进行整个"),t("strong",[s._v("结构的封装")]),s._v("，得到的就是"),t("strong",[s._v("哈希表")]),s._v("。")])]),s._v(" "),t("p",[t("strong",[s._v("仍然需要解决的问题")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("哈希化过后的下标依然可能"),t("strong",[s._v("重复")]),s._v("，如何解决这个问题呢？这种情况称为"),t("strong",[s._v("冲突")]),s._v("，冲突是"),t("strong",[s._v("不可避免")]),s._v("的，我们只能"),t("strong",[s._v("解决冲突")]),s._v("。")])]),s._v(" "),t("h3",{attrs:{id:"_1-3-解决冲突的方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-解决冲突的方法"}},[s._v("#")]),s._v(" 1.3.解决冲突的方法")]),s._v(" "),t("p",[t("strong",[s._v("解决冲突常见的两种方案：")])]),s._v(" "),t("ul",[t("li",[s._v("方案一："),t("strong",[s._v("链地址法")]),s._v("（"),t("strong",[s._v("拉链法")]),s._v("）；")])]),s._v(" "),t("p",[s._v("如下图所示，我们将每一个数字都对"),t("strong",[s._v("10")]),s._v("进行取余操作，则余数的范围"),t("strong",[s._v("0~9")]),s._v("作为数组的下标值。并且，数组每一个下标值对应的位置存储的不再是一个数字了，而是存储由经过取余操作后得到相同余数的数字组成的"),t("strong",[s._v("数组")]),s._v("或"),t("strong",[s._v("链表")]),s._v("。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/1.png",alt:"image-20200229002550499"}})]),s._v(" "),t("p",[s._v("这样可以根据下标值获取到整个数组或链表，之后继续在数组或链表中查找就可以了。而且，产生冲突的元素一般不会太多。")]),s._v(" "),t("p",[t("strong",[s._v("总结："),t("strong",[s._v("链地址法解决冲突的办法是")]),s._v("每个数组单元")]),s._v("中存储的不再是"),t("strong",[s._v("单个数据")]),s._v("，而是一条"),t("strong",[s._v("链条")]),s._v("，这条链条常使用的数据结构为"),t("strong",[s._v("数组或链表")]),s._v("，两种数据结构查找的效率相当（因为链条的元素一般不会太多）。")]),s._v(" "),t("ul",[t("li",[s._v("方案二："),t("strong",[s._v("开放地址法")]),s._v("；")])]),s._v(" "),t("p",[s._v("开放地址法的主要工作方式是"),t("strong",[s._v("寻找空白的单元格")]),s._v("来放置"),t("strong",[s._v("冲突")]),s._v("的数据项。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/2.png",alt:"image-20200229083553133"}})]),s._v(" "),t("p",[s._v("根据探测空白单元格位置方式的不同，可分为三种方法：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("线性探测")])]),s._v(" "),t("li",[t("strong",[s._v("二次探测")])]),s._v(" "),t("li",[t("strong",[s._v("再哈希法")])])]),s._v(" "),t("h3",{attrs:{id:"_1-4-寻找空白单元格的方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-寻找空白单元格的方式"}},[s._v("#")]),s._v(" 1.4.寻找空白单元格的方式")]),s._v(" "),t("h4",{attrs:{id:"线性探测"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线性探测"}},[s._v("#")]),s._v(" 线性探测")]),s._v(" "),t("p",[t("strong",[s._v("当插入13时")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("经过哈希化（对10取余）之后得到的下标值index=3，但是该位置已经放置了数据33。而线性探测就是从"),t("strong",[s._v("index位置+1")]),s._v("开始向后一个一个来查找"),t("strong",[s._v("合适的位置")]),s._v("来放置13，所谓合适的位置指的是"),t("strong",[s._v("空的位置")]),s._v("，如上图中index=4的位置就是合适的位置。")])]),s._v(" "),t("p",[t("strong",[s._v("当查询13时")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("首先13经过哈希化得到index=3，如果index=3的位置存放的数据与需要查询的数据13相同，就直接返回；")]),s._v(" "),t("li",[s._v("不相同时，则线性查找，从"),t("strong",[s._v("index+1")]),s._v("位置开始一个一个位置地查找数据13；")]),s._v(" "),t("li",[s._v("查询过程中不会遍历整个哈希表，只要查询到"),t("strong",[s._v("空位置，就停止")]),s._v("，因为插入13时不会跳过空位置去插入其他位置。")])]),s._v(" "),t("p",[t("strong",[s._v("当删除13时")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("删除操作和上述两种情况类似，但需要注意的是，删除一个数据项时，"),t("strong",[s._v("不能")]),s._v("将该位置下标的内容"),t("strong",[s._v("设置为null")]),s._v("，否则会"),t("strong",[s._v("影响到之后其他的查询操作")]),s._v("，因为一遇到为null的位置就会停止查找。")]),s._v(" "),t("li",[s._v("通常"),t("strong",[s._v("删除一个位置的数据项")]),s._v("时，我们可以"),t("strong",[s._v("将它进行特殊处理")]),s._v("（比如设置为-1），这样在查找时遇到-1就知道要"),t("strong",[s._v("继续查找")]),s._v("。")])]),s._v(" "),t("p",[t("strong",[s._v("线性探测存在的问题")]),s._v("：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("线性探测存在一个比较严重的问题，就是"),t("strong",[s._v("聚集")]),s._v("；")])]),s._v(" "),t("li",[t("p",[s._v("如哈希表中还没插入任何元素时，插入23、24、25、26、27，这就意味着下标值为3、4、5、6、7的位置都放置了数据，这种"),t("strong",[s._v("一连串填充单元")]),s._v("就称为"),t("strong",[s._v("聚集")]),s._v("；")])]),s._v(" "),t("li",[t("p",[s._v("聚集会影响哈希表的"),t("strong",[s._v("性能")]),s._v("，无论是插入/查询/删除都会影响；")])]),s._v(" "),t("li",[t("p",[s._v("比如插入13时就会发现，连续的单元3~7都不允许插入数据，并且在插入的过程中需要经历多次这种情况。二次探测法可以解决该问题。")])])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/3.png",alt:"image-20200306181129217"}})]),s._v(" "),t("h4",{attrs:{id:"二次探测"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二次探测"}},[s._v("#")]),s._v(" 二次探测")]),s._v(" "),t("p",[s._v("上文所说的"),t("strong",[s._v("线性探测存在的问题")]),s._v("：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("如果之前的数据是"),t("strong",[s._v("连续插入")]),s._v("的，那么新插入的一个数据可能需要"),t("strong",[s._v("探测很长的距离")]),s._v("；")]),s._v(" "),t("p",[s._v("二次探测是在线性探测的基础上进行了"),t("strong",[s._v("优化")]),s._v("：")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("线性探测")]),s._v("：我们可以看成是"),t("strong",[s._v("步长为1")]),s._v("的探测，比如从下表值x开始，那么线性探测就是按照下标值：x+1、x+2、x+3等依次探测；")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("二次探测")]),s._v("：对步长进行了优化，比如从下标值x开始探测：x+1^2^、x+2^2^、x+3^3^ 。这样"),t("strong",[s._v("一次性探测比较长的距离")]),s._v("，避免了数据聚集带来的影响。")])])]),s._v(" "),t("p",[t("strong",[s._v("二次探测存在的问题")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("当插入数据分布性较大的一组数据时，比如：13-163-63-3-213，这种情况会造成"),t("strong",[s._v("步长不一的一种聚集")]),s._v("（虽然这种情况出现的概率较线性探测的聚集要小），同样会影响性能。")])]),s._v(" "),t("h4",{attrs:{id:"再哈希化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#再哈希化"}},[s._v("#")]),s._v(" 再哈希化")]),s._v(" "),t("p",[s._v("在开放地址法中寻找空白单元格的最好的解决方式为"),t("strong",[s._v("再哈希化")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("二次探测的步长是固定的：1，4，9，16依次类推；")]),s._v(" "),t("li",[s._v("现在需要一种方法：产生一种"),t("strong",[s._v("依赖关键字(数据)的探测序列")]),s._v("，而不是每个关键字探测步长都一样；")]),s._v(" "),t("li",[s._v("这样，"),t("strong",[s._v("不同的关键字")]),s._v("即使映射到"),t("strong",[s._v("相同的数组下标")]),s._v("，也可以使用"),t("strong",[s._v("不同的探测序列")]),s._v("；")]),s._v(" "),t("li",[s._v("再哈希法的做法为：把关键字用"),t("strong",[s._v("另一个")]),s._v("哈希函数，"),t("strong",[s._v("再做一次哈希化")]),s._v("，用这次哈希化的"),t("strong",[s._v("结果作为该关键字的步长")]),s._v("；")])]),s._v(" "),t("p",[t("strong",[s._v("第二次哈希化需要满足以下两点")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("和"),t("strong",[s._v("第一个哈希函数不同")]),s._v("，不然哈希化后的结果仍是原来位置；")]),s._v(" "),t("li",[t("strong",[s._v("不能输出为0")]),s._v("，否则每次探测都是原地踏步的死循环；")])]),s._v(" "),t("p",[t("strong",[s._v("优秀的哈希函数")]),s._v("：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("stepSize = constant - （key % constant）")]),s._v("；")]),s._v(" "),t("li",[s._v("其中constant是"),t("strong",[s._v("质数")]),s._v("，且小于数组的容量；")]),s._v(" "),t("li",[s._v("例如：stepSize = 5 - （key % 5），满足需求，并且结果不可能为0；")])]),s._v(" "),t("p",[t("strong",[s._v("哈希化的效率")])]),s._v(" "),t("p",[s._v("哈希表中执行插入和搜索操作效率是非常高的。")]),s._v(" "),t("ul",[t("li",[s._v("如果没有"),t("strong",[s._v("发生冲突")]),s._v("，那么效率就会更高；")]),s._v(" "),t("li",[s._v("如果"),t("strong",[s._v("发生冲突")]),s._v("，存取时间就依赖后来的探测长度；")]),s._v(" "),t("li",[s._v("平均探测长度以及平均存取时间，取决于"),t("strong",[s._v("填装因子")]),s._v("，随着填装因子变大，探测长度会越来越长。")])]),s._v(" "),t("p",[s._v("理解概念"),t("strong",[s._v("装填因子")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("装填因子表示当前哈希表中已经"),t("strong",[s._v("包含的数据项")]),s._v("和"),t("strong",[s._v("整个哈希表长度")]),s._v("的"),t("strong",[s._v("比值")]),s._v("；")]),s._v(" "),t("li",[t("strong",[s._v("装填因子 = 总数据项 / 哈希表长度")]),s._v("；")]),s._v(" "),t("li",[t("strong",[s._v("开放地址法的装填因子")]),s._v("最大为"),t("strong",[s._v("1")]),s._v("，因为只有空白的单元才能放入元素；")]),s._v(" "),t("li",[t("strong",[s._v("链地址法的装填因子")]),s._v("可以"),t("strong",[s._v("大于1")]),s._v("，因为只要愿意，拉链法可以无限延伸下去；")])]),s._v(" "),t("h3",{attrs:{id:"_1-5-不同探测方式性能的比较"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-不同探测方式性能的比较"}},[s._v("#")]),s._v(" 1.5.不同探测方式性能的比较")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("线性探测：")])])]),s._v(" "),t("p",[s._v("可以看到，随着装填因子的增大，平均探测长度呈指数形式增长，性能较差。实际情况中，最好的装填因子取决于存储效率和速度之间的平衡，随着装填因子变小，存储效率下降，而速度上升。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/4.png",alt:"image-20200229101035976"}})]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("二次探测和再哈希化的性能")]),s._v("：")])]),s._v(" "),t("p",[s._v("二次探测和再哈希法性能相当，它们的性能比线性探测略好。由下图可知，随着装填因子的变大，平均探测长度呈指数形式增长，需要探测的次数也呈指数形式增长，性能不高。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/5.png",alt:"image-20200229100339679"}})]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("链地址法的性能：")])])]),s._v(" "),t("p",[s._v("可以看到随着装填因子的增加，平均探测长度呈线性增长，较为平缓。在开发中使用链地址法较多，比如Java中的HashMap中使用的就是"),t("strong",[s._v("链地址法")]),s._v("。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/6.png",alt:"image-20200229100712464"}})]),s._v(" "),t("h3",{attrs:{id:"_1-6-优秀的哈希函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-优秀的哈希函数"}},[s._v("#")]),s._v(" 1.6.优秀的哈希函数")]),s._v(" "),t("p",[s._v("哈希表的优势在于它的速度，所以哈希函数不能采用消耗性能较高的复杂算法。提高速度的一个方法是在哈希函数中"),t("strong",[s._v("尽量减少乘法和除法")]),s._v("。")]),s._v(" "),t("p",[s._v("性能高的哈希函数应具备以下两个优点：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("快速的计算")]),s._v("；")]),s._v(" "),t("li",[t("strong",[s._v("均匀的分布")]),s._v("；")])]),s._v(" "),t("h4",{attrs:{id:"快速计算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#快速计算"}},[s._v("#")]),s._v(" 快速计算")]),s._v(" "),t("p",[t("strong",[s._v("霍纳法则")]),s._v("：在中国霍纳法则也叫做"),t("strong",[s._v("秦久韶算法")]),s._v("，具体算法为：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/7.png",alt:"image-20200229105546884"}})]),s._v(" "),t("p",[s._v("求多项式的值时，首先计算最内层括号内一次多项式的值，然后由内向外逐层计算一次多项式的值。这种算法把求n次多项式f(x)的值就转化为求n个一次多项式的值。")]),s._v(" "),t("p",[t("strong",[s._v("变换之前")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("乘法次数：n（n+1）/2次；")]),s._v(" "),t("li",[s._v("加法次数：n次；")])]),s._v(" "),t("p",[t("strong",[s._v("变换之后：")])]),s._v(" "),t("ul",[t("li",[s._v("乘法次数：n次；")]),s._v(" "),t("li",[s._v("加法次数：n次；")])]),s._v(" "),t("p",[s._v("如果使用大O表示时间复杂度的话，直接从变换前的"),t("strong",[s._v("O(N^2^)"),t("strong",[s._v("降到了")]),s._v("O(N)")]),s._v("。")]),s._v(" "),t("h4",{attrs:{id:"均匀分布"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#均匀分布"}},[s._v("#")]),s._v(" 均匀分布")]),s._v(" "),t("p",[s._v("为了保证数据在哈希表中"),t("strong",[s._v("均匀分布")]),s._v("，当我们需要"),t("strong",[s._v("使用常量的地方")]),s._v("，尽量使用"),t("strong",[s._v("质数")]),s._v("；比如：哈希表的长度、N次幂的底数等。")]),s._v(" "),t("p",[s._v("Java中的HashMap采用的是链地址法，哈希化采用的是公式为："),t("strong",[s._v("index = HashCode（key）&（Length-1）")])]),s._v(" "),t("p",[s._v("即将数据化为二进制进行"),t("strong",[s._v("与")]),s._v("运算，而不是取余运算。这样计算机直接运算二进制数据，效率更高。但是JavaScript在进行叫大数据的"),t("strong",[s._v("与")]),s._v("运算时会出现问题，所以以下使用JavaScript实现哈希化时还是采用取余运算。")]),s._v(" "),t("h2",{attrs:{id:"二、初步封装哈希表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、初步封装哈希表"}},[s._v("#")]),s._v(" 二、初步封装哈希表")]),s._v(" "),t("p",[t("strong",[s._v("哈希表的常见操作为：")])]),s._v(" "),t("ul",[t("li",[s._v("put（key，value）：插入或修改操作；")]),s._v(" "),t("li",[s._v("get（key）：获取哈希表中特定位置的元素；")]),s._v(" "),t("li",[s._v("remove（key）：删除哈希表中特定位置的元素；")]),s._v(" "),t("li",[s._v("isEmpty（）：如果哈希表中不包含任何元素，返回trun，如果哈希表长度大于0则返回false；")]),s._v(" "),t("li",[s._v("size（）：返回哈希表包含的元素个数；")]),s._v(" "),t("li",[s._v("resize（value）：对哈希表进行扩容操作；")])]),s._v(" "),t("h3",{attrs:{id:"_2-1-哈希函数的简单实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-哈希函数的简单实现"}},[s._v("#")]),s._v(" 2.1.哈希函数的简单实现")]),s._v(" "),t("p",[s._v("首先使用霍纳法则计算hashCode的值，通过取余操作实现哈希化，此处先简单地指定数组的大小。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    //设计哈希函数\n    //1.将字符串转成比较大的数字：hashCede\n    //2.将大的数字hasCode压缩到数组范围(大小)之内\n    function hashFunc(str, size){\n      //1.定义hashCode变量\n      let hashCode = 0\n\n      //2.霍纳法则，计算hashCode的值\n      //cats -> Unicode编码\n      for(let i = 0 ;i < str.length; i++){\n        // str.charCodeAt(i)//获取某个字符对应的unicode编码\n        hashCode = 37 * hashCode + str.charCodeAt(i)\n      }\n\n      //3.取余操作\n      let index = hashCode % size\n      return index\n    }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("p",[t("strong",[s._v("测试代码：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    //测试哈希函数\n    console.log(hashFunc('123', 7));\n    console.log(hashFunc('NBA', 7));\n    console.log(hashFunc('CBA', 7));\n    console.log(hashFunc('CMF', 7));\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("strong",[s._v("测试结果：")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/8.png",alt:"image-20200306183709654"}})]),s._v(" "),t("h3",{attrs:{id:"_2-2-创建哈希表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-创建哈希表"}},[s._v("#")]),s._v(" 2.2.创建哈希表")]),s._v(" "),t("p",[s._v("封装哈希表的数组结构模型：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/9.png",alt:"image-20200229135924674"}})]),s._v(" "),t("p",[s._v("首先创建哈希表类HashTable，并添加必要的属性和上面实现的哈希函数，再进行其他方法的实现。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    //封装哈希表类\n    function HashTable() {\n      //属性\n      this.storage = []\n      this.count = 0//计算已经存储的元素个数\n      //装填因子：loadFactor > 0.75时需要扩容；loadFactor < 0.25时需要减少容量\n      this.limit = 7//初始长度\n\n      //方法\n      //哈希函数\n      HashTable.prototype.hashFunc = function(str, size){\n      //1.定义hashCode变量\n      let hashCode = 0\n\n      //2.霍纳法则，计算hashCode的值\n      //cats -> Unicode编码\n      for(let i = 0 ;i < str.length; i++){\n        // str.charCodeAt(i)//获取某个字符对应的unicode编码\n        hashCode = 37 * hashCode + str.charCodeAt(i)\n      }\n\n      //3.取余操作\n      let index = hashCode % size\n      return index\n    }\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br")])]),t("h3",{attrs:{id:"_2-3-put-key-value"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-put-key-value"}},[s._v("#")]),s._v(" 2.3.put(key,value)")]),s._v(" "),t("p",[s._v("哈希表的插入和修改操作是同一个函数：因为，当使用者传入一个<key，value>时，如果原来不存在该key，那么就是插入操作，如果原来已经存在该key，那么就是修改操作。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/10.png",alt:"image-20200229145513769"}})]),s._v(" "),t("p",[t("strong",[s._v("实现思路：")])]),s._v(" "),t("ul",[t("li",[s._v("首先，根据key获取索引值index，目的为将数据插入到storage的对应位置；")]),s._v(" "),t("li",[s._v("然后，根据索引值取出bucket，如果bucket不存在，先创建bucket，随后放置在该索引值的位置；")]),s._v(" "),t("li",[s._v("接着，判断新增还是修改原来的值。如果已经有值了，就修改该值；如果没有，就执行后续操作。")]),s._v(" "),t("li",[s._v("最后，进行新增数据操作。")])]),s._v(" "),t("p",[t("strong",[s._v("代码实现：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    //插入&修改操作\n    HashTable.prototype.put = function (key, value){\n      //1.根据key获取对应的index\n      let index = this.hashFunc(key, this.limit)\n\n      //2.根据index取出对应的bucket\n      let bucket = this.storage[index]\n\n      //3.判断该bucket是否为null\n      if (bucket == null) {\n        bucket = []\n        this.storage[index] = bucket\n      }\n\n      //4.判断是否是修改数据\n      for (let i = 0; i < bucket.length; i++) {\n        let tuple = bucket[i];\n        if (tuple[0] == key) {\n          tuple[1] = value\n          return//不用返回值\n        }\n      }\n\n      //5.进行添加操作\n      bucket.push([key, value])\n      this.count += 1\n    }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br")])]),t("p",[t("strong",[s._v("测试代码：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    //测试哈希表\n    //1.创建哈希表\n    let ht = new HashTable()\n\n    //2.插入数据\n    ht.put('class1','Tom')\n    ht.put('class2','Mary')\n    ht.put('class3','Gogo')\n    ht.put('class4','Tony')\n    ht.put('class4', 'Vibi')\n    console.log(ht);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[t("strong",[s._v("测试结果：")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/11.png",alt:"image-20200306195830876"}})]),s._v(" "),t("h3",{attrs:{id:"_2-4-get-key"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-get-key"}},[s._v("#")]),s._v(" 2.4.get(key)")]),s._v(" "),t("p",[t("strong",[s._v("实现思路")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("首先，根据key通过哈希函数获取它在storage中对应的索引值index；")]),s._v(" "),t("li",[s._v("然后，根据索引值获取对应的bucket；")]),s._v(" "),t("li",[s._v("接着，判断获取到的bucket是否为null，如果为null，直接返回null；")]),s._v(" "),t("li",[s._v("随后，线性遍历bucket中每一个key是否等于传入的key。如果等于，直接返回对应的value；")]),s._v(" "),t("li",[s._v("最后，遍历完bucket后，仍然没有找到对应的key，直接return null即可。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("   //获取操作\n    HashTable.prototype.get = function(key){\n      //1.根据key获取对应的index\n      let index = this.hashFunc(key, this.limit)\n\n      //2.根据index获取对应的bucket\n      let bucket = this.storage[index]\n\n      //3.判断bucket是否等于null\n      if (bucket == null) {\n        return null\n      }\n\n      //4.有bucket，那么就进行线性查找\n      for (let i = 0; i < bucket.length; i++) {\n        let tuple = bucket[i];\n        if (tuple[0] == key) {//tuple[0]存储key，tuple[1]存储value\n          return tuple[1]\n        }\n      }\n\n      //5.依然没有找到，那么返回null\n      return null\n    }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("p",[t("strong",[s._v("测试代码：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    //测试哈希表\n    //1.创建哈希表\n    let ht = new HashTable()\n    \n\t//2.插入数据\n    ht.put('class1','Tom')\n    ht.put('class2','Mary')\n    ht.put('class3','Gogo')\n    ht.put('class4','Tony')\n    \n    //3.获取数据\n    console.log(ht.get('class3'));\n    console.log(ht.get('class2'));\n    console.log(ht.get('class1'));\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[t("strong",[s._v("测试结果：")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/12.png",alt:"image-20200306195441780"}})]),s._v(" "),t("h3",{attrs:{id:"_2-5-remove-key"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-remove-key"}},[s._v("#")]),s._v(" 2.5.remove(key)")]),s._v(" "),t("p",[t("strong",[s._v("实现思路")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("首先，根据key通过哈希函数获取它在storage中对应的索引值index；")]),s._v(" "),t("li",[s._v("然后，根据索引值获取对应的bucket；")]),s._v(" "),t("li",[s._v("接着，判断获取到的bucket是否为null，如果为null，直接返回null；")]),s._v(" "),t("li",[s._v("随后，线性查找bucket，寻找对应的数据，并且删除；")]),s._v(" "),t("li",[s._v("最后，依然没有找到，返回null；")])]),s._v(" "),t("p",[t("strong",[s._v("代码实现：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("   //删除操作\n    HashTable.prototype.remove = function(key){\n      //1.根据key获取对应的index\n      let index = this.hashFunc(key, this.limit)\n\n      //2.根据index获取对应的bucket\n      let bucket = this.storage[index]\n\n      //3.判断bucket是否为null\n      if (bucket == null) {\n        return null\n      }\n\n      //4.有bucket,那么就进行线性查找并删除\n      for (let i = 0; i < bucket.length; i++) {\n        let tuple = bucket[i]\n        if (tuple[0] == key) {\n          bucket.splice(i,1)\n          this.count -= 1 \n          return tuple[1]\n        }\n    }\n\n      //5.依然没有找到，返回null\n      return null\n    }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br")])]),t("p",[t("strong",[s._v("测试代码：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    //测试哈希表\n    //1.创建哈希表\n    let ht = new HashTable()\n    \n\t//2.插入数据\n    ht.put('class1','Tom')\n    ht.put('class2','Mary')\n    ht.put('class3','Gogo')\n    ht.put('class4','Tony')\n    \n    //3.删除数据\n    console.log( ht.remove('class2'));\n    console.log(ht.get('class2'));\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[t("strong",[s._v("测试结果：")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/13.png",alt:"image-20200306200014491"}})]),s._v(" "),t("h3",{attrs:{id:"_2-6-其他方法的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-其他方法的实现"}},[s._v("#")]),s._v(" 2.6.其他方法的实现")]),s._v(" "),t("p",[s._v("其他方法包括："),t("strong",[s._v("isEmpty()、size()")]),s._v("：")]),s._v(" "),t("p",[t("strong",[s._v("代码实现：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("//判断哈希表是否为null\n  HashTable.prototype.isEmpty = function(){\n    return this.count == 0\n  }\n\n  //获取哈希表中元素的个数\n  HashTable.prototype.size = function(){\n    return this.count\n  }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[t("strong",[s._v("测试代码：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    //测试哈希表\n    //1.创建哈希表\n    let ht = new HashTable()\n\n    //2.插入数据\n    ht.put('class1','Tom')\n    ht.put('class2','Mary')\n    ht.put('class3','Gogo')\n    ht.put('class4','Tony')\n    \n    //3.测试isEmpty()\n    console.log(ht.isEmpty());\n    //4.测试isEmpty()\n    console.log(ht.size());\n    console.log(ht);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[t("strong",[s._v("测试结果：")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/14.png",alt:"image-20200306200301853"}})]),s._v(" "),t("h2",{attrs:{id:"三、哈希表的扩容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、哈希表的扩容"}},[s._v("#")]),s._v(" 三、哈希表的扩容")]),s._v(" "),t("h3",{attrs:{id:"_3-1-扩容与压缩"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-扩容与压缩"}},[s._v("#")]),s._v(" 3.1.扩容与压缩")]),s._v(" "),t("p",[s._v("为什么需要扩容？")]),s._v(" "),t("ul",[t("li",[s._v("前面我们在哈希表中使用的是"),t("strong",[s._v("长度为7的数组")]),s._v("，由于使用的是**链地址法，装填因子(loadFactor)**可以大于1，所以这个哈希表可以无限制地插入新数据。")]),s._v(" "),t("li",[s._v("但是，随着"),t("strong",[s._v("数据量的增多")]),s._v("，storage中每一个index对应的bucket数组（链表）就会越来越长，这就会造成哈希表"),t("strong",[s._v("效率的降低")])])]),s._v(" "),t("p",[s._v("什么情况下需要扩容？")]),s._v(" "),t("ul",[t("li",[s._v("常见的情况是"),t("strong",[s._v("loadFactor > 0.75")]),s._v("的时候进行扩容；")])]),s._v(" "),t("p",[s._v("如何进行扩容？")]),s._v(" "),t("ul",[t("li",[s._v("简单的扩容可以直接扩大"),t("strong",[s._v("两倍")]),s._v("（关于质数，之后讨论）；")]),s._v(" "),t("li",[s._v("扩容之后"),t("strong",[s._v("所有的")]),s._v("数据项都要进行"),t("strong",[s._v("同步修改")]),s._v("；")])]),s._v(" "),t("p",[t("strong",[s._v("实现思路:")])]),s._v(" "),t("ul",[t("li",[s._v("首先，定义一个变量，比如oldStorage指向原来的storage；")]),s._v(" "),t("li",[s._v("然后，创建一个新的容量更大的数组，让this.storage指向它；")]),s._v(" "),t("li",[s._v("最后，将oldStorage中的每一个bucket中的每一个数据取出来依次添加到this.storage指向的新数组中；")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/15.png",alt:"image-20200229165155853"}})]),s._v(" "),t("p",[s._v("代码实现：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  //哈希表扩容\n  HashTable.prototype.resize = function(newLimit){\n    //1.保存旧的storage数组内容\n    let oldStorage = this.storage\n\n    //2.重置所有的属性\n    this.storage = []\n    this.count = 0\n    this.limit = newLimit\n\n    //3.遍历oldStorage中所有的bucket\n    for (let i = 0; i < oldStorage.length; i++) {\n      //3.1.取出对应的bucket\n      const bucket = oldStorage[i];\n\n      //3.2.判断bucket是否为null\n      if (bucket == null) {\n        continue\n      }      \n\n      //3.3.bucket中有数据，就取出数据重新插入\n      for (let j = 0; j < bucket.length; j++) {\n        const tuple = bucket[j];\n        this.put(tuple[0], tuple[1])//插入数据的key和value\n      }\n    }\n  }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br")])]),t("p",[s._v("上述定义的哈希表的resize方法，既可以实现哈希表的"),t("strong",[s._v("扩容")]),s._v("，也可以实现哈希表容量的"),t("strong",[s._v("压缩")]),s._v("。")]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("装填因子")]),s._v(" = 哈希表中数据 / 哈希表长度，即 loadFactor = count / HashTable.length。")])]),s._v(" "),t("ul",[t("li",[s._v("通常情况下当"),t("strong",[s._v("装填因子laodFactor > 0.75")]),s._v("时，对哈希表进行扩容。在哈希表中的添加方法（push方法）中添加如下代码，判断是否需要调用扩容函数进行扩容：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("     //判断是否需要扩容操作\n      if(this.count > this.limit * 0.75){\n        this.resize(this.limit * 2)\n      }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("ul",[t("li",[s._v("当"),t("strong",[s._v("装填因子laodFactor < 0.25")]),s._v("时，对哈希表容量进行压缩。在哈希表中的删除方法（remove方法）中添加如下代码，判断是否需要调用扩容函数进行压缩：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    //缩小容量\n    if (this.limit > 7 && this.count < this.limit * 0.25) {\n      this.resize(Math.floor(this.limit / 2))\n    }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"_3-2-选择质数作为容量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-选择质数作为容量"}},[s._v("#")]),s._v(" 3.2.选择质数作为容量")]),s._v(" "),t("p",[t("strong",[s._v("质数的判断")])]),s._v(" "),t("p",[s._v("首先我们来复习一下，判断质数的方法：")]),s._v(" "),t("blockquote",[t("p",[s._v("注意1不是质数")])]),s._v(" "),t("ul",[t("li",[s._v("方法一：针对质数的特点：只能被1和num整除，不能被2 ~ (num-1)整除。遍历2 ~ (num-1) 。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    function isPrime(num){\n      if(num <= 1 ){\n        return false\n      } \n      for(let i = 2; i <= num - 1; i++){\n        if(num % i ==0){\n          return false\n        }\n      }\n        return true\n    }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("这种方法虽然能实现质数的判断，但是效率不高。")]),s._v(" "),t("ul",[t("li",[s._v("方法二：只需要遍历2 ~ num的平方根即可。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("   function isPrime(num){\n      if (num <= 1) {\n        return false\n      }\n      //1.获取num的平方根:Math.sqrt(num)\n      //2.循环判断\n      for(var i = 2; i<= Math.sqrt(num); i++ ){\n        if(num % i == 0){\n          return false;\n        }\n      }\n        return true;\n    }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[t("strong",[s._v("实现扩容后的哈希表容量为质数")])]),s._v(" "),t("p",[t("strong",[s._v("实现思路：")])]),s._v(" "),t("p",[s._v("2倍扩容之后，通过循环调用isPrime判断得到的容量是否为质数，不是则+1，直到是为止。比如原长度：7，2倍扩容后长度为14，14不是质数，14 + 1 = 15不是质数，15 + 1 = 16不是质数，16 + 1 = 17是质数，停止循环，由此得到质数17。")]),s._v(" "),t("p",[t("strong",[s._v("代码实现：")])]),s._v(" "),t("ul",[t("li",[s._v("**第一步：**首先需要为HashTable类添加判断质数的isPrime方法和获取质数的getPrime方法：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  //判断传入的num是否质数\n  HashTable.prototype.isPrime = function(num){\n      if (num <= 1) {\n        return false\n      }\n      //1.获取num的平方根:Math.sqrt(num)\n      //2.循环判断\n      for(var i = 2; i<= Math.sqrt(num); i++ ){\n        if(num % i == 0){\n          return false;\n        }\n      }\n        return true;\n    }\n\n    //获取质数的方法\n    HashTable.prototype.getPrime = function(num){\n       //7*2=14,+1=15,+1=16,+1=17(质数)\n      while (!this.isPrime(num)) {\n        num++\n      }\n      return num\n    }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])]),t("ul",[t("li",[s._v("**第二步：**修改添加元素的put方法和删除元素的remove方法中关于数组扩容的相关操作：")])]),s._v(" "),t("p",[s._v("在put方法中添加如下代码：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("      //判断是否需要扩容操作\n      if(this.count > this.limit * 0.75){\n        let newSize = this.limit * 2\n        let newPrime = this.getPrime(newSize)\n        this.resize(newPrime)\n      }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("在remove方法中添加如下代码：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("          //缩小容量\n          if (this.limit > 7 && this.count < this.limit * 0.25) {\n            let newSize = Math.floor(this.limit / 2)\n            let newPrime = this.getPrime(newSize)\n            this.resize(newPrime)\n          }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[t("strong",[s._v("测试代码：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    let ht = new HashTable()\n\n    ht.put('class1','Tom')\n    ht.put('class2','Mary')\n    ht.put('class3','Gogo')\n    ht.put('class4','Tony')\n    ht.put('class5','5')\n    ht.put('class6','6')\n    ht.put('class7','7')\n    ht.put('class8','8')\n    ht.put('class9','9')\n    ht.put('class10','10')\n    console.log(ht.size());//10\n    console.log(ht.limit);//17\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[t("strong",[s._v("测试结果：")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/16.png",alt:"image-20200229203540957"}})]),s._v(" "),t("h2",{attrs:{id:"四、哈希表的完整实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、哈希表的完整实现"}},[s._v("#")]),s._v(" 四、哈希表的完整实现")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("\t//封装哈希表类\n    function HashTable() {\n      //属性\n      this.storage = []\n      this.count = 0//计算已经存储的元素个数\n      //装填因子：loadFactor > 0.75时需要扩容；loadFactor < 0.25时需要减少容量\n      this.limit = 7//初始长度\n\n      //方法\n      //哈希函数\n      HashTable.prototype.hashFunc = function(str, size){\n      //1.定义hashCode变量\n      let hashCode = 0\n\n      //2.霍纳法则，计算hashCode的值\n      //cats -> Unicode编码\n      for(let i = 0 ;i < str.length; i++){\n        // str.charCodeAt(i)//获取某个字符对应的unicode编码\n        hashCode = 37 * hashCode + str.charCodeAt(i)\n      }\n\n      //3.取余操作\n      let index = hashCode % size\n      return index\n    }\n\n    //一.插入&修改操作\n    HashTable.prototype.put = function (key, value){\n      //1.根据key获取对应的index\n      let index = this.hashFunc(key, this.limit)\n\n      //2.根据index取出对应的bucket\n      let bucket = this.storage[index]\n\n      //3.判断该bucket是否为null\n      if (bucket == null) {\n        bucket = []\n        this.storage[index] = bucket\n      }\n\n      //4.判断是否是修改数据\n      for (let i = 0; i < bucket.length; i++) {\n        let tuple = bucket[i];\n        if (tuple[0] == key) {\n          tuple[1] = value\n          return//不用返回值\n        }\n      }\n\n      //5.进行添加操作\n      bucket.push([key, value])\n      this.count += 1\n\n      //6.判断是否需要扩容操作\n      if(this.count > this.limit * 0.75){\n        let newSize = this.limit * 2\n        let newPrime = this.getPrime(newSize)\n        this.resize(newPrime)\n      }\n    }\n\n    //二.获取操作\n    HashTable.prototype.get = function(key){\n      //1.根据key获取对应的index\n      let index = this.hashFunc(key, this.limit)\n\n      //2.根据index获取对应的bucket\n      let bucket = this.storage[index]\n\n      //3.判断bucket是否等于null\n      if (bucket == null) {\n        return null\n      }\n\n      //4.有bucket，那么就进行线性查找\n      for (let i = 0; i < bucket.length; i++) {\n        let tuple = bucket[i];\n        if (tuple[0] == key) {//tuple[0]存储key，tuple[1]存储value\n          return tuple[1]\n        }\n      }\n\n      //5.依然没有找到，那么返回null\n      return null\n    }\n\n    //三.删除操作\n    HashTable.prototype.remove = function(key){\n      //1.根据key获取对应的index\n      let index = this.hashFunc(key, this.limit)\n\n      //2.根据index获取对应的bucket\n      let bucket = this.storage[index]\n\n      //3.判断bucket是否为null\n      if (bucket == null) {\n        return null\n      }\n\n      //4.有bucket,那么就进行线性查找并删除\n      for (let i = 0; i < bucket.length; i++) {\n        let tuple = bucket[i]\n        if (tuple[0] == key) {\n          bucket.splice(i,1)\n          this.count -= 1 \n          return tuple[1]\n\n          //6.缩小容量\n          if (this.limit > 7 && this.count < this.limit * 0.25) {\n            let newSize = Math.floor(this.limit / 2)\n            let newPrime = this.getPrime(newSize)\n            this.resize(newPrime)\n          }\n        }\n    }\n\n      //5.依然没有找到，返回null\n      return null\n    }\n\n  /*------------------其他方法--------------------*/\n  //判断哈希表是否为null\n  HashTable.prototype.isEmpty = function(){\n    return this.count == 0\n  }\n\n  //获取哈希表中元素的个数\n  HashTable.prototype.size = function(){\n    return this.count\n  }\n\n\n  //哈希表扩容\n  HashTable.prototype.resize = function(newLimit){\n    //1.保存旧的storage数组内容\n    let oldStorage = this.storage\n\n    //2.重置所有的属性\n    this.storage = []\n    this.count = 0\n    this.limit = newLimit\n\n    //3.遍历oldStorage中所有的bucket\n    for (let i = 0; i < oldStorage.length; i++) {\n      //3.1.取出对应的bucket\n      const bucket = oldStorage[i];\n\n      //3.2.判断bucket是否为null\n      if (bucket == null) {\n        continue\n      }      \n\n      //3.3.bucket中有数据，就取出数据重新插入\n      for (let j = 0; j < bucket.length; j++) {\n        const tuple = bucket[j];\n        this.put(tuple[0], tuple[1])//插入数据的key和value\n      }\n    }\n  }\n\n  //判断传入的num是否质数\n  HashTable.prototype.isPrime = function(num){\n      if (num <= 1) {\n        return false\n      }\n      //1.获取num的平方根:Math.sqrt(num)\n      //2.循环判断\n      for(var i = 2; i<= Math.sqrt(num); i++ ){\n        if(num % i == 0){\n          return false;\n        }\n      }\n        return true;\n    }\n\n    //获取质数的方法\n    HashTable.prototype.getPrime = function(num){\n       //7*2=14,+1=15,+1=16,+1=17(质数)\n      while (!this.isPrime(num)) {\n        num++\n      }\n      return num\n    }\n }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br"),t("span",{staticClass:"line-number"},[s._v("71")]),t("br"),t("span",{staticClass:"line-number"},[s._v("72")]),t("br"),t("span",{staticClass:"line-number"},[s._v("73")]),t("br"),t("span",{staticClass:"line-number"},[s._v("74")]),t("br"),t("span",{staticClass:"line-number"},[s._v("75")]),t("br"),t("span",{staticClass:"line-number"},[s._v("76")]),t("br"),t("span",{staticClass:"line-number"},[s._v("77")]),t("br"),t("span",{staticClass:"line-number"},[s._v("78")]),t("br"),t("span",{staticClass:"line-number"},[s._v("79")]),t("br"),t("span",{staticClass:"line-number"},[s._v("80")]),t("br"),t("span",{staticClass:"line-number"},[s._v("81")]),t("br"),t("span",{staticClass:"line-number"},[s._v("82")]),t("br"),t("span",{staticClass:"line-number"},[s._v("83")]),t("br"),t("span",{staticClass:"line-number"},[s._v("84")]),t("br"),t("span",{staticClass:"line-number"},[s._v("85")]),t("br"),t("span",{staticClass:"line-number"},[s._v("86")]),t("br"),t("span",{staticClass:"line-number"},[s._v("87")]),t("br"),t("span",{staticClass:"line-number"},[s._v("88")]),t("br"),t("span",{staticClass:"line-number"},[s._v("89")]),t("br"),t("span",{staticClass:"line-number"},[s._v("90")]),t("br"),t("span",{staticClass:"line-number"},[s._v("91")]),t("br"),t("span",{staticClass:"line-number"},[s._v("92")]),t("br"),t("span",{staticClass:"line-number"},[s._v("93")]),t("br"),t("span",{staticClass:"line-number"},[s._v("94")]),t("br"),t("span",{staticClass:"line-number"},[s._v("95")]),t("br"),t("span",{staticClass:"line-number"},[s._v("96")]),t("br"),t("span",{staticClass:"line-number"},[s._v("97")]),t("br"),t("span",{staticClass:"line-number"},[s._v("98")]),t("br"),t("span",{staticClass:"line-number"},[s._v("99")]),t("br"),t("span",{staticClass:"line-number"},[s._v("100")]),t("br"),t("span",{staticClass:"line-number"},[s._v("101")]),t("br"),t("span",{staticClass:"line-number"},[s._v("102")]),t("br"),t("span",{staticClass:"line-number"},[s._v("103")]),t("br"),t("span",{staticClass:"line-number"},[s._v("104")]),t("br"),t("span",{staticClass:"line-number"},[s._v("105")]),t("br"),t("span",{staticClass:"line-number"},[s._v("106")]),t("br"),t("span",{staticClass:"line-number"},[s._v("107")]),t("br"),t("span",{staticClass:"line-number"},[s._v("108")]),t("br"),t("span",{staticClass:"line-number"},[s._v("109")]),t("br"),t("span",{staticClass:"line-number"},[s._v("110")]),t("br"),t("span",{staticClass:"line-number"},[s._v("111")]),t("br"),t("span",{staticClass:"line-number"},[s._v("112")]),t("br"),t("span",{staticClass:"line-number"},[s._v("113")]),t("br"),t("span",{staticClass:"line-number"},[s._v("114")]),t("br"),t("span",{staticClass:"line-number"},[s._v("115")]),t("br"),t("span",{staticClass:"line-number"},[s._v("116")]),t("br"),t("span",{staticClass:"line-number"},[s._v("117")]),t("br"),t("span",{staticClass:"line-number"},[s._v("118")]),t("br"),t("span",{staticClass:"line-number"},[s._v("119")]),t("br"),t("span",{staticClass:"line-number"},[s._v("120")]),t("br"),t("span",{staticClass:"line-number"},[s._v("121")]),t("br"),t("span",{staticClass:"line-number"},[s._v("122")]),t("br"),t("span",{staticClass:"line-number"},[s._v("123")]),t("br"),t("span",{staticClass:"line-number"},[s._v("124")]),t("br"),t("span",{staticClass:"line-number"},[s._v("125")]),t("br"),t("span",{staticClass:"line-number"},[s._v("126")]),t("br"),t("span",{staticClass:"line-number"},[s._v("127")]),t("br"),t("span",{staticClass:"line-number"},[s._v("128")]),t("br"),t("span",{staticClass:"line-number"},[s._v("129")]),t("br"),t("span",{staticClass:"line-number"},[s._v("130")]),t("br"),t("span",{staticClass:"line-number"},[s._v("131")]),t("br"),t("span",{staticClass:"line-number"},[s._v("132")]),t("br"),t("span",{staticClass:"line-number"},[s._v("133")]),t("br"),t("span",{staticClass:"line-number"},[s._v("134")]),t("br"),t("span",{staticClass:"line-number"},[s._v("135")]),t("br"),t("span",{staticClass:"line-number"},[s._v("136")]),t("br"),t("span",{staticClass:"line-number"},[s._v("137")]),t("br"),t("span",{staticClass:"line-number"},[s._v("138")]),t("br"),t("span",{staticClass:"line-number"},[s._v("139")]),t("br"),t("span",{staticClass:"line-number"},[s._v("140")]),t("br"),t("span",{staticClass:"line-number"},[s._v("141")]),t("br"),t("span",{staticClass:"line-number"},[s._v("142")]),t("br"),t("span",{staticClass:"line-number"},[s._v("143")]),t("br"),t("span",{staticClass:"line-number"},[s._v("144")]),t("br"),t("span",{staticClass:"line-number"},[s._v("145")]),t("br"),t("span",{staticClass:"line-number"},[s._v("146")]),t("br"),t("span",{staticClass:"line-number"},[s._v("147")]),t("br"),t("span",{staticClass:"line-number"},[s._v("148")]),t("br"),t("span",{staticClass:"line-number"},[s._v("149")]),t("br"),t("span",{staticClass:"line-number"},[s._v("150")]),t("br"),t("span",{staticClass:"line-number"},[s._v("151")]),t("br"),t("span",{staticClass:"line-number"},[s._v("152")]),t("br"),t("span",{staticClass:"line-number"},[s._v("153")]),t("br"),t("span",{staticClass:"line-number"},[s._v("154")]),t("br"),t("span",{staticClass:"line-number"},[s._v("155")]),t("br"),t("span",{staticClass:"line-number"},[s._v("156")]),t("br"),t("span",{staticClass:"line-number"},[s._v("157")]),t("br"),t("span",{staticClass:"line-number"},[s._v("158")]),t("br"),t("span",{staticClass:"line-number"},[s._v("159")]),t("br"),t("span",{staticClass:"line-number"},[s._v("160")]),t("br"),t("span",{staticClass:"line-number"},[s._v("161")]),t("br"),t("span",{staticClass:"line-number"},[s._v("162")]),t("br"),t("span",{staticClass:"line-number"},[s._v("163")]),t("br"),t("span",{staticClass:"line-number"},[s._v("164")]),t("br"),t("span",{staticClass:"line-number"},[s._v("165")]),t("br"),t("span",{staticClass:"line-number"},[s._v("166")]),t("br"),t("span",{staticClass:"line-number"},[s._v("167")]),t("br"),t("span",{staticClass:"line-number"},[s._v("168")]),t("br"),t("span",{staticClass:"line-number"},[s._v("169")]),t("br"),t("span",{staticClass:"line-number"},[s._v("170")]),t("br"),t("span",{staticClass:"line-number"},[s._v("171")]),t("br"),t("span",{staticClass:"line-number"},[s._v("172")]),t("br"),t("span",{staticClass:"line-number"},[s._v("173")]),t("br"),t("span",{staticClass:"line-number"},[s._v("174")]),t("br"),t("span",{staticClass:"line-number"},[s._v("175")]),t("br"),t("span",{staticClass:"line-number"},[s._v("176")]),t("br"),t("span",{staticClass:"line-number"},[s._v("177")]),t("br"),t("span",{staticClass:"line-number"},[s._v("178")]),t("br"),t("span",{staticClass:"line-number"},[s._v("179")]),t("br"),t("span",{staticClass:"line-number"},[s._v("180")]),t("br"),t("span",{staticClass:"line-number"},[s._v("181")]),t("br"),t("span",{staticClass:"line-number"},[s._v("182")]),t("br"),t("span",{staticClass:"line-number"},[s._v("183")]),t("br"),t("span",{staticClass:"line-number"},[s._v("184")]),t("br")])]),t("blockquote",[t("p",[s._v("参考资料:"),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1x7411L7Q7?from=search&seid=3912456004602554239",target:"_blank",rel:"noopener noreferrer"}},[s._v("JavaScript数据结构与算法"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);n.default=e.exports}}]);