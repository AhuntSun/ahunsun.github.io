(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{445:function(n,s,t){"use strict";t.r(s);var e=t(27),a=Object(e.a)({},(function(){var n=this,s=n.$createElement,t=n._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"_04-javascript实现双向链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_04-javascript实现双向链表"}},[n._v("#")]),n._v(" 04.JavaScript实现双向链表")]),n._v(" "),t("h2",{attrs:{id:"一、双向链表简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、双向链表简介"}},[n._v("#")]),n._v(" 一、双向链表简介")]),n._v(" "),t("p",[t("strong",[n._v("双向链表")]),n._v("：既可以"),t("strong",[n._v("从头遍历到尾")]),n._v("，又可以"),t("strong",[n._v("从尾遍历到头")]),n._v("。也就是说链表连接的过程是"),t("strong",[n._v("双向")]),n._v("的，它的实现原理是：一个节点既有"),t("strong",[n._v("向前连接的引用")]),n._v("，也有一个"),t("strong",[n._v("向后连接的引用")]),n._v("。")]),n._v(" "),t("p",[t("strong",[n._v("双向链表的缺点：")])]),n._v(" "),t("ul",[t("li",[n._v("每次在"),t("strong",[n._v("插入或删除")]),n._v("某个节点时，都需要处理四个引用，而不是两个，实现起来会困难些；")]),n._v(" "),t("li",[n._v("相对于单向链表，所占"),t("strong",[n._v("内存空间更大")]),n._v("一些；")]),n._v(" "),t("li",[n._v("但是，相对于双向链表的便利性而言，这些缺点微不足道。")])]),n._v(" "),t("p",[t("strong",[n._v("双向链表的结构：")])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/1.png",alt:"image-20200227204728456"}})]),n._v(" "),t("ul",[t("li",[n._v("双向链表不仅有"),t("strong",[n._v("head")]),n._v("指针指向第一个节点，而且有"),t("strong",[n._v("tail")]),n._v("指针指向最后一个节点；")]),n._v(" "),t("li",[n._v("每一个节点由三部分组成："),t("strong",[n._v("item")]),n._v("储存数据、"),t("strong",[n._v("prev")]),n._v("指向前一个节点、"),t("strong",[n._v("next")]),n._v("指向后一个节点；")]),n._v(" "),t("li",[n._v("双向链表的第一个节点的prev指向"),t("strong",[n._v("null")]),n._v("；")]),n._v(" "),t("li",[n._v("双向链表的最后一个节点的next指向"),t("strong",[n._v("null")]),n._v("；")])]),n._v(" "),t("p",[t("strong",[n._v("双向链表常见的操作（方法）：")])]),n._v(" "),t("ul",[t("li",[n._v("append（element）：向链表尾部添加一个新的项；")]),n._v(" "),t("li",[n._v("inset（position，element）：向链表的特定位置插入一个新的项；")]),n._v(" "),t("li",[n._v("get（element）：获取对应位置的元素；")]),n._v(" "),t("li",[n._v("indexOf（element）：返回元素在链表中的索引，如果链表中没有元素就返回-1；")]),n._v(" "),t("li",[n._v("update（position，element）：修改某个位置的元素；")]),n._v(" "),t("li",[n._v("removeAt（position）：从链表的特定位置移除一项；")]),n._v(" "),t("li",[n._v("isEmpty（）：如果链表中不包含任何元素，返回trun，如果链表长度大于0则返回false；")]),n._v(" "),t("li",[n._v("size（）：返回链表包含的元素个数，与数组的length属性类似；")]),n._v(" "),t("li",[n._v("toString（）：由于链表项使用了Node类，就需要重写继承自JavaScript对象默认的toString方法，让其只输出元素的值；")]),n._v(" "),t("li",[n._v("forwardString（）：返回正向遍历节点字符串形式；")]),n._v(" "),t("li",[n._v("backwordString（）：返回反向遍历的节点的字符串形式；")])]),n._v(" "),t("h2",{attrs:{id:"二、封装双向链表类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、封装双向链表类"}},[n._v("#")]),n._v(" 二、封装双向链表类")]),n._v(" "),t("h3",{attrs:{id:"_2-0-创建双向链表类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-0-创建双向链表类"}},[n._v("#")]),n._v(" 2.0.创建双向链表类")]),n._v(" "),t("p",[n._v("先创建双向链表类DoubleLinklist，并添加基本属性，再实现双向链表的常用方法：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("   //封装双向链表类\n    function DoubleLinklist(){\n      //封装内部类：节点类\n      function Node(data){\n        this.data = data\n        this.prev = null\n        this.next = null\n      }\n\n      //属性\n      this.head = null\n      this.tail ==null\n      this.length = 0\n      }\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br")])]),t("h3",{attrs:{id:"_2-1-append-element"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-append-element"}},[n._v("#")]),n._v(" 2.1.append(element)")]),n._v(" "),t("p",[t("strong",[n._v("代码实现：")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("      //append方法\n      DoubleLinklist.prototype.append = data => {\n        //1.根据data创建新节点\n        let newNode = new Node(data)\n\n        //2.添加节点\n        //情况1：添加的是第一个节点\n        if (this.length == 0) {\n          this.tail = newNode\n          this.head = newNode \n        //情况2：添加的不是第一个节点\n        }else {\n          newNode.prev = this.tail\n          this.tail.next = newNode\n          this.tail = newNode\n        }\n\n        //3.length+1\n        this.length += 1\n      }\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br")])]),t("p",[t("strong",[n._v("过程详解：")])]),n._v(" "),t("p",[n._v("添加节点时分为多种情况：")]),n._v(" "),t("ul",[t("li",[n._v("情况1：添加的是第一个节点：只需要让head和tail都指向新节点即可；")])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/2.png",alt:"image-20200228094847845"}})]),n._v(" "),t("ul",[t("li",[t("p",[n._v("情况2：添加的不是第一个节点，如下图所示：只需要改变相关引用的指向即可。")]),n._v(" "),t("ul",[t("li",[n._v("通过：newNode.prev = this.tail：建立指向1；")]),n._v(" "),t("li",[n._v("通过：this.tail.next = newNode：建立指向2；")]),n._v(" "),t("li",[n._v("通过：this.tail = newNode：建立指向3")])]),n._v(" "),t("p",[n._v("要注意改变变量指向的顺序，最后修改tail指向，这样未修改前tail始终指向原链表的最后一个节点。")])])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/3.png",alt:"image-20200228095048677"}})]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/4.png",alt:"image-20200228095135301"}})]),n._v(" "),t("p",[t("strong",[n._v("测试代码：")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("   //测试代码\n   //1.创建双向链表\n   let list = new DoubleLinklist()\n\n    //2.测试append方法\n    list.append('aaa')\n    list.append('bbb')\n    list.append('ccc')\n    console.log(list);\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br")])]),t("p",[t("strong",[n._v("测试结果：")])]),n._v(" "),t("ul",[t("li",[n._v("next方向：")])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/5.png",alt:"image-20200305223911713"}})]),n._v(" "),t("ul",[t("li",[n._v("prev方向：")])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/6.png",alt:"image-20200305224004626"}})]),n._v(" "),t("h3",{attrs:{id:"_2-2-tostring-汇总"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-tostring-汇总"}},[n._v("#")]),n._v(" 2.2.toString()汇总")]),n._v(" "),t("p",[t("strong",[n._v("代码实现：")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('      //将链表转变为字符串形式\n      //一.toString方法\n      DoubleLinklist.prototype.toString = () => {\n        return this.backwardString()\n      }\n\n      //二.forwardString方法\n      DoubleLinklist.prototype.forwardString = () => {\n        //1.定义变量\n        let current =this.tail\n        let resultString = ""\n\n        //2.依次向前遍历，获取每一个节点\n        while (current) {\n          resultString += current.data + "--"\n          current = current.prev \n        }\n        return resultString\n      }\n\n      //三.backwardString方法\n      DoubleLinklist.prototype.backwardString = () => {\n        //1.定义变量\n        let current = this.head\n        let resultString = ""\n\n        //2.依次向后遍历，获取每一个节点\n        while (current) {\n          resultString += current.data + "--"\n          current = current.next\n        }\n        return resultString\n      }\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br")])]),t("p",[t("strong",[n._v("过程详解：")])]),n._v(" "),t("p",[n._v("三种获取字符串的方法："),t("strong",[n._v("toString（）")]),n._v("、"),t("strong",[n._v("forwardString（）")]),n._v("、**backwardString（）**实现原理相似，仅以backWardString方法为例：")]),n._v(" "),t("ul",[t("li",[n._v("定义current变量记录当前指向的节点。首先让current指向第一个节点，然后通过 current = current.next 依次向后遍历。在while循环中以(current)作为条件遍历链表，只要current ！= null就一直遍历，由此可获取链表所有节点的数据。")])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/7.png",alt:"image-20200228100030713"}})]),n._v(" "),t("p",[t("strong",[n._v("测试代码：")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    //测试代码\n    //1.创建双向链表\n    let list = new DoubleLinklist()\n    \n    //2.测试字符串方法   \n    list.append('aaa')\n    list.append('bbb')\n    list.append('ccc')\n    console.log(list.toString());\n    console.log(list.forwardString());\n    console.log(list.backwardString());\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br")])]),t("p",[t("strong",[n._v("测试结果：")])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/8.png",alt:"image-20200305225437424"}})]),n._v(" "),t("h3",{attrs:{id:"_2-3-insert-position-element"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-insert-position-element"}},[n._v("#")]),n._v(" 2.3.insert(position,element)")]),n._v(" "),t("p",[t("strong",[n._v("代码实现：")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("      //insert方法\n      DoubleLinklist.prototype.insert = (position, data) => {\n        //1.越界判断\n        if (position < 0 || position > this.length) return false\n\n        //2.根据data创建新的节点\n        let newNode = new Node(data)\n\n        //3.插入新节点\n        //原链表为空\n          //情况1：插入的newNode是第一个节点\n        if (this.length == 0) {\n          this.head = newNode\n          this.tail = newNode\n        //原链表不为空\n        }else {\n          //情况2：position == 0\n          if (position == 0) {\n            this.head.prev = newNode\n            newNode.next = this.head\n            this.head = newNode\n          //情况3：position == this.length \n          } else if(position == this.length){\n            this.tail.next = newNode\n            newNode.prev = this.tail\n            this.tail = newNode\n            //情况4：0 < position < this.length\n          }else{\n            let current = this.head\n            let index = 0\n            while(index++ < position){\n              current = current.next\n            }\n            //修改pos位置前后节点变量的指向\n            newNode.next = current\n            newNode.prev = current.prev\n            current.prev.next = newNode\n            current.prev = newNode\n          }\n        }\n        //4.length+1\n        this.length += 1\n        return true//返回true表示插入成功\n      }\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br")])]),t("p",[t("strong",[n._v("过程详解：")])]),n._v(" "),t("p",[n._v("插入节点可分为多种情况：")]),n._v(" "),t("p",[t("strong",[n._v("当原链表为空时")]),n._v("：")]),n._v(" "),t("ul",[t("li",[n._v("情况1：插入的新节点是链表的第一个节点；只需要让head和tail都指向newNode即可。")])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/9.png",alt:"image-20200228102437899"}})]),n._v(" "),t("p",[t("strong",[n._v("当原链表不为空时")]),n._v("：")]),n._v(" "),t("ul",[t("li",[n._v("情况2：当position == 0，即在链表的首部添加节点：如下图所示：")])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/10.png",alt:"image-20200228103942238"}})]),n._v(" "),t("p",[n._v("首先，通过：this.head.prev = newNode，改变指向1；")]),n._v(" "),t("p",[n._v("然后，通过：newNode.next = this.head，改变指向2；")]),n._v(" "),t("p",[n._v("最后，通过：this.head = newNode，改变指向3；")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/11.png",alt:"image-20200228110014565"}})]),n._v(" "),t("ul",[t("li",[n._v("情况3：position == this.length，即在链表的尾部添加节点，如下图所示：")])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/12.png",alt:"image-20200228105207102"}})]),n._v(" "),t("p",[n._v("首先，通过：this.tail.next = newNode，改变指向1；（注意这里使用this.tail指向原链表最后一个节点，而不是this.head。因为当length>1时，this.head != this.tail。）")]),n._v(" "),t("p",[n._v("然后，通过：newNode.prev = this.tail，改变指向2；")]),n._v(" "),t("p",[n._v("最后，通过：this.tail = newNode，改变指向3；")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/13.png",alt:"image-20200228110745214"}})]),n._v(" "),t("ul",[t("li",[n._v("情况4：0 < position < this.length，即在链表的中间插入新节点，假设在position = 1的位置插入，如下图所示：")])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/14.png",alt:"image-20200228112941682"}})]),n._v(" "),t("p",[n._v("首先，需要定义变量current按照之前的思路，通过while循环找到position位置的后一个节点，循环结束后index = position")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/15.png",alt:"image-20200228113257650"}})]),n._v(" "),t("p",[n._v("如下图所示：当position = 1时，current就指向了Node2。这样操作current就等同于间接地操作Node2，还可以通过current.prev间接获取Node1。得到了newNode的前一个节点和后一个节点就可以通过改变它们的prev和next变量的指向来插入newNode了。")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/16.png",alt:"image-20200228120701923"}})]),n._v(" "),t("p",[n._v("通过：newNode.next = current，改变指向1；")]),n._v(" "),t("p",[n._v("通过：newNode.prev = current.prev，改变指向2；")]),n._v(" "),t("p",[n._v("通过：current.prev.next = newNode，改变指向3；")]),n._v(" "),t("blockquote",[t("p",[n._v("注意必须最后才修改current.prev的指向，不然就无法通过current.prev获取需要操作的Node1了。")])]),n._v(" "),t("p",[n._v("通过：current.prev = current，改变指向4；")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/17.png",alt:"image-20200228124931441"}})]),n._v(" "),t("p",[t("strong",[n._v("测试代码：")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    //测试代码\n    //1.创建双向链表\n    let list = new DoubleLinklist()\n\n\t//2.测试insert方法\n    list.insert(0, '插入链表的第一个元素')\n    list.insert(0, '在链表首部插入元素')\n    list.insert(1, '在链表中间插入元素')\n    list.insert(3, '在链表尾部插入元素')\n    console.log(list);\n    alert(list)\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br")])]),t("p",[t("strong",[n._v("测试结果：")])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/18.png",alt:"image-20200228130649724"}})]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/19.png",alt:"image-20200228130748735"}})]),n._v(" "),t("h3",{attrs:{id:"_2-4-get-position"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-get-position"}},[n._v("#")]),n._v(" 2.4.get(position)")]),n._v(" "),t("p",[t("strong",[n._v("代码实现：")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("      //get方法\n      DoubleLinklist.prototype.get = position => {\n        //1.越界判断\n        if (position < 0 || position >= this.length) {//获取元素时position不能等于length\n          return null\n        }\n\n        //2.获取元素\n        let current = null\n        let index = 0\n        //this.length / 2 > position:从头开始遍历\n        if ((this.length / 2) > position) {\n          current = this.head\n          while(index++ < position){\n          current = current.next\n        }\n        //this.length / 2 =< position:从尾开始遍历\n        }else{\n          current = this.tail\n          index = this.length - 1\n          while(index-- > position){\n          current = current.prev\n        }\n        }\n        return current.data\n      }\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br")])]),t("p",[t("strong",[n._v("过程详解：")])]),n._v(" "),t("p",[n._v("定义两个变量current和index，按照之前的思路通过while循环遍历分别获取当前节点和对应的索引值index，直到找到需要获取的position位置后的一个节点，此时index = pos =x，然后return current.data即可。")]),n._v(" "),t("p",[n._v("如果链表的节点数量很多时，这种查找方式效率不高，改进方法为：")]),n._v(" "),t("blockquote",[t("p",[n._v("一定要通过this.length来获取链表的节点数否则就会报错。")])]),n._v(" "),t("ul",[t("li",[n._v("当this.length / 2 > position：从头（head）开始遍历；")]),n._v(" "),t("li",[n._v("当this.length / 2 < position：从尾（tail）开始遍历；")])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/20.png",alt:"image-20200228144005347"}})]),n._v(" "),t("p",[t("strong",[n._v("测试代码：")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    //测试代码\n    //1.创建双向链表\n    let list = new DoubleLinklist()\n    \n  \t//2.测试get方法\n    list.append('a')\n    list.append('b')\n    list.append('b1')\n    list.append('b2')\n    list.append('b3')\n    list.append('b4')\n    list.append('b5')\n    list.append('b6')\n    list.append('b7')\n    console.log(list.get(0));\n    console.log(list.get(7));\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br")])]),t("p",[t("strong",[n._v("测试结果：")])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/21.png",alt:"image-20200228145413524"}})]),n._v(" "),t("h3",{attrs:{id:"_2-5-indexof-element"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-indexof-element"}},[n._v("#")]),n._v(" 2.5.indexOf(element)")]),n._v(" "),t("p",[t("strong",[n._v("代码实现：")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("      //indexOf方法\n      DoubleLinklist.prototype.indexOf = data => {\n        //1.定义变量\n        let current = this.head\n        let index = 0\n\n        //2.遍历链表，查找与data相同的节点\n        while(current){\n          if (current.data == data) {\n            return index\n          }\n          current = current.next\n          index += 1\n        }\n        return -1\n      } \n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br")])]),t("p",[t("strong",[n._v("过程详解：")])]),n._v(" "),t("p",[n._v("以（current）作为条件，通过while循环遍历链表中的所有节点（停止条件为current = null）。在遍历每个节点时将current指向的当前节点的data和传入的data进行比较即可。")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/22.png",alt:"image-20200228150427485"}})]),n._v(" "),t("p",[t("strong",[n._v("测试代码：")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    //测试代码\n    //1.创建双向链表\n    let list = new DoubleLinklist()\n    \n    //2.测试indexOf方法\n    list.append('a')\n    list.append('b')\n    list.append('c')\n    console.log(list.indexOf('a'));\n    console.log(list.indexOf('c'));\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br")])]),t("p",[t("strong",[n._v("测试结果：")])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/23.png",alt:"image-20200228150612681"}})]),n._v(" "),t("h3",{attrs:{id:"_2-6-update-position-element"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-update-position-element"}},[n._v("#")]),n._v(" 2.6.update(position,element)")]),n._v(" "),t("p",[t("strong",[n._v("代码实现：")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("     //update方法\n      DoubleLinklist.prototype.update = (position, newData) => {\n        //1.越界判断\n        if (position < 0 || position >= this.length) {\n          return false\n        }\n\n        //2.寻找正确的节点\n        let current = this.head\n        let index = 0\n        //this.length / 2 > position:从头开始遍历\n        if (this.length / 2 > position) {\n          while(index++ < position){\n          current = current.next\n        }\n        //this.length / 2 =< position:从尾开始遍历\n        }else{\n          current = this.tail\n          index = this.length - 1\n          while (index -- > position) {\n            current = current.prev\n          }\n        }\n\n        //3.修改找到节点的data\n        current.data = newData\n        return true//表示成功修改\n      }\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br")])]),t("p",[t("strong",[n._v("过程详解：")])]),n._v(" "),t("p",[n._v("以（index++ < position）为条件，通过while循环遍历链表中的节点（停止条件为index = position）。循环结束后，current指向需要修改的节点。")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/24.png",alt:"image-20200228152136284"}})]),n._v(" "),t("p",[t("strong",[n._v("测试代码：")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    //测试代码\n    //1.创建双向链表\n    let list = new DoubleLinklist()\n    \n    //2.测试update方法\n    list.append('a')\n    list.append('b')\n    console.log(list.update(1, 'c'));\n    console.log(list);\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br")])]),t("p",[t("strong",[n._v("测试结果：")])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/25.png",alt:"image-20200228151340638"}})]),n._v(" "),t("h3",{attrs:{id:"_2-7-removeat-position"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-removeat-position"}},[n._v("#")]),n._v(" 2.7.removeAt(position)")]),n._v(" "),t("p",[t("strong",[n._v("代码实现：")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("     //removeAt方法\n      DoubleLinklist.prototype.removeAt = position => {\n        //1.越界判断\n        if (position < 0 || position >= this.length) {\n          return null\n        }\n        \n        //2.删除节点\n        //当链表中length == 1\n        //情况1：链表只有一个节点\n        let current = this.head//定义在最上面方便以下各种情况返回current.data\n        if (this.length == 1) {\n          this.head = null\n          this.tail = null\n        //当链表中length > 1\n        } else{\n          //情况2：删除第一个节点\n          if (position == 0) {\n            this.head.next.prev = null\n            this.head = this.head.next\n          //情况3：删除最后一个节点\n          }else if(position == this.length - 1){\n            current = this.tail//该情况下返回被删除的最后一个节点\n            this.tail.prev.next = null\n            this.tail = this.tail.prev\n          }else{\n          //情况4：删除链表中间的节点\n            let index = 0\n            while(index++ < position){\n              current = current.next\n            }\n            current.next.prev = current.prev\n            current.prev.next = current.next\n          }\n        }\n\n        //3.length -= 1\n        this.length -= 1\n        return current.data//返回被删除节点的数据\n      }\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br")])]),t("p",[t("strong",[n._v("过程详解：")])]),n._v(" "),t("p",[n._v("删除节点时有多种情况：")]),n._v(" "),t("p",[t("strong",[n._v("当链表的length = 1时")]),n._v("：")]),n._v(" "),t("ul",[t("li",[n._v("情况1：删除链表中的所有节点：只需要让链表的head和tail指向null即可。")])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/26.png",alt:"image-20200228153331976"}})]),n._v(" "),t("p",[t("strong",[n._v("当链表的length > 1时")]),n._v("：")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("情况2：删除链表中的第一个节点：")]),n._v(" "),t("p",[n._v("通过：this.head.next.prev = null，改变指向1；")]),n._v(" "),t("p",[n._v("通过：this.head = this.head.next，改变指向2；")]),n._v(" "),t("p",[n._v("虽然Node1有引用指向其它节点，但是没有引用指向Node1，那么Node1会被自动回收。")])])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/27.png",alt:"image-20200228162347115"}})]),n._v(" "),t("ul",[t("li",[t("p",[n._v("情况3：删除链表中的最后一个节点：")]),n._v(" "),t("p",[n._v("通过：this.tail.prev.next = null，修改指向1；")]),n._v(" "),t("p",[n._v("通过：this.tail = this.tail.prev，修改指向2；")])])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/28.png",alt:"image-20200228161946691"}})]),n._v(" "),t("ul",[t("li",[n._v("情况4：删除链表中间的节点：")])]),n._v(" "),t("p",[n._v("通过while循环找到需要删除的节点，比如position = x，那么需要删除的节点就是Node(x+1)，如下图所示：")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/29.png",alt:"image-20200228161648125"}})]),n._v(" "),t("p",[n._v("通过：current.next.prev = current.prev，修改指向1；")]),n._v(" "),t("p",[n._v("通过：current.prev.next = current.next，修改指向2；")]),n._v(" "),t("p",[n._v("这样就没有引用指向Node(x+1)了（current虽指向Node(x+1)，但current时临时变量，该方法执行完就会被销毁），随后Node(x+1)就会被自动删除。")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/30.png",alt:"image-20200228162415044"}})]),n._v(" "),t("p",[t("strong",[n._v("测试代码：")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    //测试代码\n    //1.创建双向链表\n    let list = new DoubleLinklist()\t\n\t\n\t//2.测试removeAt方法\n    list.append('a')\n    list.append('b')\n    list.append('c')\n    console.log(list.removeAt(1));\n    console.log(list);\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br")])]),t("p",[t("strong",[n._v("测试结果：")])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/31.png",alt:"image-20200228163935060"}})]),n._v(" "),t("h3",{attrs:{id:"_2-8-其他方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-其他方法"}},[n._v("#")]),n._v(" 2.8.其他方法")]),n._v(" "),t("p",[n._v("其他方法包括："),t("strong",[n._v("remove(element)、isEmpty()、size()、getHead()、getTail()")])]),n._v(" "),t("p",[t("strong",[n._v("代码实现：")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("  /*--------------------其他方法-------------------*/\n  //八.remove方法\n  DoubleLinklist.prototype.remove = data => {\n    //1.根据data获取下标值\n    let index = this.indexOf(data)\n    \n    //2.根据index删除对应位置的节点\n    return this.removeAt(index)\n  }\n\n  //九.isEmpty方法\n  DoubleLinklist.prototype.isEmpty = () => {\n    return this.length == 0\n  }\n\n  //十.size方法\n  DoubleLinklist.prototype.size = () => {\n    return this.length\n  }\n\n  //十一.getHead方法：获取链表的第一个元素\n  DoubleLinklist.prototype.getHead = () => {\n    return this.head.data\n  }\n\n  //十二.getTail方法：获取链表的最后一个元素\n  DoubleLinklist.prototype.getTail = () => {\n    return this.tail.data\n  }\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br")])]),t("p",[t("strong",[n._v("测试代码：")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    //测试代码\n    //1.创建双向链表\n    let list = new DoubleLinklist()\t\n\n/*------------其他方法的测试--------------*/\n    list.append('a')\n    list.append('b')\n    list.append('c')\n    list.append('d')\n    //remove方法\n    console.log(list.remove('a'));\n    console.log(list);\n    //isEmpty方法\n    console.log(list.isEmpty());\n    //size方法\n    console.log(list.size());\n    //getHead方法\n    console.log(list.getHead());\n    //getTead方法\n    console.log(list.getTail());\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br")])]),t("p",[t("strong",[n._v("测试结果：")])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/32.png",alt:"image-20200228165845014"}})]),n._v(" "),t("h3",{attrs:{id:"_2-9-完整实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-完整实现"}},[n._v("#")]),n._v(" 2.9.完整实现")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('//封装双向链表\nfunction DoubleLinklist(){\n  //封装内部类：节点类\n  function Node(data){\n    this.data = data\n    this.prev = null\n    this.next = null\n  }\n\n  //属性\n  this.head = null\n  this.tail ==null\n  this.length = 0\n\n  //常见的操作：方法\n  //一.append方法\n  DoubleLinklist.prototype.append = data => {\n    //1.根据data创建新节点\n    let newNode = new Node(data)\n\n    //2.添加节点\n    //情况1：添加的是第一个节点\n    if (this.length == 0) {\n      this.tail = newNode\n      this.head = newNode \n    //情况2：添加的不是第一个节点\n    }else {\n      newNode.prev = this.tail\n      this.tail.next = newNode\n      this.tail = newNode\n    }\n\n    //3.length+1\n    this.length += 1\n  }\n\n  //二.将链表转变为字符串形式\n  //2.1.toString方法\n  DoubleLinklist.prototype.toString = () => {\n    return this.backwardString()\n  }\n\n  //2.2.forwardString方法\n  DoubleLinklist.prototype.forwardString = () => {\n    //1.定义变量\n    let current =this.tail\n    let resultString = ""\n\n    //2.依次向前遍历，获取每一个节点\n    while (current) {\n      resultString += current.data + "--"\n      current = current.prev \n    }\n    return resultString\n  }\n\n  //2.3.backwardString方法\n  DoubleLinklist.prototype.backwardString = () => {\n    //1.定义变量\n    let current = this.head\n    let resultString = ""\n\n    //2.依次向后遍历，获取每一个节点\n    while (current) {\n      resultString += current.data + "--"\n      current = current.next\n    }\n    return resultString\n  }\n\n  //三.insert方法\n  DoubleLinklist.prototype.insert = (position, data) => {\n    //1.越界判断\n    if (position < 0 || position > this.length) return false\n\n    //2.根据data创建新的节点\n    let newNode = new Node(data)\n\n    //3.插入新节点\n    //原链表为空\n      //情况1：插入的newNode是第一个节点\n    if (this.length == 0) {\n      this.head = newNode\n      this.tail = newNode\n    //原链表不为空\n    }else {\n      //情况2：position == 0\n      if (position == 0) {\n        this.head.prev = newNode\n        newNode.next = this.head\n        this.head = newNode\n      //情况3：position == this.length \n      } else if(position == this.length){\n        this.tail.next = newNode\n        newNode.prev = this.tail\n        this.tail = newNode\n        //情况4：0 < position < this.length\n      }else{\n        let current = this.head\n        let index = 0\n        while(index++ < position){\n          current = current.next\n        }\n        //修改pos位置前后节点变量的指向\n        newNode.next = current\n        newNode.prev = current.prev\n        current.prev.next = newNode\n        current.prev = newNode\n      }\n    }\n    //4.length+1\n    this.length += 1\n    return true//返回true表示插入成功\n  }\n\n  //四.get方法\n  DoubleLinklist.prototype.get = position => {\n    //1.越界判断\n    if (position < 0 || position >= this.length) {//获取元素时position不能等于length\n      return null\n    }\n\n    //2.获取元素\n    let current = null\n    let index = 0\n    //this.length / 2 > position:从头开始遍历\n    if ((this.length / 2) > position) {\n      current = this.head\n      while(index++ < position){\n      current = current.next\n    }\n    //this.length / 2 =< position:从尾开始遍历\n    }else{\n      current = this.tail\n      index = this.length - 1\n      while(index-- > position){\n      current = current.prev\n    }\n    }\n    return current.data\n  }\n\n  //五.indexOf方法\n  DoubleLinklist.prototype.indexOf = data => {\n    //1.定义变量\n    let current = this.head\n    let index = 0\n\n    //2.遍历链表，查找与data相同的节点\n    while(current){\n      if (current.data == data) {\n        return index\n      }\n      current = current.next\n      index += 1\n    }\n    return -1\n  } \n\n  //六.update方法\n  DoubleLinklist.prototype.update = (position, newData) => {\n    //1.越界判断\n    if (position < 0 || position >= this.length) {\n      return false\n    }\n\n    //2.寻找正确的节点\n    let current = this.head\n    let index = 0\n    //this.length / 2 > position:从头开始遍历\n    if (this.length / 2 > position) {\n      while(index++ < position){\n      current = current.next\n    }\n    //this.length / 2 =< position:从尾开始遍历\n    }else{\n      current = this.tail\n      index = this.length - 1\n      while (index -- > position) {\n        current = current.prev\n      }\n    }\n\n    //3.修改找到节点的data\n    current.data = newData\n    return true//表示成功修改\n  }\n\n  //七.removeAt方法\n  DoubleLinklist.prototype.removeAt = position => {\n    //1.越界判断\n    if (position < 0 || position >= this.length) {\n      return null\n    }\n    \n    //2.删除节点\n    //当链表中length == 1\n    //情况1：链表只有一个节点\n    let current = this.head//定义在最上面方便以下各种情况返回current.data\n    if (this.length == 1) {\n      this.head = null\n      this.tail = null\n    //当链表中length > 1\n    } else{\n      //情况2：删除第一个节点\n      if (position == 0) {\n        this.head.next.prev = null\n        this.head = this.head.next\n      //情况3：删除最后一个节点\n      }else if(position == this.length - 1){\n        current = this.tail//该情况下返回被删除的最后一个节点\n        this.tail.prev.next = null\n        this.tail = this.tail.prev\n      }else{\n      //情况4：删除链表中间的节点\n        let index = 0\n        while(index++ < position){\n          current = current.next\n        }\n        current.next.prev = current.prev\n        current.prev.next = current.next\n      }\n    }\n\n    //3.length -= 1\n    this.length -= 1\n    return current.data//返回被删除节点的数据\n  }\n  /*--------------------其他方法-------------------*/\n  //八.remove方法\n  DoubleLinklist.prototype.remove = data => {\n    //1.根据data获取下标值\n    let index = this.indexOf(data)\n    \n    //2.根据index删除对应位置的节点\n    return this.removeAt(index)\n  }\n\n  //九.isEmpty方法\n  DoubleLinklist.prototype.isEmpty = () => {\n    return this.length == 0\n  }\n\n  //十.size方法\n  DoubleLinklist.prototype.size = () => {\n    return this.length\n  }\n\n  //十一.getHead方法：获取链表的第一个元素\n  DoubleLinklist.prototype.getHead = () => {\n    return this.head.data\n  }\n\n  //十二.getTail方法：获取链表的最后一个元素\n  DoubleLinklist.prototype.getTail = () => {\n    return this.tail.data\n  }\n\n}\n')])])]),t("h2",{attrs:{id:"三、链表结构总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、链表结构总结"}},[n._v("#")]),n._v(" 三、链表结构总结")]),n._v(" "),t("p",[n._v("单向链表有head和next两个属性，双向链表有head、tail、next、prev四个属性。处理好它们的指向，相当于将它们正确地连接在一起，这样就组成了一条链，这就是简单链表的实现。")]),n._v(" "),t("p",[n._v("在实际开发中链表使用得非常多，比如Java中的"),t("strong",[n._v("LinkList")]),n._v("就是双向链表。")]),n._v(" "),t("h3",{attrs:{id:"_3-1-注意点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-注意点"}},[n._v("#")]),n._v(" 3.1.注意点")]),n._v(" "),t("ul",[t("li",[n._v("在链表中current = current.next 可以从左往右看，看成是current --\x3e current.next，即current指向current的下一个节点。")]),n._v(" "),t("li",[n._v("删除节点的原理：只要没有引用指向该对象，无论该对象是否有引用指向其他对象，该对象都会被回收（删除）。")]),n._v(" "),t("li",[n._v("参数中凡是有position的都要进行越界判断。")])]),n._v(" "),t("h3",{attrs:{id:"_3-2-链表的增删改查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-链表的增删改查"}},[n._v("#")]),n._v(" 3.2.链表的增删改查")]),n._v(" "),t("p",[n._v("以双向链表为例："),t("strong",[n._v("链表的增删改查无非就是获取链表中相应的节点改变其中的prev和next两个变量的指向")]),n._v("。")]),n._v(" "),t("ul",[t("li",[t("p",[t("strong",[n._v("情况一")]),n._v("：只需要"),t("strong",[n._v("head")]),n._v("和"),t("strong",[n._v("tail")]),n._v("两个变量就可以获取需要操作的变量（这里指的是能够轻松获取，当然你想通过head.next.next...或tail.prev.prev...来获取想要的节点也可以），在这种情况下链表的长度length："),t("strong",[n._v("0  <= length <=2")]),n._v("。")])]),n._v(" "),t("li",[t("p",[t("strong",[n._v("情况二")]),n._v("：不能靠tail和head来获取到需要操作的变量时，可采用while循环遍历的方式，找到需要操作的节点：")])])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/33.png",alt:"image-20200228113257650"}})]),n._v(" "),t("p",[n._v("在这种情况下，如果我们想要在链表的position = x的位置插入新节点，那么可以通过current获取position的后一个节点Node(x+1)，通过current.prev获取position位置的前一个节点Node(x)；之后修改Node(x+1)和Node(x)中的prev和next两个变量的指向即可在pos=x 的位置插入新节点。")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/34.png",alt:"image-20200228133450822"}})]),n._v(" "),t("h3",{attrs:{id:"_3-3-修改链表引用指向"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-修改链表引用指向"}},[n._v("#")]),n._v(" 3.3.修改链表引用指向")]),n._v(" "),t("p",[t("strong",[n._v("应先修改newNode引用的指向，再修改其他引用")])]),n._v(" "),t("ul",[t("li",[n._v("情况1：通过head和tail引用就能获取需要操作的节点时，最后更改head或tail变量的指向（因为它们分别指向链表的第一个和最后一个节点，获取其他节点时可能需要用到它们）。")]),n._v(" "),t("li",[n._v("情况2：使用current获取到需要操作的节点时，最后更改curren.next或current.prev的指向。因为current.next和current.prev表示的是Node(x+2)和Node(x)这两个节点，如下图所示，一旦变更它们的指向就无法获取Node(x)或Node(x+2)了，")])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/35.png",alt:"image-20200228133725909"}})]),n._v(" "),t("h3",{attrs:{id:"_3-4-遍历链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-遍历链表"}},[n._v("#")]),n._v(" 3.4.遍历链表")]),n._v(" "),t("p",[t("strong",[n._v("积累两种遍历思路")])]),n._v(" "),t("ul",[t("li",[n._v("获取指定的position = x 位置的后一个节点和索引值：")])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/36.png",alt:"image-20200228144005347"}})]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/37.png",alt:"image-20200228113257650"}})]),n._v(" "),t("p",[n._v("循环结束后index = position = x，变量current就指向了Node(x+1)，变量index的值为Node(x+1)的索引值x。")]),n._v(" "),t("ul",[t("li",[n._v("遍历链表中的所有节点：")])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/38.png",alt:"image-20200228132334514"}})]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/39.png",alt:"image-20200228145930043"}})]),n._v(" "),t("p",[n._v("当current.next = null时停止循环，此时current指向链表的最后一个节点。")]),n._v(" "),t("blockquote",[t("p",[n._v("参考资料："),t("a",{attrs:{href:"https://www.bilibili.com/video/av86801505?from=search&seid=4967761411915016256",target:"_blank",rel:"noopener noreferrer"}},[n._v("JavaScript数据结构与算法"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=a.exports}}]);