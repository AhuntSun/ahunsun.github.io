(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{446:function(s,n,a){"use strict";a.r(n);var t=a(27),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"_07-javascript实现图结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_07-javascript实现图结构"}},[s._v("#")]),s._v(" 07.JavaScript实现图结构")]),s._v(" "),a("h2",{attrs:{id:"一、图论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、图论"}},[s._v("#")]),s._v(" 一、图论")]),s._v(" "),a("h3",{attrs:{id:"_1-1-图的简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-图的简介"}},[s._v("#")]),s._v(" 1.1.图的简介")]),s._v(" "),a("p",[a("strong",[s._v("什么是图？")])]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("图结构")]),s._v("是一种与"),a("strong",[s._v("树结构")]),s._v("有些相似的数据结构；")]),s._v(" "),a("li",[a("strong",[s._v("图论")]),s._v("是数学的一个分支，并且，在数学中，树是图的一种；")]),s._v(" "),a("li",[s._v("图论以图为研究对象，研究"),a("strong",[s._v("顶点")]),s._v("和"),a("strong",[s._v("边")]),s._v("组成的"),a("strong",[s._v("图形")]),s._v("的数学理论和方法；")]),s._v(" "),a("li",[s._v("主要的研究目的为："),a("strong",[s._v("事物之间的联系")]),s._v("，"),a("strong",[s._v("顶点")]),s._v("代表"),a("strong",[s._v("事物")]),s._v("，"),a("strong",[s._v("边")]),s._v("代表两个事物间的"),a("strong",[s._v("关系")]),s._v("；")])]),s._v(" "),a("p",[a("strong",[s._v("图的特点：")])]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("一组顶点")]),s._v("：通常用 "),a("strong",[s._v("V")]),s._v(" （Vertex）表示顶点的集合；")]),s._v(" "),a("li",[a("strong",[s._v("一组边")]),s._v("：通常用 "),a("strong",[s._v("E")]),s._v(" （Edge）表示边的集合；\n"),a("ul",[a("li",[s._v("边是顶点和顶点之间的连线；")]),s._v(" "),a("li",[s._v("边可以是有向的，也可以是无向的。比如A----B表示无向，A ---\x3e B 表示有向；")])])])]),s._v(" "),a("p",[a("strong",[s._v("图的常用术语：")])]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("顶点："),a("strong",[s._v("表示图中的一个")]),s._v("节点")]),s._v("；")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("边："),a("strong",[s._v("表示")]),s._v("顶点和顶点")]),s._v("给之间的"),a("strong",[s._v("连线")]),s._v("；")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("相邻顶点："),a("strong",[s._v("由一条边连接在一起的顶点称为")]),s._v("相邻顶点")]),s._v("；")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("度："),a("strong",[s._v("一个顶点的")]),s._v("度")]),s._v("是"),a("strong",[s._v("相邻顶点的数量")]),s._v("；")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("路径：")])]),s._v(" "),a("ul",[a("li",[s._v("**简单路径：**简单路径要求不包含重复的顶点；")]),s._v(" "),a("li",[a("strong",[s._v("回路："),a("strong",[s._v("第一个顶点和最后一个顶点")]),s._v("相同")]),s._v("的路径称为回路；")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("无向图："),a("strong",[s._v("图中的所有边都是")]),s._v("没有")]),s._v("方向的；")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("有向图："),a("strong",[s._v("图中的所有边都是")]),s._v("有")]),s._v("方向的；")])]),s._v(" "),a("li",[a("p",[s._v("**无权图：**无权图中的边没有任何权重意义；")])]),s._v(" "),a("li",[a("p",[s._v("**带权图：**带权图中的边有一定的权重含义；")])])]),s._v(" "),a("h3",{attrs:{id:"_1-2-图的表示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-图的表示"}},[s._v("#")]),s._v(" 1.2.图的表示")]),s._v(" "),a("h4",{attrs:{id:"邻接矩阵"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#邻接矩阵"}},[s._v("#")]),s._v(" 邻接矩阵")]),s._v(" "),a("p",[s._v("表示图的常用方式为："),a("strong",[s._v("邻接矩阵")]),s._v("。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("可以使用二维数组来表示邻接矩阵；")])]),s._v(" "),a("li",[a("p",[s._v("邻接矩阵让"),a("strong",[s._v("每个节点和一个整数相关联")]),s._v("，该"),a("strong",[s._v("整数作为数组的下标值")]),s._v("；")])]),s._v(" "),a("li",[a("p",[s._v("使用一个"),a("strong",[s._v("二维数组")]),s._v("来表示顶点之间的"),a("strong",[s._v("连接")]),s._v("；")])])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%9B%BE/1.png",alt:"image-20200303213913574"}})]),s._v(" "),a("p",[s._v("如上图所示：")]),s._v(" "),a("ul",[a("li",[s._v("二维数组中的"),a("strong",[s._v("0")]),s._v("表示没有连线，"),a("strong",[s._v("1")]),s._v("表示有连线；")]),s._v(" "),a("li",[s._v("如：A[ 0 ] [ 3 ] = 1，表示 A 和 C 之间有连接；")]),s._v(" "),a("li",[s._v("邻接矩阵的对角线上的值都为0，表示A - A ，B - B，等自回路都没有连接（自己与自己之间没有连接）；")]),s._v(" "),a("li",[s._v("若为无向图，则邻接矩阵应为对角线上元素全为0的对称矩阵；")])]),s._v(" "),a("p",[a("strong",[s._v("邻接矩阵的问题：")])]),s._v(" "),a("ul",[a("li",[s._v("如果图是一个"),a("strong",[s._v("稀疏图")]),s._v("，那么邻接矩阵中将存在"),a("strong",[s._v("大量的 0")]),s._v("，造成存储空间的浪费；")])]),s._v(" "),a("h4",{attrs:{id:"邻接表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#邻接表"}},[s._v("#")]),s._v(" 邻接表")]),s._v(" "),a("p",[s._v("另外一种表示图的常用方式为："),a("strong",[s._v("邻接表")]),s._v("。")]),s._v(" "),a("ul",[a("li",[s._v("邻接表由图中"),a("strong",[s._v("每个顶点")]),s._v("以及"),a("strong",[s._v("和顶点相邻的顶点列表")]),s._v("组成；")]),s._v(" "),a("li",[s._v("这个列表可用多种方式存储，比如：**数组/链表/字典（哈希表）**等都可以；")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%9B%BE/2.png",alt:"image-20200303215312091"}})]),s._v(" "),a("p",[s._v("如上图所示：")]),s._v(" "),a("ul",[a("li",[s._v("图中可清楚看到"),a("strong",[s._v("A与B、C、D相邻")]),s._v("，假如要表示这些与A顶点相邻的顶点（边），可以通过将它们作为A的值（value）存入到对应的"),a("strong",[s._v("数组/链表/字典")]),s._v("中。")]),s._v(" "),a("li",[s._v("之后，通过键（key）A可以十分方便地取出对应的数据；")])]),s._v(" "),a("p",[a("strong",[s._v("邻接表的问题：")])]),s._v(" "),a("ul",[a("li",[s._v("邻接表可以简单地得出"),a("strong",[s._v("出度")]),s._v("，即某一顶点指向其他顶点的个数；")]),s._v(" "),a("li",[s._v("但是，邻接表计算"),a("strong",[s._v("入度")]),s._v("（指向某一顶点的其他顶点的个数称为该顶点的入度）十分困难。此时需要构造"),a("strong",[s._v("逆邻接表")]),s._v("才能有效计算入度；")])]),s._v(" "),a("h2",{attrs:{id:"二、封装图结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、封装图结构"}},[s._v("#")]),s._v(" 二、封装图结构")]),s._v(" "),a("p",[s._v("在实现过程中采用"),a("strong",[s._v("邻接表")]),s._v("的方式来表示边，使用"),a("strong",[s._v("字典类")]),s._v("来存储邻接表。")]),s._v(" "),a("h3",{attrs:{id:"_2-1-添加字典类和队列类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-添加字典类和队列类"}},[s._v("#")]),s._v(" 2.1.添加字典类和队列类")]),s._v(" "),a("p",[s._v("首先需要引入之前实现的，之后会用到的字典类和队列类：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    //封装字典类\nfunction Dictionary(){\n  //字典属性\n  this.items = {}\n\n  //字典操作方法\n  //一.在字典中添加键值对\n  Dictionary.prototype.set = function(key, value){\n    this.items[key] = value\n  }\n\n  //二.判断字典中是否有某个key\n  Dictionary.prototype.has = function(key){\n    return this.items.hasOwnProperty(key)\n  }\n\n  //三.从字典中移除元素\n  Dictionary.prototype.remove = function(key){\n    //1.判断字典中是否有这个key\n    if(!this.has(key)) return false\n\n    //2.从字典中删除key\n    delete this.items[key]\n    return true\n  }\n\n  //四.根据key获取value\n  Dictionary.prototype.get = function(key){\n    return this.has(key) ? this.items[key] : undefined\n  }\n\n  //五.获取所有keys\n  Dictionary.prototype.keys = function(){\n    return Object.keys(this.items)\n  }\n\n  //六.size方法\n  Dictionary.prototype.keys = function(){\n    return this.keys().length\n  }\n\n  //七.clear方法\n  Dictionary.prototype.clear = function(){\n    this.items = {}\n  }\n}\n\n   // 基于数组封装队列类\n    function Queue() {\n    // 属性\n      this.items = []\n    // 方法\n    // 1.将元素加入到队列中\n    Queue.prototype.enqueue = element => {\n      this.items.push(element)\n    }\n\n    // 2.从队列中删除前端元素\n    Queue.prototype.dequeue = () => {\n      return this.items.shift()\n    }\n\n    // 3.查看前端的元素\n    Queue.prototype.front = () => {\n      return this.items[0]\n    }\n\n    // 4.查看队列是否为空\n    Queue.prototype.isEmpty = () => {\n      return this.items.length == 0;\n    }\n\n    // 5.查看队列中元素的个数\n    Queue.prototype.size = () => {\n      return this.items.length\n    }\n\n    // 6.toString方法\n    Queue.prototype.toString = () => {\n      let resultString = ''\n        for (let i of this.items){\n          resultString += i + ' '\n        }\n        return resultString\n      }\n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br")])]),a("h3",{attrs:{id:"_2-2-创建图类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-创建图类"}},[s._v("#")]),s._v(" 2.2.创建图类")]),s._v(" "),a("p",[s._v("先创建图类Graph，并添加基本属性，再实现图类的常用方法：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    //封装图类\n    function Graph (){\n      //属性：顶点(数组)/边(字典)\n      this.vertexes = []  //顶点\n      this.edges = new Dictionary() //边\n      }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"_2-3-添加顶点与边"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-添加顶点与边"}},[s._v("#")]),s._v(" 2.3.添加顶点与边")]),s._v(" "),a("p",[s._v("如图所示：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%9B%BE/3.png",alt:"image-20200303235132868"}})]),s._v(" "),a("p",[s._v("创建一个数组对象vertexes存储图的顶点；创建一个字典对象edges存储图的边，其中key为顶点，value为存储key顶点相邻顶点的数组。")]),s._v(" "),a("p",[a("strong",[s._v("代码实现：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("      //添加方法\n      //一.添加顶点\n      Graph.prototype.addVertex = function(v){\n        this.vertexes.push(v)\n        this.edges.set(v, []) //将边添加到字典中，新增的顶点作为键，对应的值为一个存储边的空数组\n      }\n      //二.添加边\n      Graph.prototype.addEdge = function(v1, v2){//传入两个顶点为它们添加边\n        this.edges.get(v1).push(v2)//取出字典对象edges中存储边的数组，并添加关联顶点\n        this.edges.get(v2).push(v1)//表示的是无向表，故要添加互相指向的两条边\n      }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h3",{attrs:{id:"_2-4-转换为字符串输出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-转换为字符串输出"}},[s._v("#")]),s._v(" 2.4.转换为字符串输出")]),s._v(" "),a("p",[s._v("为图类Graph添加toString方法，实现以邻接表的形式输出图中各顶点。")]),s._v(" "),a("p",[a("strong",[s._v("代码实现：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("      //三.实现toString方法:转换为邻接表形式\n      Graph.prototype.toString = function (){\n        //1.定义字符串，保存最终结果\n        let resultString = \"\"\n\n        //2.遍历所有的顶点以及顶点对应的边\n        for (let i = 0; i < this.vertexes.length; i++) {//遍历所有顶点\n          resultString += this.vertexes[i] + '--\x3e'\n          let vEdges = this.edges.get(this.vertexes[i])\n          for (let j = 0; j < vEdges.length; j++) {//遍历字典中每个顶点对应的数组\n            resultString += vEdges[j] + '  ';\n          }\n          resultString += '\\n'\n        }\n        return resultString\n      }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[a("strong",[s._v("测试代码：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("   //测试代码\n    //1.创建图结构\n    let graph = new Graph()\n\n    //2.添加顶点\n    let myVertexes = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']\n    for (let i = 0; i < myVertexes.length; i++) {\n      graph.addVertex(myVertexes[i])\n    }\n\n    //3.添加边\n    graph.addEdge('A', 'B')\n    graph.addEdge('A', 'C')\n    graph.addEdge('A', 'D')\n    graph.addEdge('C', 'D')\n    graph.addEdge('C', 'G')\n    graph.addEdge('D', 'G')\n    graph.addEdge('D', 'H')\n    graph.addEdge('B', 'E')\n    graph.addEdge('B', 'F')\n    graph.addEdge('E', 'I')\n\n    //4.输出结果\n    console.log(graph.toString());\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("p",[a("strong",[s._v("测试结果：")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%9B%BE/4.png",alt:"image-20200303233737451"}})]),s._v(" "),a("h3",{attrs:{id:"_2-5-图的遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-图的遍历"}},[s._v("#")]),s._v(" 2.5.图的遍历")]),s._v(" "),a("h4",{attrs:{id:"图的遍历思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图的遍历思想"}},[s._v("#")]),s._v(" "),a("strong",[s._v("图的遍历思想")])]),s._v(" "),a("ul",[a("li",[s._v("图的遍历思想与树的遍历思想一样，意味着需要将图中"),a("strong",[s._v("所有的顶点")]),s._v("都访问一遍，并且不能有"),a("strong",[s._v("重复的访问")]),s._v("（上面的toString方法会重复访问）；")])]),s._v(" "),a("p",[a("strong",[s._v("遍历图的两种算法：")])]),s._v(" "),a("ul",[a("li",[s._v("广度优先搜索（Breadth - First Search，简称"),a("strong",[s._v("BFS")]),s._v("）;")]),s._v(" "),a("li",[s._v("深度优先搜索（Depth - First Search，简称"),a("strong",[s._v("DFS")]),s._v("）;")]),s._v(" "),a("li",[s._v("两种遍历算法都需要指定"),a("strong",[s._v("第一个被访问的顶点")]),s._v("；")])]),s._v(" "),a("p",[s._v("为了记录顶点是否被访问过，使用"),a("strong",[s._v("三种颜色")]),s._v("来表示它们的状态")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("白色")]),s._v("：表示该顶点还没有被访问过；")]),s._v(" "),a("li",[a("strong",[s._v("灰色")]),s._v("：表示该顶点被访问过，但其相邻顶点并未完全被访问过；")]),s._v(" "),a("li",[a("strong",[s._v("黑色")]),s._v("：表示该顶点被访问过，且其所有相邻顶点都被访问过；")])]),s._v(" "),a("p",[s._v("首先封装initializeColor方法将图中的所有顶点初始化为白色，代码实现如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("      //四.初始化状态颜色\n      Graph.prototype.initializeColor = function(){\n        let colors = []\n        for (let i = 0; i < this.vertexes.length; i++) {\n           colors[this.vertexes[i]] = 'white';\n        }\n        return colors\n      }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h4",{attrs:{id:"广度优先搜索"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#广度优先搜索"}},[s._v("#")]),s._v(" 广度优先搜索")]),s._v(" "),a("p",[s._v("广度优先搜索算法的思路：")]),s._v(" "),a("ul",[a("li",[s._v("广度优先搜索算法会从指定的第一个顶点开始遍历图，先访问其所有的相邻顶点，就像一次访问图的一层；")]),s._v(" "),a("li",[s._v("也可以说是"),a("strong",[s._v("先宽后深")]),s._v("地遍历图中的各个顶点；")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%9B%BE/5.png",alt:"image-20200303233840691"}})]),s._v(" "),a("p",[a("strong",[s._v("实现思路：")])]),s._v(" "),a("p",[s._v("基于"),a("strong",[s._v("队列")]),s._v("可以简单地实现广度优先搜索算法：")]),s._v(" "),a("ul",[a("li",[s._v("首先创建一个队列Q（尾部进，首部出）；")]),s._v(" "),a("li",[s._v("调用封装的initializeColor方法将所有顶点初始化为白色；")]),s._v(" "),a("li",[s._v("指定第一个顶点A，将A标注为"),a("strong",[s._v("灰色")]),s._v("（被访问过的节点），并将A放入队列Q中；")]),s._v(" "),a("li",[s._v("循环遍历队列中的元素，只要队列Q非空，就执行以下操作：\n"),a("ul",[a("li",[s._v("先将灰色的A从Q的首部取出；")]),s._v(" "),a("li",[s._v("取出A后，将A的所有未被访问过（白色）的相邻顶点依次从队列Q的尾部加入队列，并变为灰色。以此保证，灰色的相邻顶点不重复加入队列；")]),s._v(" "),a("li",[s._v("A的全部相邻节点加入Q后，A变为黑色，在下一次循环中被移除Q外；")])])])]),s._v(" "),a("p",[a("strong",[s._v("代码实现：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("      //五.实现广度搜索(BFS)\n      //传入指定的第一个顶点和处理结果的函数\n      Graph.prototype.bfs = function(initV, handler){\n        //1.初始化颜色\n        let colors = this.initializeColor()\n\n        //2.创建队列\n        let que = new Queue()\n\n        //3.将顶点加入到队列中\n        que.enqueue(initV)\n\n        //4.循环从队列中取出元素，队列为空才停止\n        while(!que.isEmpty()){\n          //4.1.从队列首部取出一个顶点\n          let v = que.dequeue()\n\n          //4.2.从字典对象edges中获取和该顶点相邻的其他顶点组成的数组\n          let vNeighbours = this.edges.get(v)\n\n          //4.3.将v的颜色变为灰色\n          colors[v] = 'gray'\n\n          //4.4.遍历v所有相邻的顶点vNeighbours,并且加入队列中\n          for (let i = 0; i < vNeighbours.length; i++) {\n            const a = vNeighbours[i];\n            //判断相邻顶点是否被探测过，被探测过则不加入队列中；并且加入队列后变为灰色，表示被探测过\n            if (colors[a] == 'white') {\n              colors[a] = 'gray'\n              que.enqueue(a)\n            }\n          }\n\n          //4.5.处理顶点v\n          handler(v)\n\n          //4.6.顶点v所有白色的相邻顶点都加入队列后，将顶点v设置为黑色。此时黑色顶点v位于队列最前面，进入下一次while循环时会被取出\n          colors[v] = 'black'\n        }\n      }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br")])]),a("p",[a("strong",[s._v("过程详解：")])]),s._v(" "),a("p",[s._v("下为指定的第一个顶点为A时的遍历过程：")]),s._v(" "),a("ul",[a("li",[s._v("如 a 图所示，将在字典edges中取出的与A相邻的且未被访问过的白色顶点B、C、D放入队列que中并变为灰色，随后将A变为黑色并移出队列；")]),s._v(" "),a("li",[s._v("接着，如图 b 所示，将在字典edges中取出的与B相邻的且未被访问过的白色顶点E、F放入队列que中并变为灰色，随后将B变为黑色并移出队列；")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%9B%BE/6.png",alt:"image-20200306144336380"}})]),s._v(" "),a("ul",[a("li",[s._v("如 c 图所示，将在字典edges中取出的与C相邻的且未被访问过的白色顶点G（A，D也相邻不过已变为灰色，所以不加入队列）放入队列que中并变为灰色，随后将C变为黑色并移出队列；")]),s._v(" "),a("li",[s._v("接着，如图 d 所示，将在字典edges中取出的与D相邻的且未被访问过的白色顶点H放入队列que中并变为灰色，随后将D变为黑色并移出队列。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%9B%BE/7.png",alt:"image-20200306144427242"}})]),s._v(" "),a("p",[s._v("如此循环直到队列中元素为0，即所有顶点都变黑并移出队列后才停止，此时图中顶点已被全部遍历。")]),s._v(" "),a("p",[a("strong",[s._v("测试代码：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    //测试代码\n    //1.创建图结构\n    let graph = new Graph()\n\n    //2.添加顶点\n    let myVertexes = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']\n    for (let i = 0; i < myVertexes.length; i++) {\n      graph.addVertex(myVertexes[i])\n    }\n\n    //3.添加边\n    graph.addEdge('A', 'B')\n    graph.addEdge('A', 'C')\n    graph.addEdge('A', 'D')\n    graph.addEdge('C', 'D')\n    graph.addEdge('C', 'G')\n    graph.addEdge('D', 'G')\n    graph.addEdge('D', 'H')\n    graph.addEdge('B', 'E')\n    graph.addEdge('B', 'F')\n    graph.addEdge('E', 'I')\n    \n    //4.测试bfs遍历方法\n    let result = \"\"\n    graph.bfs(graph.vertexes[0], function(v){\n      result += v + \"-\"\n    })\n    console.log(result);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])]),a("p",[a("strong",[s._v("测试结果：")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%9B%BE/8.png",alt:"image-20200304120023711"}})]),s._v(" "),a("p",[s._v("可见，安装了广度优先搜索的顺序"),a("strong",[s._v("不重复")]),s._v("地遍历了"),a("strong",[s._v("所有")]),s._v("顶点。")]),s._v(" "),a("h4",{attrs:{id:"深度优先搜索"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深度优先搜索"}},[s._v("#")]),s._v(" 深度优先搜索")]),s._v(" "),a("p",[s._v("广度优先算法的思路：")]),s._v(" "),a("ul",[a("li",[s._v("深度优先搜索算法将会从指定的第一个顶点开始遍历图，沿着一条路径遍历直到该路径的最后一个顶点都被访问过为止；")]),s._v(" "),a("li",[s._v("接着沿原来路径回退并探索下一条路径，即"),a("strong",[s._v("先深后宽")]),s._v("地遍历图中的各个顶点；")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%9B%BE/9.png",alt:"image-20200304120355088"}})]),s._v(" "),a("p",[a("strong",[s._v("实现思路：")])]),s._v(" "),a("ul",[a("li",[s._v("可以使用"),a("strong",[s._v("栈")]),s._v("结构来实现深度优先搜索算法；")]),s._v(" "),a("li",[s._v("深度优先搜索算法的遍历顺序与二叉搜索树中的先序遍历较为相似，同样可以使用"),a("strong",[s._v("递归")]),s._v("来实现（递归的本质就是"),a("strong",[s._v("函数栈")]),s._v("的调用）。")])]),s._v(" "),a("p",[s._v("基于递归实现深度优先搜索算法：定义dfs方法用于调用递归方法dfsVisit，定义dfsVisit方法用于递归访问图中的各个顶点。")]),s._v(" "),a("p",[s._v("在dfs方法中：")]),s._v(" "),a("ul",[a("li",[s._v("首先，调用initializeColor方法将所有顶点初始化为白色；")]),s._v(" "),a("li",[s._v("然后，调用dfsVisit方法遍历图的顶点；")])]),s._v(" "),a("p",[s._v("在dfsVisit方法中：")]),s._v(" "),a("ul",[a("li",[s._v("首先，将传入的指定节点v标注为"),a("strong",[s._v("灰色")]),s._v("；")]),s._v(" "),a("li",[s._v("接着，处理顶点V；")]),s._v(" "),a("li",[s._v("然后，访问V的相邻顶点；")]),s._v(" "),a("li",[s._v("最后，将顶点v标注为黑色；")])]),s._v(" "),a("p",[a("strong",[s._v("代码实现：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("      //六.实现深度搜索(DFS)\n      Graph.prototype.dfs = function(initV, handler){\n        //1.初始化顶点颜色\n        let colors = this.initializeColor()\n\n        //2.从某个顶点开始依次递归访问\n        this.dfsVisit(initV, colors, handler)\n      }\n\n      //为了方便递归调用，封装访问顶点的函数，传入三个参数分别表示：指定的第一个顶点、颜色、处理函数\n      Graph.prototype.dfsVisit = function(v, colors, handler){\n        //1.将颜色设置为灰色\n        colors[v] = 'gray'\n\n        //2.处理v顶点\n        handler(v)\n\n        //3.访问V的相邻顶点\n        let vNeighbours = this.edges.get(v)\n        for (let i = 0; i < vNeighbours.length; i++) {\n          let a = vNeighbours[i];\n          //判断相邻顶点是否为白色，若为白色，递归调用函数继续访问\n          if (colors[a] == 'white') {\n            this.dfsVisit(a, colors, handler)\n          }\n          \n        }\n\n        //4.将v设置为黑色\n        colors[v] = 'black'\n      }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br")])]),a("p",[a("strong",[s._v("过程详解：")])]),s._v(" "),a("p",[s._v("这里主要解释一下代码中的第3步操作：访问指定顶点的相邻顶点。")]),s._v(" "),a("ul",[a("li",[s._v("以指定顶点A为例，先从储存顶点及其对应相邻顶点的字典对象edges中取出由顶点A的相邻顶点组成的数组：")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%9B%BE/10.png",alt:"image-20200304155916036"}})]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("第一步")]),s._v('：A顶点变为灰色，随后进入第一个for循环，遍历A白色的相邻顶点：B、C、D；在该for循环的第1次循环中（执行B），B顶点满足：colors == "white"，触发递归，重新调用该方法；')]),s._v(" "),a("li",[a("strong",[s._v("第二步")]),s._v('：B顶点变为灰色，随后进入第二个for循环，遍历B白色的相邻顶点：E、F；在该for循环的第1次循环中（执行E），E顶点满足：colors == "white"，触发递归，重新调用该方法；')]),s._v(" "),a("li",[a("strong",[s._v("第三步")]),s._v('：E顶点变为灰色，随后进入第三个for循环，遍历E白色的相邻顶点：I；在该for循环的第1次循环中（执行I），I顶点满足：colors == "white"，触发递归，重新调用该方法；')]),s._v(" "),a("li",[a("strong",[s._v("第四步")]),s._v('：I顶点变为灰色，随后进入第四个for循环，由于顶点I的相邻顶点E不满足：colors == "white"，停止递归调用。过程如下图所示：')])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%9B%BE/11.png",alt:"image-20200304160536187"}})]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("第五步")]),s._v("：递归结束后一路向上返回，首先回到第三个for循环中继续执行其中的第2、3...次循环，每次循环的执行过程与上面的同理，直到递归再次结束后，再返回到第二个for循环中继续执行其中的第2、3...次循环....以此类推直到将图的所有顶点访问完为止。")])]),s._v(" "),a("p",[s._v("下图为遍历图中各顶点的完整过程：")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("发现")]),s._v("表示访问了该顶点，状态变为"),a("strong",[s._v("灰色")]),s._v("；")]),s._v(" "),a("li",[a("strong",[s._v("探索")]),s._v("表示既访问了该顶点，也访问了该顶点的全部相邻顶点，状态变为"),a("strong",[s._v("黑色")]),s._v("；")]),s._v(" "),a("li",[s._v("由于在顶点变为灰色后就调用了处理函数handler，所以handler方法的输出顺序为发现顶点的顺序即：A、B、E、I、F、C、D、G、H 。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%9B%BE/12.png",alt:"image-20200304154745646"}})]),s._v(" "),a("p",[a("strong",[s._v("测试代码：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    //测试代码\n    //1.创建图结构\n    let graph = new Graph()\n\n    //2.添加顶点\n    let myVertexes = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']\n    for (let i = 0; i < myVertexes.length; i++) {\n      graph.addVertex(myVertexes[i])\n    }\n\n    //3.添加边\n    graph.addEdge('A', 'B')\n    graph.addEdge('A', 'C')\n    graph.addEdge('A', 'D')\n    graph.addEdge('C', 'D')\n    graph.addEdge('C', 'G')\n    graph.addEdge('D', 'G')\n    graph.addEdge('D', 'H')\n    graph.addEdge('B', 'E')\n    graph.addEdge('B', 'F')\n    graph.addEdge('E', 'I')\n    \n    //4.测试dfs遍历顶点\n    let result = \"\"\n    graph.dfs(graph.vertexes[0], function(v){\n      result += v + \"-\"\n    })\n    console.log(result);\n    \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("p",[a("strong",[s._v("测试结果：")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%9B%BE/13.png",alt:"image-20200304125313739"}})]),s._v(" "),a("h3",{attrs:{id:"_2-6-完整实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-完整实现"}},[s._v("#")]),s._v(" 2.6.完整实现")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    //封装图结构\n    function Graph (){\n      //属性：顶点(数组)/边(字典)\n      this.vertexes = []  //顶点\n      this.edges = new Dictionary() //边\n\n      //方法\n      //添加方法\n      //一.添加顶点\n      Graph.prototype.addVertex = function(v){\n        this.vertexes.push(v)\n        this.edges.set(v, []) //将边添加到字典中，新增的顶点作为键，对应的值为一个存储边的空数组\n      }\n      //二.添加边\n      Graph.prototype.addEdge = function(v1, v2){//传入两个顶点为它们添加边\n        this.edges.get(v1).push(v2)//取出字典对象edges中存储边的数组，并添加关联顶点\n        this.edges.get(v2).push(v1)//表示的是无向表，故要添加互相指向的两条边\n      }\n\n      //三.实现toString方法:转换为邻接表形式\n      Graph.prototype.toString = function (){\n        //1.定义字符串，保存最终结果\n        let resultString = \"\"\n\n        //2.遍历所有的顶点以及顶点对应的边\n        for (let i = 0; i < this.vertexes.length; i++) {//遍历所有顶点\n          resultString += this.vertexes[i] + '--\x3e'\n          let vEdges = this.edges.get(this.vertexes[i])\n          for (let j = 0; j < vEdges.length; j++) {//遍历字典中每个顶点对应的数组\n            resultString += vEdges[j] + '  ';\n          }\n          resultString += '\\n'\n        }\n        return resultString\n      }\n\n      //四.初始化状态颜色\n      Graph.prototype.initializeColor = function(){\n        let colors = []\n        for (let i = 0; i < this.vertexes.length; i++) {\n           colors[this.vertexes[i]] = 'white';\n        }\n        return colors\n      }\n\n      //五.实现广度搜索(BFS)\n      //传入指定的第一个顶点和处理结果的函数\n      Graph.prototype.bfs = function(initV, handler){\n        //1.初始化颜色\n        let colors = this.initializeColor()\n\n        //2.创建队列\n        let que = new Queue()\n\n        //3.将顶点加入到队列中\n        que.enqueue(initV)\n\n        //4.循环从队列中取出元素\n        while(!que.isEmpty()){\n          //4.1.从队列中取出一个顶点\n          let v = que.dequeue()\n\n          //4.2.获取和顶点相相邻的其他顶点\n          let vNeighbours = this.edges.get(v)\n\n          //4.3.将v的颜色变为灰色\n          colors[v] = 'gray'\n\n          //4.4.遍历v所有相邻的顶点vNeighbours,并且加入队列中\n          for (let i = 0; i < vNeighbours.length; i++) {\n            const a = vNeighbours[i];\n            //判断相邻顶点是否被探测过，被探测过则不加入队列中；并且加入队列后变为灰色，表示被探测过\n            if (colors[a] == 'white') {\n              colors[a] = 'gray'\n              que.enqueue(a)\n            }\n          }\n\n          //4.5.处理顶点v\n          handler(v)\n\n          //4.6.顶点v所有白色的相邻顶点都加入队列后，将顶点v设置为黑色。此时黑色顶点v位于队列最前面，进入下一次while循环时会被取出\n          colors[v] = 'black'\n        }\n      }\n\n      //六.实现深度搜索(DFS)\n      Graph.prototype.dfs = function(initV, handler){\n        //1.初始化顶点颜色\n        let colors = this.initializeColor()\n\n        //2.从某个顶点开始依次递归访问\n        this.dfsVisit(initV, colors, handler)\n      }\n\n      //为了方便递归调用，封装访问顶点的函数，传入三个参数分别表示：指定的第一个顶点、颜色、处理函数\n      Graph.prototype.dfsVisit = function(v, colors, handler){\n        //1.将颜色设置为灰色\n        colors[v] = 'gray'\n\n        //2.处理v顶点\n        handler(v)\n\n        //3.访问v相连的其他顶点\n        let vNeighbours = this.edges.get(v)\n        for (let i = 0; i < vNeighbours.length; i++) {\n          let a = vNeighbours[i];\n          //判断相邻顶点是否为白色，若为白色，递归调用函数继续访问\n          if (colors[a] == 'white') {\n            this.dfsVisit(a, colors, handler)\n          }\n          \n        }\n\n        //4.将v设置为黑色\n        colors[v] = 'black'\n      }\n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br"),a("span",{staticClass:"line-number"},[s._v("100")]),a("br"),a("span",{staticClass:"line-number"},[s._v("101")]),a("br"),a("span",{staticClass:"line-number"},[s._v("102")]),a("br"),a("span",{staticClass:"line-number"},[s._v("103")]),a("br"),a("span",{staticClass:"line-number"},[s._v("104")]),a("br"),a("span",{staticClass:"line-number"},[s._v("105")]),a("br"),a("span",{staticClass:"line-number"},[s._v("106")]),a("br"),a("span",{staticClass:"line-number"},[s._v("107")]),a("br"),a("span",{staticClass:"line-number"},[s._v("108")]),a("br"),a("span",{staticClass:"line-number"},[s._v("109")]),a("br"),a("span",{staticClass:"line-number"},[s._v("110")]),a("br"),a("span",{staticClass:"line-number"},[s._v("111")]),a("br"),a("span",{staticClass:"line-number"},[s._v("112")]),a("br"),a("span",{staticClass:"line-number"},[s._v("113")]),a("br"),a("span",{staticClass:"line-number"},[s._v("114")]),a("br"),a("span",{staticClass:"line-number"},[s._v("115")]),a("br"),a("span",{staticClass:"line-number"},[s._v("116")]),a("br"),a("span",{staticClass:"line-number"},[s._v("117")]),a("br"),a("span",{staticClass:"line-number"},[s._v("118")]),a("br")])]),a("blockquote",[a("p",[s._v("参考资料:"),a("a",{attrs:{href:"https://www.bilibili.com/video/BV1x7411L7Q7?from=search&seid=3912456004602554239",target:"_blank",rel:"noopener noreferrer"}},[s._v("JavaScript数据结构与算法"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);n.default=e.exports}}]);