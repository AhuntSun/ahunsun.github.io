(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{442:function(s,t,n){"use strict";n.r(t);var a=n(27),e=Object(a.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"_01-javascript实现栈结构（stack）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_01-javascript实现栈结构（stack）"}},[s._v("#")]),s._v(" 01.JavaScript实现栈结构（Stack）")]),s._v(" "),n("h2",{attrs:{id:"一、前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、前言"}},[s._v("#")]),s._v(" 一、前言")]),s._v(" "),n("h3",{attrs:{id:"_1-1-什么是数据结构？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-什么是数据结构？"}},[s._v("#")]),s._v(" 1.1.什么是数据结构？")]),s._v(" "),n("p",[s._v("数据结构就是在计算机中，存储和组织数据的方式。")]),s._v(" "),n("p",[s._v("例如：图书管理，怎样摆放图书才能既能放很多书，也方便取？")]),s._v(" "),n("p",[s._v("主要需要考虑两个问题：")]),s._v(" "),n("ul",[n("li",[s._v("操作一：新书怎么插入？")]),s._v(" "),n("li",[s._v("操作二：怎么找到某本指定的书？")])]),s._v(" "),n("p",[n("strong",[s._v("常见的数据结构：")])]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("数组")]),s._v("（Aarray）")]),s._v(" "),n("li",[n("strong",[s._v("栈")]),s._v("（Stack）")]),s._v(" "),n("li",[n("strong",[s._v("链表")]),s._v("（Linked List）")]),s._v(" "),n("li",[n("strong",[s._v("图")]),s._v("（Graph）")]),s._v(" "),n("li",[n("strong",[s._v("散列表")]),s._v("（Hash）")]),s._v(" "),n("li",[n("strong",[s._v("队列")]),s._v("（Queue）")]),s._v(" "),n("li",[n("strong",[s._v("树")]),s._v("（Tree）")]),s._v(" "),n("li",[n("strong",[s._v("堆")]),s._v("（Heap）")])]),s._v(" "),n("p",[n("strong",[s._v("注意")]),s._v("：数据结构与算法与语言无关，常见的编程语言都有"),n("strong",[s._v("直接或间接")]),s._v("的使用上述常见的数据结构。")]),s._v(" "),n("h3",{attrs:{id:"_1-2-什么是算法？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-什么是算法？"}},[s._v("#")]),s._v(" 1.2.什么是算法？")]),s._v(" "),n("p",[s._v("算法（Algorithm）的定义")]),s._v(" "),n("ul",[n("li",[s._v("一个有限指令集，每条指令的描述不依赖于语言；")]),s._v(" "),n("li",[s._v("接收一些输入（有些情况下不需要输入）；")]),s._v(" "),n("li",[s._v("产生输入；")]),s._v(" "),n("li",[s._v("一定在有限步骤之后终止；")])]),s._v(" "),n("p",[s._v("算法通俗理解：解决问题的办法/步骤逻辑。数据结构的实现，离不开算法。")]),s._v(" "),n("h2",{attrs:{id:"二、栈结构（stack）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、栈结构（stack）"}},[s._v("#")]),s._v(" 二、栈结构（Stack）")]),s._v(" "),n("h3",{attrs:{id:"_2-1-简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-简介"}},[s._v("#")]),s._v(" 2.1.简介")]),s._v(" "),n("p",[s._v("数组是一个线性结构，并且可以在数组的"),n("strong",[s._v("任意位置")]),s._v("插入和删除元素。而"),n("strong",[s._v("栈和队列")]),s._v("就是比较常见的"),n("strong",[s._v("受限的线性结构")]),s._v("。如下图所示：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%A0%88/1.png",alt:"image-20200226131817102"}})]),s._v(" "),n("p",[s._v("栈的特点为"),n("strong",[s._v("先进后出，后进先出")]),s._v("（LIFO：last in first out）。")]),s._v(" "),n("p",[n("strong",[s._v("程序中的栈结构：")])]),s._v(" "),n("ul",[n("li",[n("p",[n("strong",[s._v("函数调用栈")]),s._v("：A（B（C（D（））））：即A函数中调用B，B调用C，C调用D；在A执行的过程中会将A压入栈，随后B执行时B也被压入栈，函数C和D执行时也会被压入栈。所以当前栈的顺序为：A->B->C->D（栈顶）；函数D执行完之后，会弹出栈被释放，弹出栈的顺序为D->C->B->A;")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("递归")]),s._v("：为什么没有停止条件的递归会造成栈溢出？比如函数A为递归函数，不断地调用自己（因为函数还没有执行完，不会把函数弹出栈），不停地把相同的函数A压入栈，最后造成"),n("strong",[s._v("栈溢出")]),s._v("（Stack Overfloat）")])])]),s._v(" "),n("p",[s._v("3.练习：题目：有6个元素6，5，4，3，2，1按顺序进栈，问下列哪一个不是合法的出栈顺序？")]),s._v(" "),n("ul",[n("li",[s._v("A：5\t4\t3\t6\t1\t2\t\t\t（√）")]),s._v(" "),n("li",[s._v("B：4     5     3    2    1    6          （√）")]),s._v(" "),n("li",[s._v("C：3      4     6   5     2    1         （×）")]),s._v(" "),n("li",[s._v("D：2      3     4     1     5   6        （√）")])]),s._v(" "),n("p",[s._v("题目所说的按顺序进栈指的不是一次性全部进栈，而是有进有出，进栈顺序为6 -> 5 -> 4 -> 3 -> 2 -> 1。")]),s._v(" "),n("p",[s._v("解析：")]),s._v(" "),n("ul",[n("li",[s._v("A答案：65进栈，5出栈，4进栈出栈，3进栈出栈，6出栈，21进栈，1出栈，2出栈（整体入栈顺序符合654321）;")]),s._v(" "),n("li",[s._v("B答案：654进栈，4出栈，5出栈，3进栈出栈，2进栈出栈，1进栈出栈，6出栈（整体的入栈顺序符合654321）;")]),s._v(" "),n("li",[s._v("C答案：6543进栈，3出栈，4出栈，之后应该5出栈而不是6，所以错误；")]),s._v(" "),n("li",[s._v("D答案：65432进栈，2出栈，3出栈，4出栈，1进栈出栈，5出栈，6出栈。符合入栈顺序；")])]),s._v(" "),n("p",[n("strong",[s._v("栈常见的操作：")])]),s._v(" "),n("ul",[n("li",[s._v("push（element）：添加一个新元素到栈顶位置；")]),s._v(" "),n("li",[s._v("pop（）：移除栈顶的元素，同时返回被移除的元素；")]),s._v(" "),n("li",[s._v("peek（）：返回栈顶的元素，不对栈做任何修改（该方法不会移除栈顶的元素，仅仅返回它）；")]),s._v(" "),n("li",[s._v("isEmpty（）：如果栈里没有任何元素就返回true，否则返回false；")]),s._v(" "),n("li",[s._v("size（）：返回栈里的元素个数。这个方法和数组的length属性类似；")]),s._v(" "),n("li",[s._v("toString（）：将栈结构的内容以字符串的形式返回。")])]),s._v(" "),n("h3",{attrs:{id:"_2-2-封装栈类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-封装栈类"}},[s._v("#")]),s._v(" 2.2.封装栈类")]),s._v(" "),n("p",[n("strong",[s._v("代码实现：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    // 封装栈类\n    function Stack(){\n      // 栈中的属性\n      this.items =[]\n\n      // 栈的相关操作\n      // 1.push():将元素压入栈\n      //方式一(不推荐)：给对象添加方法，其他对象不能复用\n      // this.push = () => {\n      // }\n      \n      //方式二(推荐)：给Stack类添加方法，能够多对象复用\n      Stack.prototype.push = function(element) {\n      // 利用数组item的push方法实现Stack类的pop方法\n        this.items.push(element)\n      }\n\n      // 2.pop():从栈中取出元素\n      Stack.prototype.pop = () => {\n      // 利用数组item的pop方法实现Stack类的pop方法\n        return this.items.pop()\n      }\n\n      // 3.peek():查看一下栈顶元素\n      Stack.prototype.peek = () => {\n        return this.items[this.items.length - 1]\n      }\n\n      // 4.isEmpty():判断栈是否为空\n      Stack.prototype.isEmpty = () => {\n      // 两个小时的教训啊不是this.length(不是Stack对象的length，Stack类没有length属性啊)，而是\t\t\tStack类中定义的数组items才有length属性呀\n        return this.items.length == 0 \n      }\n\n      // 5.size():获取栈中元素的个数\n      Stack.prototype.size = () => {\n        return this.items.length\n      }\n\n      // 6.toString():以字符串形式输出栈内数据\n      Stack.prototype.toString = () => {\n        //希望输出的形式：20 10 12 8 7\n        let resultString = ''\n        for (let i of this.items){\n          resultString += i + ' '\n        }\n        return resultString\n      }\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br")])]),n("p",[n("strong",[s._v("测试代码：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(" // 栈的使用\n    let  s = new Stack()\n    s.push(20)\n    s.push(10)\n    s.push(100)\n    s.push(77)\n    console.log(s)\t\t\t\t\t\t\t\t\t\t\t\t\t//65\n\n    console.log(s.pop());\t\t\t\t\t\t\t\t\t\t\t//68\n    console.log(s.pop());\t\t\t\t\t\t\t\t\t\t\t//69\n    \n    console.log(s.peek());\t\t\t\t\t\t\t\t\t\t\t//71\n\tconsole.log(s.isEmpty());\t\t\t\t\t\t\t\t\t\t//72\n   \n    console.log(s.size());\t\t\t\t\t\t\t\t\t\t\t//74\n    console.log(s.toString());\t\t\t\t\t\t\t\t\t\t//75\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[n("strong",[s._v("测试结果：")])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%A0%88/2.png",alt:"image-20200305205050816"}})]),s._v(" "),n("p",[n("strong",[s._v("栈结构的简单应用：")])]),s._v(" "),n("p",[s._v("利用栈结构的特点封装十进至转换为二进至的函数：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    //简单应用：\n    //封装函数：将十进制转成二进制(十转二的运算最后倒叙取余的特点符合栈'先进后出')\n    let dec2bin = decNumber => {\n      //1.定义一个栈对象，保存余数\n      var  stack = new Stack()\n\n      // 2.循环操作\n      while(decNumber > 0){\n        // 2.1.获取余数并放入栈中\n        stack.push(decNumber % 2)\n        // 2.2.获取整除后的结果作为下一次运算的数字(floor:向下取整)\n        decNumber = Math.floor(decNumber / 2)\n      }\n\n      // 3.从栈中取出0和1\n      let  binaryString = '';\n      let a = stack.items.length\n     while(stack.items.length != 0){\n        binaryString += stack.pop();\n      }\n      return binaryString;\n    }\n    \n    //测试代码\n    console.log(dec2bin(10));\t\t\t\t\t\t\t\t\t\t//103\n    console.log(dec2bin(100));\t\t\t\t\t\t\t\t\t\t//104\n    console.log(dec2bin(1000));\t\t\t\t\t\t\t\t\t\t//105\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br")])]),n("p",[n("strong",[s._v("测试结果：")])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%A0%88/3.png",alt:"image-20200305205547226"}})]),s._v(" "),n("blockquote",[n("p",[s._v("参考资料:"),n("a",{attrs:{href:"https://www.bilibili.com/video/BV1x7411L7Q7?from=search&seid=3912456004602554239",target:"_blank",rel:"noopener noreferrer"}},[s._v("JavaScript数据结构与算法"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=e.exports}}]);