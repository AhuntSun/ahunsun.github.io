(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{530:function(e,t,s){"use strict";s.r(t);var a=s(27),v=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"第十一讲：git工作流gitflow"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第十一讲：git工作流gitflow"}},[e._v("#")]),e._v(" 第十一讲：Git工作流Gitflow")]),e._v(" "),s("p",[e._v("说明：")]),e._v(" "),s("blockquote",[s("p",[e._v("本文转载于：https://github.com/xirong/my-git")])]),e._v(" "),s("p",[e._v("个人在学习"),s("code",[e._v("Git")]),e._v("工作流的过程中，从原有的 SVN 模式很难完全理解"),s("code",[e._v("Git")]),e._v("的协作模式，直到有一天我看到了下面的文章，好多遗留在心中的困惑迎刃而解：")]),e._v(" "),s("ul",[s("li",[e._v("我们以使用"),s("code",[e._v("SVN")]),e._v("的工作流来使用"),s("code",[e._v("Git")]),e._v("有什么不妥？")]),e._v(" "),s("li",[s("code",[e._v("Git")]),e._v("方便的"),s("code",[e._v("branch")]),e._v("在哪里，团队多人如何协作？冲突了怎么办？如何进行发布控制？")]),e._v(" "),s("li",[e._v("经典的"),s("code",[e._v("master-")]),e._v("发布、"),s("code",[e._v("develop-")]),e._v("主开发、"),s("code",[e._v("hotfix-bug")]),e._v("修复如何避免代码不经过验证上线？")]),e._v(" "),s("li",[e._v("如何在"),s("code",[e._v("GitHub")]),e._v("上面与他人一起协作，"),s("code",[e._v("star-fork-pull request")]),e._v("是怎样的流程？")])]),e._v(" "),s("p",[e._v("我个人很感激这篇文章，所以进行了整理，希望能帮到更多的人。整篇文章由 "),s("a",{attrs:{href:"https://github.com/xirong",target:"_blank",rel:"noopener noreferrer"}},[e._v("xirong"),s("OutboundLink")],1),e._v(" 整理自 "),s("a",{attrs:{href:"https://github.com/oldratlee",target:"_blank",rel:"noopener noreferrer"}},[e._v("oldratlee"),s("OutboundLink")],1),e._v(" 的"),s("code",[e._v("GitHub")]),e._v("，方便统一的学习回顾，在此感谢下面两位的贡献。")]),e._v(" "),s("p",[e._v("原文链接："),s("a",{attrs:{href:"https://www.atlassian.com/git/workflows",target:"_blank",rel:"noopener noreferrer"}},[e._v("Git Workflows and Tutorials"),s("OutboundLink")],1),s("br"),e._v("\n简体中文：由 "),s("a",{attrs:{href:"https://github.com/oldratlee",target:"_blank",rel:"noopener noreferrer"}},[e._v("oldratlee"),s("OutboundLink")],1),e._v(" 翻译在 "),s("code",[e._v("GitHub")]),e._v(" 上 "),s("a",{attrs:{href:"https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/README.md",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("Git")]),e._v("工作流指南"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("在第三部分 "),s("a",{attrs:{href:"#三企业日常开发模式探索"}},[e._v("企业日常开发模式探索")]),e._v("，"),s("code",[e._v("xirong")]),e._v(" 结合自己所在公司使用"),s("code",[e._v("git")]),e._v("的版本分支开发过程，进行了总结，欢迎大家提出更好的建议。")]),e._v(" "),s("p",[e._v("在第四部分 "),s("a",{attrs:{href:"#开发工作流的讨论"}},[e._v("开发工作流的讨论")]),e._v(" 中，引用了几篇文章，包括 "),s("code",[e._v("Github")]),e._v(" 的开发流程以及 "),s("code",[e._v("Thoughtworkers")]),e._v(" 工程师发表的「"),s("code",[e._v("Gitflow")]),e._v(" 有害论」，旨在表名流程并不是唯一的，适合自己当前团队的才是最好的。")]),e._v(" "),s("hr"),e._v(" "),s("p",{attrs:{"data-anchor-id":"bd8d"}}),s("div",{staticClass:"toc"},[s("ul",[s("li",[s("a",{attrs:{href:"#一译序"}},[e._v("一、译序")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#二git工作流指南"}},[e._v("二、Git工作流指南")]),s("ul",[s("li",[s("a",{attrs:{href:"#21-集中式工作流"}},[e._v("2.1 集中式工作流")]),s("ul",[s("li",[s("a",{attrs:{href:"#211-工作方式"}},[e._v("2.1.1 工作方式")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#212-冲突解决"}},[e._v("2.1.2 冲突解决")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#213-示例"}},[e._v("2.1.3 示例")]),s("ul",[s("li",[s("a",{attrs:{href:"#有人先初始化好中央仓库"}},[e._v("有人先初始化好中央仓库")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#所有人克隆中央仓库"}},[e._v("所有人克隆中央仓库")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#小明开发功能"}},[e._v("小明开发功能")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#小红开发功能"}},[e._v("小红开发功能")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#小明发布功能"}},[e._v("小明发布功能")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#小红试着发布功能"}},[e._v("小红试着发布功能")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#小红在小明的提交之上rebase"}},[e._v("小红在小明的提交之上rebase")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#小红解决合并冲突"}},[e._v("小红解决合并冲突")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#小红成功发布功能"}},[e._v("小红成功发布功能")])])])])])]),e._v(" "),s("li",[s("a",{attrs:{href:"#22-功能分支工作流"}},[e._v("2.2 功能分支工作流")]),s("ul",[s("li",[s("a",{attrs:{href:"#221-工作方式"}},[e._v("2.2.1 工作方式")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#222-pull-requests"}},[e._v("2.2.2 Pull Requests")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#223-示例"}},[e._v("2.2.3 示例")]),s("ul",[s("li",[s("a",{attrs:{href:"#小红开始开发一个新功能"}},[e._v("小红开始开发一个新功能")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#小红要去吃个午饭"}},[e._v("小红要去吃个午饭")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#小红完成功能开发"}},[e._v("小红完成功能开发")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#小黑收到pull-request"}},[e._v("小黑收到Pull Request")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#小红再做修改"}},[e._v("小红再做修改")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#小红发布她的功能"}},[e._v("小红发布她的功能")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#与此同时小明在做和小红一样的事"}},[e._v("与此同时，小明在做和小红一样的事")])])])])])]),e._v(" "),s("li",[s("a",{attrs:{href:"#23-gitflow工作流"}},[e._v("2.3 Gitflow工作流")]),s("ul",[s("li",[s("a",{attrs:{href:"#231-工作方式"}},[e._v("2.3.1 工作方式")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#232-历史分支"}},[e._v("2.3.2 历史分支")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#233-功能分支"}},[e._v("2.3.3 功能分支")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#234-发布分支"}},[e._v("2.3.4 发布分支")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#235-维护分支"}},[e._v("2.3.5 维护分支")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#236-示例"}},[e._v("2.3.6 示例")]),s("ul",[s("li",[s("a",{attrs:{href:"#创建开发分支"}},[e._v("创建开发分支")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#小红和小明开始开发新功能"}},[e._v("小红和小明开始开发新功能")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#小红完成功能开发-1"}},[e._v("小红完成功能开发")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#小红开始准备发布"}},[e._v("小红开始准备发布")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#小红完成发布"}},[e._v("小红完成发布")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#最终用户发现bug"}},[e._v("最终用户发现Bug")])])])])])]),e._v(" "),s("li",[s("a",{attrs:{href:"#24-forking工作流"}},[e._v("2.4 Forking工作流")]),s("ul",[s("li",[s("a",{attrs:{href:"#241-工作方式"}},[e._v("2.4.1 工作方式")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#242-正式仓库"}},[e._v("2.4.2 正式仓库")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#243-forking工作流的分支使用方式"}},[e._v("2.4.3 Forking工作流的分支使用方式")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#244-示例"}},[e._v("2.4.4 示例")]),s("ul",[s("li",[s("a",{attrs:{href:"#项目维护者初始化正式仓库"}},[e._v("项目维护者初始化正式仓库")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#开发者fork正式仓库"}},[e._v("开发者fork正式仓库")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#开发者克隆自己fork出来的仓库"}},[e._v("开发者克隆自己fork出来的仓库")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#开发者开发自己的功能"}},[e._v("开发者开发自己的功能")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#开发者发布自己的功能"}},[e._v("开发者发布自己的功能")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#项目维护者集成开发者的功能"}},[e._v("项目维护者集成开发者的功能")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#开发者和正式仓库做同步"}},[e._v("开发者和正式仓库做同步")])])])])])]),e._v(" "),s("li",[s("a",{attrs:{href:"#25-pull-requests"}},[e._v("2.5 Pull Requests")]),s("ul",[s("li",[s("a",{attrs:{href:"#251-解析pull-request"}},[e._v("2.5.1 解析Pull Request")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#252-工作方式"}},[e._v("2.5.2 工作方式")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#253-在功能分支工作流中使用pull-request"}},[e._v("2.5.3 在功能分支工作流中使用Pull Request")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#254-在gitflow工作流中使用pull-request"}},[e._v("2.5.4 在Gitflow工作流中使用Pull Request")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#255-在forking工作流中使用pull-request"}},[e._v("2.5.5 在Forking工作流中使用Pull Request")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#256-示例"}},[e._v("2.5.6 示例")]),s("ul",[s("li",[s("a",{attrs:{href:"#小红fork正式项目"}},[e._v("小红fork正式项目")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#小红克隆她的bitbucket仓库"}},[e._v("小红克隆她的Bitbucket仓库")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#小红开发新功能"}},[e._v("小红开发新功能")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#小红push功能到她的bitbucket仓库中"}},[e._v("小红push功能到她的Bitbucket仓库中")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#小红发起pull-request"}},[e._v("小红发起Pull Request")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#小明review-pull-request"}},[e._v("小明review Pull Request")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#小红补加提交"}},[e._v("小红补加提交")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#小明接受pull-request"}},[e._v("小明接受Pull Request")])])])])])])])]),e._v(" "),s("li",[s("a",{attrs:{href:"#三企业日常开发模式探索"}},[e._v("三、企业日常开发模式探索")])])])]),e._v(" "),s("p"),e._v(" "),s("h2",{attrs:{id:"一、译序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、译序"}},[e._v("#")]),e._v(" 一、译序")]),e._v(" "),s("p",[e._v("这篇指南以大家在"),s("code",[e._v("SVN")]),e._v("中已经广为熟悉使用的集中式工作流作为起点，循序渐进地演进到其它高效的分布式工作流，还介绍了如何配合使用便利的"),s("code",[e._v("Pull Request")]),e._v("功能，系统地讲解了各种工作流的应用。\n如果你"),s("code",[e._v("Git")]),e._v("用的还不多，可以从前面的讲的工作流开始操练。在操作过程中去感受指南的讲解：解决什么问题、如何解决问题，这样理解就深了，也方便活用。")]),e._v(" "),s("p",[e._v("行文中实践原则和操作示例并重，对于"),s("code",[e._v("Git")]),e._v("的资深玩家可以梳理思考提升，而新接触的同学，也可以跟着step-by-step操练学习并在实际工作中上手使用。")]),e._v(" "),s("p",[e._v("工作流其实不是一个初级主题，背后的本质问题是 有效的项目流程管理 和 高效的开发协同约定，而不仅仅是"),s("code",[e._v("Git")]),e._v("或"),s("code",[e._v("SVN")]),e._v("等"),s("a",{attrs:{href:"http://zh.wikipedia.org/wiki/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("VCS")]),s("OutboundLink")],1),e._v("或"),s("a",{attrs:{href:"http://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("SCM")]),s("OutboundLink")],1),e._v("工具的使用。")]),e._v(" "),s("p",[e._v("关于"),s("code",[e._v("Git")]),e._v("工作流主题，网上体系的中文资料不多，主要是零散的操作说明，希望这篇文章能让你更深入理解并在工作中灵活有效地使用起来。")]),e._v(" "),s("p",[s("code",[e._v("Gitflow")]),e._v("工作流是经典模型，处于核心位置，体现了工作流的经验和精髓。随着项目过程复杂化，你会感受到这个工作流中的深思熟虑和威力！")]),e._v(" "),s("p",[s("code",[e._v("Forking")]),e._v("工作流是分布式协作的（"),s("code",[e._v("GitHub")]),e._v("风格）可以先看看"),s("code",[e._v("GitHub")]),e._v("的Help："),s("a",{attrs:{href:"https://help.github.com/articles/fork-a-repo/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Fork A Repo"),s("OutboundLink")],1),e._v("和"),s("a",{attrs:{href:"https://help.github.com/articles/using-pull-requests/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Using pull requests"),s("OutboundLink")],1),e._v(" 。照着操作，给一个"),s("code",[e._v("GitHub")]),e._v("项目贡献你的提交，有操作经验再看指南容易意会。指南中给了"),s("a",{attrs:{href:"https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/workflow-forking.md#%E5%BC%80%E5%8F%91%E8%80%85fork%E6%AD%A3%E5%BC%8F%E4%BB%93%E5%BA%93",target:"_blank",rel:"noopener noreferrer"}},[e._v("自己实现"),s("code",[e._v("Fork")]),e._v("的方法"),s("OutboundLink")],1),e._v("："),s("code",[e._v("Fork")]),e._v("就是服务端的克隆。在指南的操练中使用代码托管服务（如"),s("code",[e._v("GitHub")]),e._v("、"),s("code",[e._v("Bitbucket")]),e._v("），可以点一下按钮就让开发者完成仓库的"),s("code",[e._v("fork")]),e._v("操作。")]),e._v(" "),s("p",[s("strong",[s("em",[e._v("PS")])]),e._v("：")]),e._v(" "),s("p",[e._v("文中"),s("code",[e._v("Pull Request")]),e._v("的介绍用的是"),s("code",[e._v("Bitbucket")]),e._v("代码托管服务，由于和"),s("code",[e._v("GitHub")]),e._v("基本一样，如果你用的是"),s("code",[e._v("GitHub")]),e._v("（我自己也主要使用"),s("code",[e._v("GitHub")]),e._v("托管代码），不影响理解和操作。")]),e._v(" "),s("p",[s("strong",[s("em",[e._v("PPS")])]),e._v("：")]),e._v(" "),s("p",[e._v("更多"),s("code",[e._v("Git")]),e._v("学习资料参见")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/xirong/my-git",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("Git")]),e._v("的资料整理"),s("OutboundLink")],1),e._v(" by "),s("a",{attrs:{href:"https://github.com/xirong",target:"_blank",rel:"noopener noreferrer"}},[e._v("@xirong"),s("OutboundLink")],1)]),e._v(" "),s("li",[e._v("自己整理的分享PPT "),s("a",{attrs:{href:"https://github.com/oldratlee/software-practice-miscellany/blob/master/git/git-gitlab-usage.pptx",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("Git")]),e._v("使用与实践"),s("OutboundLink")],1),e._v(" @ "),s("a",{attrs:{href:"https://github.com/oldratlee/software-practice-miscellany/tree/master/git",target:"_blank",rel:"noopener noreferrer"}},[e._v("个人整理一些"),s("code",[e._v("Git")]),s("OutboundLink")],1)])]),e._v(" "),s("hr"),e._v(" "),s("ul",[s("li",[e._v("🙈 "),s("a",{attrs:{href:"http://weibo.com/oldratlee",target:"_blank",rel:"noopener noreferrer"}},[e._v("自己"),s("OutboundLink")],1),e._v("理解粗浅，翻译中不足和不对之处，欢迎 👏\n"),s("ul",[s("li",[e._v("建议，"),s("a",{attrs:{href:"https://github.com/oldratlee/translations/issues/new",target:"_blank",rel:"noopener noreferrer"}},[e._v("提交"),s("code",[e._v("Issue")]),s("OutboundLink")],1)]),e._v(" "),s("li",[e._v("指正，"),s("a",{attrs:{href:"https://github.com/oldratlee/translations/fork",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("Fork")]),e._v("后提通过"),s("code",[e._v("Pull Requst")]),e._v("贡献修改"),s("OutboundLink")],1)])])]),e._v(" "),s("li",[e._v("如有文章理解上有疑问 或是 使用过程中碰到些疑惑，请随时🙌"),s("a",{attrs:{href:"https://github.com/oldratlee/translations/issues/new",target:"_blank",rel:"noopener noreferrer"}},[e._v("提交"),s("code",[e._v("Issue")]),s("OutboundLink")],1),e._v(" ，一起交流学习讨论！")])]),e._v(" "),s("hr"),e._v(" "),s("h2",{attrs:{id:"二、git工作流指南"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、git工作流指南"}},[e._v("#")]),e._v(" 二、"),s("code",[e._v("Git")]),e._v("工作流指南")]),e._v(" "),s("p",[e._v("👉 工作流有各式各样的用法，但也正因此使得在实际工作中如何上手使用变得很头大。这篇指南通过总览公司团队中最常用的几种"),s("code",[e._v("Git")]),e._v("工作流让大家可以上手使用。")]),e._v(" "),s("p",[e._v("在阅读的过程中请记住，本文中的几种工作流是作为方案指导而不是条例规定。在展示了各种工作流可能的用法后，你可以从不同的工作流中挑选或揉合出一个满足你自己需求的工作流。")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/1.png",alt:"Git Workflows"}})]),e._v(" "),s("h2",{attrs:{id:"_2-1-集中式工作流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-集中式工作流"}},[e._v("#")]),e._v(" 2.1 集中式工作流")]),e._v(" "),s("p",[e._v("如果你的开发团队成员已经很熟悉"),s("code",[e._v("Subversion")]),e._v("，集中式工作流让你无需去适应一个全新流程就可以体验"),s("code",[e._v("Git")]),e._v("带来的收益。这个工作流也可以作为向更"),s("code",[e._v("Git")]),e._v("风格工作流迁移的友好过渡。")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/2.png",alt:"Git Workflows: SVN-style"}})]),e._v(" "),s("p",[e._v("转到分布式版本控制系统看起来像个令人生畏的任务，但不改变已用的工作流，你也可以用上"),s("code",[e._v("Git")]),e._v("带来的收益。团队可以用和"),s("code",[e._v("Subversion")]),e._v("完全不变的方式来开发项目。")]),e._v(" "),s("p",[e._v("但使用"),s("code",[e._v("Git")]),e._v("加强开发的工作流，相比"),s("code",[e._v("SVN")]),e._v("，"),s("code",[e._v("Git")]),e._v("有以下两个优势:\n首先，每个开发者可以有属于自己的整个工程的本地拷贝。隔离的环境让各个开发者的工作和项目的其他部分修改独立开来 ——\n即自由地提交到自己的本地仓库，先完全忽略上游的开发，直到方便的时候再把修改反馈上去。")]),e._v(" "),s("p",[e._v("其次，"),s("code",[e._v("Git")]),e._v("提供了强壮的分支和合并模型。不像"),s("code",[e._v("SVN")]),e._v("，"),s("code",[e._v("Git")]),e._v("的分支设计成可以做为一种用来在仓库之间集成代码和分享修改的『失败安全』的机制。")]),e._v(" "),s("h3",{attrs:{id:"_2-1-1-工作方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-工作方式"}},[e._v("#")]),e._v(" 2.1.1 工作方式")]),e._v(" "),s("p",[e._v("像"),s("code",[e._v("Subversion")]),e._v("一样，集中式工作流以中央仓库作为项目所有修改的单点实体。相比"),s("code",[e._v("SVN")]),e._v("缺省的开发分支"),s("code",[e._v("trunk")]),e._v("，"),s("code",[e._v("Git")]),e._v("叫做"),s("code",[e._v("master")]),e._v("，所有修改提交到这个分支上。本工作流只用到"),s("code",[e._v("master")]),e._v("这一个分支。")]),e._v(" "),s("p",[e._v("首先，开发者克隆中央仓库。在自己的项目拷贝中，像"),s("code",[e._v("SVN")]),e._v("一样的编辑文件和提交修改；但修改是存在本地的，和中央仓库是完全隔离的。开发者可以把和上游的同步延后到一个方便时间点。")]),e._v(" "),s("p",[e._v("然后，开发者发布修改到正式项目中，开发者要把本地"),s("code",[e._v("master")]),e._v("分支的修改『推』到中央仓库中。这相当于"),s("code",[e._v("svn commit")]),e._v("操作，但"),s("code",[e._v("push")]),e._v("操作会把所有还不在中央仓库的本地提交都推上去。")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/3.png",alt:"git-workflow-svn-push-local"}})]),e._v(" "),s("h3",{attrs:{id:"_2-1-2-冲突解决"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-冲突解决"}},[e._v("#")]),e._v(" 2.1.2 冲突解决")]),e._v(" "),s("p",[e._v("中央仓库代表了正式项目，所以提交历史应该被尊重且是稳定不变的。如果开发者本地的提交历史和中央仓库有分歧，"),s("code",[e._v("Git")]),e._v("会拒绝"),s("code",[e._v("push")]),e._v("提交否则会覆盖已经在中央库的正式提交。")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/4.png",alt:"git-workflow-svn-managingconflicts"}})]),e._v(" "),s("p",[e._v("在开发者提交自己功能修改到中央库前，需要先"),s("code",[e._v("fetch")]),e._v("在中央库的新增提交，"),s("code",[e._v("rebase")]),e._v("自己提交到中央库提交历史之上。\n这样做的意思是在说，『我要把自己的修改加到别人已经完成的修改上。』最终的结果是一个完美的线性历史，就像以前的"),s("code",[e._v("SVN")]),e._v("的工作流中一样。")]),e._v(" "),s("p",[e._v("如果本地修改和上游提交有冲突，"),s("code",[e._v("Git")]),e._v("会暂停"),s("code",[e._v("rebase")]),e._v("过程，给你手动解决冲突的机会。"),s("code",[e._v("Git")]),e._v("解决合并冲突，用和生成提交一样的"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/git-basics#!status",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("git status")]),s("OutboundLink")],1),e._v("和"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/git-basics#!add",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("git add")]),s("OutboundLink")],1),e._v("命令，很一致方便。还有一点，如果解决冲突时遇到麻烦，"),s("code",[e._v("Git")]),e._v("可以很简单中止整个"),s("code",[e._v("rebase")]),e._v("操作，重来一次（或者让别人来帮助解决）。")]),e._v(" "),s("h3",{attrs:{id:"_2-1-3-示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3-示例"}},[e._v("#")]),e._v(" 2.1.3 示例")]),e._v(" "),s("p",[e._v("让我们一起逐步分解来看看一个常见的小团队如何用这个工作流来协作的。有两个开发者小明和小红，看他们是如何开发自己的功能并提交到中央仓库上的。")]),e._v(" "),s("h4",{attrs:{id:"有人先初始化好中央仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有人先初始化好中央仓库"}},[e._v("#")]),e._v(" 有人先初始化好中央仓库")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/5.png",alt:""}})]),e._v(" "),s("p",[e._v("第一步，有人在服务器上创建好中央仓库。如果是新项目，你可以初始化一个空仓库；否则你要导入已有的"),s("code",[e._v("Git")]),e._v("或"),s("code",[e._v("SVN")]),e._v("仓库。")]),e._v(" "),s("p",[e._v("中央仓库应该是个裸仓库（"),s("code",[e._v("bare repository")]),e._v("），即没有工作目录（"),s("code",[e._v("working directory")]),e._v("）的仓库。可以用下面的命令创建：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ssh")]),e._v(" user@host\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" init --bare /path/to/repo.git\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("确保写上有效的"),s("code",[e._v("user")]),e._v("（"),s("code",[e._v("SSH")]),e._v("的用户名），"),s("code",[e._v("host")]),e._v("（服务器的域名或IP地址），"),s("code",[e._v("/path/to/repo.git")]),e._v("（你想存放仓库的位置）。\n注意，为了表示是一个裸仓库，按照约定加上"),s("code",[e._v(".git")]),e._v("扩展名到仓库名上。")]),e._v(" "),s("h4",{attrs:{id:"所有人克隆中央仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#所有人克隆中央仓库"}},[e._v("#")]),e._v(" 所有人克隆中央仓库")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/6.png",alt:""}})]),e._v(" "),s("p",[e._v("下一步，各个开发者创建整个项目的本地拷贝。通过"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/git-basics#!clone",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("git clone")]),s("OutboundLink")],1),e._v("命令完成：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone ssh://user@host/path/to/repo.git\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("基于你后续会持续和克隆的仓库做交互的假设，克隆仓库时"),s("code",[e._v("Git")]),e._v("会自动添加远程别名"),s("code",[e._v("origin")]),e._v("指回『父』仓库。")]),e._v(" "),s("h4",{attrs:{id:"小明开发功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小明开发功能"}},[e._v("#")]),e._v(" 小明开发功能")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/7.png",alt:""}})]),e._v(" "),s("p",[e._v("在小明的本地仓库中，他使用标准的"),s("code",[e._v("Git")]),e._v("过程开发功能：编辑、暂存（"),s("code",[e._v("Stage")]),e._v("）和提交。\n如果你不熟悉暂存区（"),s("code",[e._v("Staging Area")]),e._v("），这里说明一下："),s("strong",[e._v("暂存区")]),e._v("用来准备一个提交，但可以不用把工作目录中所有的修改内容都包含进来。\n这样你可以创建一个高度聚焦的提交，尽管你本地修改很多内容。")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" status "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查看本地仓库的修改状态")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 暂存文件")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" commit "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 提交文件")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("请记住，因为这些命令生成的是本地提交，小明可以按自己需求反复操作多次，而不用担心中央仓库上有了什么操作。\n对需要多个更简单更原子分块的大功能，这个做法是很有用的。")]),e._v(" "),s("h4",{attrs:{id:"小红开发功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小红开发功能"}},[e._v("#")]),e._v(" 小红开发功能")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/8.png",alt:""}})]),e._v(" "),s("p",[e._v("与此同时，小红在自己的本地仓库中用相同的编辑、暂存和提交过程开发功能。和小明一样，她也不关心中央仓库有没有新提交；\n当然更不关心小明在他的本地仓库中的操作，因为所有本地仓库都是私有的。")]),e._v(" "),s("h4",{attrs:{id:"小明发布功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小明发布功能"}},[e._v("#")]),e._v(" 小明发布功能")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/9.png",alt:""}})]),e._v(" "),s("p",[e._v("一旦小明完成了他的功能开发，会发布他的本地提交到中央仓库中，这样其它团队成员可以看到他的修改。他可以用下面的"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/remote-repositories#!push",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("git push")]),e._v("命令"),s("OutboundLink")],1),e._v("：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push origin master\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("注意，"),s("code",[e._v("origin")]),e._v("是在小明克隆仓库时"),s("code",[e._v("Git")]),e._v("创建的远程中央仓库别名。"),s("code",[e._v("master")]),e._v("参数告诉"),s("code",[e._v("Git")]),e._v("推送的分支。\n由于中央仓库自从小明克隆以来还没有被更新过，所以"),s("code",[e._v("push")]),e._v("操作不会有冲突，成功完成。")]),e._v(" "),s("h4",{attrs:{id:"小红试着发布功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小红试着发布功能"}},[e._v("#")]),e._v(" 小红试着发布功能")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/10.png",alt:""}})]),e._v(" "),s("p",[e._v("一起来看看在小明发布修改后，小红"),s("code",[e._v("push")]),e._v("修改会怎么样？她使用完全一样的"),s("code",[e._v("push")]),e._v("命令：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push origin master\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("但她的本地历史已经和中央仓库有分岐了，"),s("code",[e._v("Git")]),e._v("拒绝操作并给出下面很长的出错消息：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("error: failed to push some refs to '/path/to/repo.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Merge the remote changes (e.g. 'git pull')\nhint: before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("这避免了小红覆写正式的提交。她要先"),s("code",[e._v("pull")]),e._v("小明的更新到她的本地仓库合并上她的本地修改后，再重试。")]),e._v(" "),s("h4",{attrs:{id:"小红在小明的提交之上rebase"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小红在小明的提交之上rebase"}},[e._v("#")]),e._v(" 小红在小明的提交之上"),s("code",[e._v("rebase")])]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/11.png",alt:""}})]),e._v(" "),s("p",[e._v("小红用"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/remote-repositories#!pull",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("git pull")]),s("OutboundLink")],1),e._v("合并上游的修改到自己的仓库中。\n这条命令类似"),s("code",[e._v("svn update")]),e._v("——拉取所有上游提交命令到小红的本地仓库，并尝试和她的本地修改合并：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" pull --rebase origin master\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("code",[e._v("--rebase")]),e._v("选项告诉"),s("code",[e._v("Git")]),e._v("把小红的提交移到同步了中央仓库修改后的"),s("code",[e._v("master")]),e._v("分支的顶部，如下图所示：")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/12.png",alt:""}})]),e._v(" "),s("p",[e._v("如果你忘加了这个选项，"),s("code",[e._v("pull")]),e._v("操作仍然可以完成，但每次"),s("code",[e._v("pull")]),e._v("操作要同步中央仓库中别人修改时，提交历史会以一个多余的『合并提交』结尾。\n对于集中式工作流，最好是使用"),s("code",[e._v("rebase")]),e._v("而不是生成一个合并提交。")]),e._v(" "),s("h4",{attrs:{id:"小红解决合并冲突"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小红解决合并冲突"}},[e._v("#")]),e._v(" 小红解决合并冲突")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/13.png",alt:""}})]),e._v(" "),s("p",[s("code",[e._v("rebase")]),e._v("操作过程是把本地提交一次一个地迁移到更新了的中央仓库"),s("code",[e._v("master")]),e._v("分支之上。\n这意味着可能要解决在迁移某个提交时出现的合并冲突，而不是解决包含了所有提交的大型合并时所出现的冲突。\n这样的方式让你尽可能保持每个提交的聚焦和项目历史的整洁。反过来，简化了哪里引入"),s("code",[e._v("Bug")]),e._v("的分析，如果有必要，回滚修改也可以做到对项目影响最小。")]),e._v(" "),s("p",[e._v("如果小红和小明的功能是不相关的，不大可能在"),s("code",[e._v("rebase")]),e._v("过程中有冲突。如果有，"),s("code",[e._v("Git")]),e._v("在合并有冲突的提交处暂停"),s("code",[e._v("rebase")]),e._v("过程，输出下面的信息并带上相关的指令：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("CONFLICT (content): Merge conflict in <some-file>\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/14.png",alt:""}})]),e._v(" "),s("p",[s("code",[e._v("Git")]),e._v("很赞的一点是，任何人可以解决他自己的冲突。在这个例子中，小红可以简单的运行"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/git-basics#!status",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("git status")]),s("OutboundLink")],1),e._v("命令来查看哪里有问题。\n冲突文件列在"),s("code",[e._v("Unmerged paths")]),e._v("（未合并路径）一节中：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('# Unmerged paths:\n# (use "git reset HEAD <some-file>..." to unstage)\n# (use "git add/rm <some-file>..." as appropriate to mark resolution)\n#\n# both modified: <some-file>\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("接着小红编辑这些文件。修改完成后，用老套路暂存这些文件，并让"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/rewriting-git-history#!rebase",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("git rebase")]),s("OutboundLink")],1),e._v("完成剩下的事：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("some-file"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" \n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" rebase --continue\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("要做的就这些了。"),s("code",[e._v("Git")]),e._v("会继续一个一个地合并后面的提交，如其它的提交有冲突就重复这个过程。")]),e._v(" "),s("p",[e._v("如果你碰到了冲突，但发现搞不定，不要惊慌。只要执行下面这条命令，就可以回到你执行"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/remote-repositories#!pull",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("git pull --rebase")]),s("OutboundLink")],1),e._v("命令前的样子：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" rebase --abort\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h4",{attrs:{id:"小红成功发布功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小红成功发布功能"}},[e._v("#")]),e._v(" 小红成功发布功能")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/15.png",alt:""}})]),e._v(" "),s("p",[e._v("小红完成和中央仓库的同步后，就能成功发布她的修改了：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push origin master\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("如你所见，仅使用几个"),s("code",[e._v("Git")]),e._v("命令我们就可以模拟出传统"),s("code",[e._v("Subversion")]),e._v("开发环境。对于要从"),s("code",[e._v("SVN")]),e._v("迁移过来的团队来说这太好了，但没有发挥出"),s("code",[e._v("Git")]),e._v("分布式本质的优势。")]),e._v(" "),s("p",[e._v("如果你的团队适应了集中式工作流，但想要更流畅的协作效果，绝对值得探索一下 "),s("code",[e._v("功能分支工作流")]),e._v(" 的收益。\n通过为一个功能分配一个专门的分支，能够做到一个新增功能集成到正式项目之前对新功能进行深入讨论。")]),e._v(" "),s("hr"),e._v(" "),s("h2",{attrs:{id:"_2-2-功能分支工作流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-功能分支工作流"}},[e._v("#")]),e._v(" 2.2 功能分支工作流")]),e._v(" "),s("p",[e._v("功能分支工作流以集中式工作流为基础，不同的是为各个新功能分配一个专门的分支来开发。这样可以在把新功能集成到正式项目前，用"),s("code",[e._v("Pull Requests")]),e._v("的方式讨论变更。")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/16.png",alt:"Git Workflows: Feature Branch"}})]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/16.5.png",alt:""}})]),e._v(" "),s("p",[e._v("一旦你玩转了"),s("RouterLink",{attrs:{to:"/navitem/git/notes/workflow-centralized.html"}},[e._v("集中式工作流")]),e._v("，在开发过程中可以很简单地加上功能分支，用来鼓励开发者之间协作和简化交流。")],1),e._v(" "),s("p",[e._v("功能分支工作流背后的核心思路是所有的功能开发应该在一个专门的分支，而不是在"),s("code",[e._v("master")]),e._v("分支上。\n这个隔离可以方便多个开发者在各自的功能上开发而不会弄乱主干代码。\n另外，也保证了"),s("code",[e._v("master")]),e._v("分支的代码一定不会是有问题的，极大有利于集成环境。")]),e._v(" "),s("p",[e._v("功能开发隔离也让"),s("RouterLink",{attrs:{to:"/navitem/git/notes/pull-request.html"}},[s("code",[e._v("pull requests")]),e._v("工作流")]),e._v("成功可能，\n"),s("code",[e._v("pull requests")]),e._v("工作流能为每个分支发起一个讨论，在分支合入正式项目之前，给其它开发者有表示赞同的机会。\n另外，如果你在功能开发中有问题卡住了，可以开一个"),s("code",[e._v("pull requests")]),e._v("来向同学们征求建议。\n这些做法的重点就是，"),s("code",[e._v("pull requests")]),e._v("让团队成员之间互相评论工作变成非常方便！")],1),e._v(" "),s("h3",{attrs:{id:"_2-2-1-工作方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-工作方式"}},[e._v("#")]),e._v(" 2.2.1 工作方式")]),e._v(" "),s("p",[e._v("功能分支工作流仍然用中央仓库，并且"),s("code",[e._v("master")]),e._v("分支还是代表了正式项目的历史。\n但不是直接提交本地历史到各自的本地"),s("code",[e._v("master")]),e._v("分支，开发者每次在开始新功能前先创建一个新分支。\n功能分支应该有个有描述性的名字，比如"),s("code",[e._v("animated-menu-items")]),e._v("或"),s("code",[e._v("issue-#1061")]),e._v("，这样可以让分支有个清楚且高聚焦的用途。")]),e._v(" "),s("p",[e._v("对于"),s("code",[e._v("master")]),e._v("分支和功能分支，"),s("code",[e._v("Git")]),e._v("是没有技术上的区别，所以开发者可以用和集中式工作流中完全一样的方式编辑、暂存和提交修改到功能分支上。")]),e._v(" "),s("p",[e._v("另外，功能分支也可以（且应该）"),s("code",[e._v("push")]),e._v("到中央仓库中。这样不修改正式代码就可以和其它开发者分享提交的功能。\n由于"),s("code",[e._v("master")]),e._v("是仅有的一个『特殊』分支，在中央仓库上存多个功能分支不会有任何问题。当然，这样做也可以很方便地备份各自的本地提交。")]),e._v(" "),s("h3",{attrs:{id:"_2-2-2-pull-requests"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-pull-requests"}},[e._v("#")]),e._v(" 2.2.2 "),s("code",[e._v("Pull Requests")])]),e._v(" "),s("p",[e._v("功能分支除了可以隔离功能的开发，也使得通过"),s("RouterLink",{attrs:{to:"/navitem/git/notes/pull-request.html"}},[s("code",[e._v("Pull Requests")])]),e._v("讨论变更成为可能。\n一旦某个开发者完成一个功能，不是立即合并到"),s("code",[e._v("master")]),e._v("，而是"),s("code",[e._v("push")]),e._v("到中央仓库的功能分支上并发起一个"),s("code",[e._v("Pull Request")]),e._v("请求，将修改合并到"),s("code",[e._v("master")]),e._v("。\n在修改成为主干代码前，这让其它的开发者有机会先去"),s("code",[e._v("Review")]),e._v("变更。")],1),e._v(" "),s("p",[s("code",[e._v("Code Review")]),e._v("是"),s("code",[e._v("Pull Requests")]),e._v("的一个重要的收益，而"),s("code",[e._v("Pull Requests")]),e._v("则是讨论代码的一个通用方式。\n你可以把"),s("code",[e._v("Pull Requests")]),e._v("作为专门给某个分支的讨论。这意味着可以在更早的开发过程中就可以进行"),s("code",[e._v("Code Review")]),e._v("。\n比如，一个开发者开发功能需要帮助时，要做的就是发起一个"),s("code",[e._v("Pull Request")]),e._v("，相关的人就会自动收到通知，在相关的提交旁边能看到需要帮助解决的问题。")]),e._v(" "),s("p",[e._v("一旦"),s("code",[e._v("Pull Request")]),e._v("被接受了，发布功能要做的就和集中式工作流就很像了。\n首先，确定本地的"),s("code",[e._v("master")]),e._v("分支和上游的"),s("code",[e._v("master")]),e._v("分支是同步的。然后合并功能分支到本地"),s("code",[e._v("master")]),e._v("分支并"),s("code",[e._v("push")]),e._v("已经更新的本地"),s("code",[e._v("master")]),e._v("分支到中央仓库。")]),e._v(" "),s("p",[e._v("仓库管理的产品解决方案像"),s("a",{attrs:{href:"http://bitbucket.org/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("Bitbucket")]),s("OutboundLink")],1),e._v("或"),s("a",{attrs:{href:"http://www.atlassian.com/stash",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("Stash")]),s("OutboundLink")],1),e._v("，可以良好地支持"),s("code",[e._v("Pull Requests")]),e._v("。可以看看"),s("code",[e._v("Stash")]),e._v("的"),s("a",{attrs:{href:"https://confluence.atlassian.com/display/STASH/Using+pull+requests+in+Stash",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("Pull Requests")]),e._v("文档"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("h3",{attrs:{id:"_2-2-3-示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-示例"}},[e._v("#")]),e._v(" 2.2.3 示例")]),e._v(" "),s("p",[e._v("下面的示例演示了如何把"),s("code",[e._v("Pull Requests")]),e._v("作为"),s("code",[e._v("Code Review")]),e._v("的方式，但注意"),s("code",[e._v("Pull Requests")]),e._v("可以用于很多其它的目的。")]),e._v(" "),s("h4",{attrs:{id:"小红开始开发一个新功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小红开始开发一个新功能"}},[e._v("#")]),e._v(" 小红开始开发一个新功能")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/17.png",alt:""}})]),e._v(" "),s("p",[e._v("在开始开发功能前，小红需要一个独立的分支。使用下面的命令"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/git-branches#!checkout",target:"_blank",rel:"noopener noreferrer"}},[e._v("新建一个分支"),s("OutboundLink")],1),e._v("：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout -b marys-feature master\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("这个命令检出一个基于"),s("code",[e._v("master")]),e._v("名为"),s("code",[e._v("marys-feature")]),e._v("的分支，"),s("code",[e._v("Git")]),e._v("的"),s("code",[e._v("-b")]),e._v("选项表示如果分支还不存在则新建分支。\n这个新分支上，小红按老套路编辑、暂存和提交修改，按需要提交以实现功能：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" status\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("some-file"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" commit\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h4",{attrs:{id:"小红要去吃个午饭"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小红要去吃个午饭"}},[e._v("#")]),e._v(" 小红要去吃个午饭")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/18.png",alt:""}})]),e._v(" "),s("p",[e._v("早上小红为新功能添加一些提交。\n去吃午饭前，"),s("code",[e._v("push")]),e._v("功能分支到中央仓库是很好的做法，这样可以方便地备份，如果和其它开发协作，也让他们可以看到小红的提交。")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push -u origin marys-feature\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("这条命令"),s("code",[e._v("push")]),e._v(" "),s("code",[e._v("marys-feature")]),e._v("分支到中央仓库（"),s("code",[e._v("origin")]),e._v("），"),s("code",[e._v("-u")]),e._v("选项设置本地分支去跟踪远程对应的分支。\n设置好跟踪的分支后，小红就可以使用"),s("code",[e._v("git push")]),e._v("命令省去指定推送分支的参数。")]),e._v(" "),s("h4",{attrs:{id:"小红完成功能开发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小红完成功能开发"}},[e._v("#")]),e._v(" 小红完成功能开发")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/19.png",alt:""}})]),e._v(" "),s("p",[e._v("小红吃完午饭回来，完成整个功能的开发。"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/git-branches#!merge",target:"_blank",rel:"noopener noreferrer"}},[e._v("在合并到"),s("code",[e._v("master")]),e._v("之前"),s("OutboundLink")],1),e._v("，\n她发起一个"),s("code",[e._v("Pull Request")]),e._v("让团队的其它人知道功能已经完成。但首先，她要确认中央仓库中已经有她最近的提交：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("然后，在她的"),s("code",[e._v("Git")]),e._v(" "),s("code",[e._v("GUI")]),e._v("客户端中发起"),s("code",[e._v("Pull Request")]),e._v("，请求合并"),s("code",[e._v("marys-feature")]),e._v("到"),s("code",[e._v("master")]),e._v("，团队成员会自动收到通知。\n"),s("code",[e._v("Pull Request")]),e._v("很酷的是可以在相关的提交旁边显示评注，所以你可以对某个变更集提问。")]),e._v(" "),s("h4",{attrs:{id:"小黑收到pull-request"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小黑收到pull-request"}},[e._v("#")]),e._v(" 小黑收到"),s("code",[e._v("Pull Request")])]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/20.png",alt:""}})]),e._v(" "),s("p",[e._v("小黑收到了"),s("code",[e._v("Pull Request")]),e._v("后会查看"),s("code",[e._v("marys-feature")]),e._v("的修改。决定在合并到正式项目前是否要做些修改，且通过"),s("code",[e._v("Pull Request")]),e._v("和小红来回地讨论。")]),e._v(" "),s("h4",{attrs:{id:"小红再做修改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小红再做修改"}},[e._v("#")]),e._v(" 小红再做修改")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/21.png",alt:""}})]),e._v(" "),s("p",[e._v("要再做修改，小红用和功能第一个迭代完全一样的过程。编辑、暂存、提交并"),s("code",[e._v("push")]),e._v("更新到中央仓库。小红这些活动都会显示在"),s("code",[e._v("Pull Request")]),e._v("上，小黑可以断续做评注。")]),e._v(" "),s("p",[e._v("如果小黑有需要，也可以把"),s("code",[e._v("marys-feature")]),e._v("分支拉到本地，自己来修改，他加的提交也会一样显示在"),s("code",[e._v("Pull Request")]),e._v("上。")]),e._v(" "),s("h4",{attrs:{id:"小红发布她的功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小红发布她的功能"}},[e._v("#")]),e._v(" 小红发布她的功能")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/22.png",alt:""}})]),e._v(" "),s("p",[e._v("一旦小黑可以的接受"),s("code",[e._v("Pull Request")]),e._v("，就可以合并功能到稳定项目代码中（可以由小黑或是小红来做这个操作）：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout master\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" pull\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" pull origin marys-feature\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("无论谁来做合并，首先要检出"),s("code",[e._v("master")]),e._v("分支并确认是它是最新的。然后执行"),s("code",[e._v("git pull origin marys-feature")]),e._v("合并"),s("code",[e._v("marys-feature")]),e._v("分支到和已经和远程一致的本地"),s("code",[e._v("master")]),e._v("分支。\n你可以使用简单"),s("code",[e._v("git merge marys-feature")]),e._v("命令，但前面的命令可以保证总是最新的新功能分支。\n最后更新的"),s("code",[e._v("master")]),e._v("分支要重新"),s("code",[e._v("push")]),e._v("回到"),s("code",[e._v("origin")]),e._v("。")]),e._v(" "),s("p",[e._v("这个过程常常会生成一个合并提交。有些开发者喜欢有合并提交，因为它像一个新功能和原来代码基线的连通符。\n但如果你偏爱线性的提交历史，可以在执行合并时"),s("code",[e._v("rebase")]),e._v("新功能到"),s("code",[e._v("master")]),e._v("分支的顶部，这样生成一个快进（"),s("code",[e._v("fast-forward")]),e._v("）的合并。")]),e._v(" "),s("p",[e._v("一些"),s("code",[e._v("GUI")]),e._v("客户端可以只要点一下『接受』按钮执行好上面的命令来自动化"),s("code",[e._v("Pull Request")]),e._v("接受过程。\n如果你的不能这样，至少在功能合并到"),s("code",[e._v("master")]),e._v("分支后能自动关闭"),s("code",[e._v("Pull Request")]),e._v("。")]),e._v(" "),s("h4",{attrs:{id:"与此同时，小明在做和小红一样的事"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#与此同时，小明在做和小红一样的事"}},[e._v("#")]),e._v(" 与此同时，小明在做和小红一样的事")]),e._v(" "),s("p",[e._v("当小红和小黑在"),s("code",[e._v("marys-feature")]),e._v("上工作并讨论她的"),s("code",[e._v("Pull Request")]),e._v("的时候，小明在自己的功能分支上做完全一样的事。")]),e._v(" "),s("p",[e._v("通过隔离功能到独立的分支上，每个人都可以自主的工作，当然必要的时候在开发者之间分享变更还是比较繁琐的。")]),e._v(" "),s("p",[e._v("到了这里，但愿你发现了功能分支可以很直接地在 "),s("code",[e._v("集中式工作流")]),e._v(" 的仅有的"),s("code",[e._v("master")]),e._v("分支上完成多功能的开发。\n另外，功能分支还使用了"),s("code",[e._v("Pull Request")]),e._v("，使得可以在你的版本控制"),s("code",[e._v("GUI")]),e._v("客户端中讨论某个提交。")]),e._v(" "),s("p",[e._v("功能分支工作流是开发项目异常灵活的方式。问题是，有时候太灵活了。对于大型团队，常常需要给不同分支分配一个更具体的角色。\n"),s("code",[e._v("Gitflow")]),e._v("工作流是管理功能开发、发布准备和维护的常用模式。")]),e._v(" "),s("hr"),e._v(" "),s("h2",{attrs:{id:"_2-3-gitflow工作流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-gitflow工作流"}},[e._v("#")]),e._v(" 2.3 "),s("code",[e._v("Gitflow")]),e._v("工作流")]),e._v(" "),s("p",[s("code",[e._v("Gitflow")]),e._v("工作流通过为功能开发、发布准备和维护分配独立的分支，让发布迭代过程更流畅。严格的分支模型也为大型项目提供了一些非常必要的结构。")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/23.png",alt:"Git Workflows: Gitflow Cycle"}})]),e._v(" "),s("p",[e._v("这节介绍的"),s("a",{attrs:{href:"http://nvie.com/posts/a-successful-git-branching-model/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("Gitflow")]),e._v("工作流"),s("OutboundLink")],1),e._v("借鉴自在"),s("a",{attrs:{href:"http://nvie.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("nvie"),s("OutboundLink")],1),e._v("的"),s("em",[e._v("Vincent Driessen")]),e._v("。")]),e._v(" "),s("p",[s("code",[e._v("Gitflow")]),e._v("工作流定义了一个围绕项目发布的严格分支模型。虽然比"),s("RouterLink",{attrs:{to:"/navitem/git/notes/workflow-feature-branch.html"}},[e._v("功能分支工作流")]),e._v("复杂几分，但提供了用于一个健壮的用于管理大型项目的框架。")],1),e._v(" "),s("p",[s("code",[e._v("Gitflow")]),e._v("工作流没有用超出功能分支工作流的概念和命令，而是为不同的分支分配一个明确的角色，并定义分支之间如何和什么时候进行交互。\n除了使用功能分支，在做准备、维护和记录发布时，也定义了各自的分支。\n当然你可以用上功能分支工作流所有的好处："),s("code",[e._v("Pull Requests")]),e._v("、隔离实验性开发和更高效的协作。")]),e._v(" "),s("h3",{attrs:{id:"_2-3-1-工作方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-工作方式"}},[e._v("#")]),e._v(" 2.3.1 工作方式")]),e._v(" "),s("p",[s("code",[e._v("Gitflow")]),e._v("工作流仍然用中央仓库作为所有开发者的交互中心。和其它的工作流一样，开发者在本地工作并"),s("code",[e._v("push")]),e._v("分支到要中央仓库中。")]),e._v(" "),s("h3",{attrs:{id:"_2-3-2-历史分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-历史分支"}},[e._v("#")]),e._v(" 2.3.2 历史分支")]),e._v(" "),s("p",[e._v("相对于使用仅有的一个"),s("code",[e._v("master")]),e._v("分支，"),s("code",[e._v("Gitflow")]),e._v("工作流使用两个分支来记录项目的历史。"),s("code",[e._v("master")]),e._v("分支存储了正式发布的历史，而"),s("code",[e._v("develop")]),e._v("分支作为功能的集成分支。\n这样也方便"),s("code",[e._v("master")]),e._v("分支上的所有提交分配一个版本号。")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/24.png",alt:""}})]),e._v(" "),s("p",[e._v("剩下要说明的问题围绕着这2个分支的区别展开。")]),e._v(" "),s("h3",{attrs:{id:"_2-3-3-功能分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-3-功能分支"}},[e._v("#")]),e._v(" 2.3.3 功能分支")]),e._v(" "),s("p",[e._v("每个新功能位于一个自己的分支，这样可以"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/remote-repositories#!push",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("push")]),e._v("到中央仓库以备份和协作"),s("OutboundLink")],1),e._v("。\n但功能分支不是从"),s("code",[e._v("master")]),e._v("分支上拉出新分支，而是使用"),s("code",[e._v("develop")]),e._v("分支作为父分支。当新功能完成时，"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/git-branches#!merge",target:"_blank",rel:"noopener noreferrer"}},[e._v("合并回"),s("code",[e._v("develop")]),e._v("分支"),s("OutboundLink")],1),e._v("。\n新功能提交应该从不直接与"),s("code",[e._v("master")]),e._v("分支交互。")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/25.png",alt:""}})]),e._v(" "),s("p",[e._v("注意，从各种含义和目的上来看，功能分支加上"),s("code",[e._v("develop")]),e._v("分支就是功能分支工作流的用法。但"),s("code",[e._v("Gitflow")]),e._v("工作流没有在这里止步。")]),e._v(" "),s("h3",{attrs:{id:"_2-3-4-发布分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-4-发布分支"}},[e._v("#")]),e._v(" 2.3.4 发布分支")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/26.png",alt:""}})]),e._v(" "),s("p",[e._v("一旦"),s("code",[e._v("develop")]),e._v("分支上有了做一次发布（或者说快到了既定的发布日）的足够功能，就从"),s("code",[e._v("develop")]),e._v("分支上"),s("code",[e._v("checkout")]),e._v("一个发布分支。\n新建的分支用于开始发布循环，所以从这个时间点开始之后新的功能不能再加到这个分支上——\n这个分支只应该做"),s("code",[e._v("Bug")]),e._v("修复、文档生成和其它面向发布任务。\n一旦对外发布的工作都完成了，发布分支合并到"),s("code",[e._v("master")]),e._v("分支并分配一个版本号打好"),s("code",[e._v("Tag")]),e._v("。\n另外，这些从新建发布分支以来的做的修改要合并回"),s("code",[e._v("develop")]),e._v("分支。")]),e._v(" "),s("p",[e._v("使用一个用于发布准备的专门分支，使得一个团队可以在完善当前的发布版本的同时，另一个团队可以继续开发下个版本的功能。\n这也打造定义良好的开发阶段（比如，可以很轻松地说，『这周我们要做准备发布版本4.0』，并且在仓库的目录结构中可以实际看到）。")]),e._v(" "),s("p",[e._v("常用的分支约定：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("用于新建发布分支的分支: develop\n用于合并的分支: master\n分支命名: release-* 或 release/*\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h3",{attrs:{id:"_2-3-5-维护分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-5-维护分支"}},[e._v("#")]),e._v(" 2.3.5 维护分支")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/27.png",alt:""}})]),e._v(" "),s("p",[e._v("维护分支或说是热修复（"),s("code",[e._v("hotfix")]),e._v("）分支用于给产品发布版本（"),s("code",[e._v("production releases")]),e._v("）快速生成补丁，这是唯一可以直接从"),s("code",[e._v("master")]),e._v("分支"),s("code",[e._v("fork")]),e._v("出来的分支。\n修复完成，修改应该马上合并回"),s("code",[e._v("master")]),e._v("分支和"),s("code",[e._v("develop")]),e._v("分支（当前的发布分支），"),s("code",[e._v("master")]),e._v("分支应该用新的版本号打好"),s("code",[e._v("Tag")]),e._v("。")]),e._v(" "),s("p",[e._v("为"),s("code",[e._v("Bug")]),e._v("修复使用专门分支，让团队可以处理掉问题而不用打断其它工作或是等待下一个发布循环。\n你可以把维护分支想成是一个直接在"),s("code",[e._v("master")]),e._v("分支上处理的临时发布。")]),e._v(" "),s("h3",{attrs:{id:"_2-3-6-示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-6-示例"}},[e._v("#")]),e._v(" 2.3.6 示例")]),e._v(" "),s("p",[e._v("下面的示例演示本工作流如何用于管理单个发布循环。假设你已经创建了一个中央仓库。")]),e._v(" "),s("h4",{attrs:{id:"创建开发分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建开发分支"}},[e._v("#")]),e._v(" 创建开发分支")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/28.png",alt:""}})]),e._v(" "),s("p",[e._v("第一步为"),s("code",[e._v("master")]),e._v("分支配套一个"),s("code",[e._v("develop")]),e._v("分支。简单来做可以"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/git-branches#!branch",target:"_blank",rel:"noopener noreferrer"}},[e._v("本地创建一个空的"),s("code",[e._v("develop")]),e._v("分支"),s("OutboundLink")],1),e._v("，"),s("code",[e._v("push")]),e._v("到服务器上：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" branch develop\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push -u origin develop\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("以后这个分支将会包含了项目的全部历史，而"),s("code",[e._v("master")]),e._v("分支将只包含了部分历史。其它开发者这时应该"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/git-basics#!clone",target:"_blank",rel:"noopener noreferrer"}},[e._v("克隆中央仓库"),s("OutboundLink")],1),e._v("，建好"),s("code",[e._v("develop")]),e._v("分支的跟踪分支：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone ssh://user@host/path/to/repo.git\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout -b develop origin/develop\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("现在每个开发都有了这些历史分支的本地拷贝。")]),e._v(" "),s("h4",{attrs:{id:"小红和小明开始开发新功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小红和小明开始开发新功能"}},[e._v("#")]),e._v(" 小红和小明开始开发新功能")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/29.png",alt:""}})]),e._v(" "),s("p",[e._v("这个示例中，小红和小明开始各自的功能开发。他们需要为各自的功能创建相应的分支。新分支不是基于"),s("code",[e._v("master")]),e._v("分支，而是应该"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/git-branches#!checkout",target:"_blank",rel:"noopener noreferrer"}},[e._v("基于"),s("code",[e._v("develop")]),e._v("分支"),s("OutboundLink")],1),e._v("：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout -b some-feature develop\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("他们用老套路添加提交到各自功能分支上：编辑、暂存、提交：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" status\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("some-file"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" commit\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h4",{attrs:{id:"小红完成功能开发-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小红完成功能开发-2"}},[e._v("#")]),e._v(" 小红完成功能开发")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/30.png",alt:""}})]),e._v(" "),s("p",[e._v("添加了提交后，小红觉得她的功能OK了。如果团队使用"),s("code",[e._v("Pull Requests")]),e._v("，这时候可以发起一个用于合并到"),s("code",[e._v("develop")]),e._v("分支。\n否则她可以直接合并到她本地的"),s("code",[e._v("develop")]),e._v("分支后"),s("code",[e._v("push")]),e._v("到中央仓库：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" pull origin develop\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout develop\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" merge some-feature\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" branch -d some-feature\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("第一条命令在合并功能前确保"),s("code",[e._v("develop")]),e._v("分支是最新的。注意，功能决不应该直接合并到"),s("code",[e._v("master")]),e._v("分支。\n冲突解决方法和"),s("RouterLink",{attrs:{to:"/navitem/git/notes/workflow-centralized.html"}},[e._v("集中式工作流")]),e._v("一样。")],1),e._v(" "),s("h4",{attrs:{id:"小红开始准备发布"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小红开始准备发布"}},[e._v("#")]),e._v(" 小红开始准备发布")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/31.png",alt:""}})]),e._v(" "),s("p",[e._v("这个时候小明正在实现他的功能，小红开始准备她的第一个项目正式发布。\n像功能开发一样，她用一个新的分支来做发布准备。这一步也确定了发布的版本号：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout -b release-0.1 develop\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("这个分支是清理发布、执行所有测试、更新文档和其它为下个发布做准备操作的地方，像是一个专门用于改善发布的功能分支。")]),e._v(" "),s("p",[e._v("只要小红创建这个分支并"),s("code",[e._v("push")]),e._v("到中央仓库，这个发布就是功能冻结的。任何不在"),s("code",[e._v("develop")]),e._v("分支中的新功能都推到下个发布循环中。")]),e._v(" "),s("h4",{attrs:{id:"小红完成发布"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小红完成发布"}},[e._v("#")]),e._v(" 小红完成发布")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/32.png",alt:""}})]),e._v(" "),s("p",[e._v("一旦准备好了对外发布，小红合并修改到"),s("code",[e._v("master")]),e._v("分支和"),s("code",[e._v("develop")]),e._v("分支上，删除发布分支。合并回"),s("code",[e._v("develop")]),e._v("分支很重要，因为在发布分支中已经提交的更新需要在后面的新功能中也要是可用的。\n另外，如果小红的团队要求"),s("code",[e._v("Code Review")]),e._v("，这是一个发起"),s("code",[e._v("Pull Request")]),e._v("的理想时机。")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout master\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" merge release-0.1\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout develop\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" merge release-0.1\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" branch -d release-0.1\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[e._v("发布分支是作为功能开发（"),s("code",[e._v("develop")]),e._v("分支）和对外发布（"),s("code",[e._v("master")]),e._v("分支）间的缓冲。只要有合并到"),s("code",[e._v("master")]),e._v("分支，就应该打好"),s("code",[e._v("Tag")]),e._v("以方便跟踪。")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" tag -a "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.1")]),e._v(" -m "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Initial public release"')]),e._v(" master\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push --tags\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[s("code",[e._v("Git")]),e._v("有提供各种勾子（"),s("code",[e._v("hook")]),e._v("），即仓库有事件发生时触发执行的脚本。\n可以配置一个勾子，在你"),s("code",[e._v("push")]),e._v("中央仓库的"),s("code",[e._v("master")]),e._v("分支时，自动构建好版本，并对外发布。")]),e._v(" "),s("h4",{attrs:{id:"最终用户发现bug"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最终用户发现bug"}},[e._v("#")]),e._v(" 最终用户发现"),s("code",[e._v("Bug")])]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/33.png",alt:""}})]),e._v(" "),s("p",[e._v("对外版本发布后，小红小明一起开发下一版本的新功能，直到有最终用户开了一个"),s("code",[e._v("Ticket")]),e._v("抱怨当前版本的一个"),s("code",[e._v("Bug")]),e._v("。\n为了处理"),s("code",[e._v("Bug")]),e._v("，小红（或小明）从"),s("code",[e._v("master")]),e._v("分支上拉出了一个维护分支，提交修改以解决问题，然后直接合并回"),s("code",[e._v("master")]),e._v("分支：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout -b issue-"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#001 master")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Fix the bug")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout master\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" merge issue-"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#001")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("就像发布分支，维护分支中新加这些重要修改需要包含到"),s("code",[e._v("develop")]),e._v("分支中，所以小红要执行一个合并操作。然后就可以安全地"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/git-branches#!branch",target:"_blank",rel:"noopener noreferrer"}},[e._v("删除这个分支"),s("OutboundLink")],1),e._v("了：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout develop\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" merge issue-"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#001")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" branch -d issue-"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#001")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("到了这里，但愿你对"),s("RouterLink",{attrs:{to:"/navitem/git/notes/workflow-centralized.html"}},[e._v("集中式工作流")]),e._v("、"),s("RouterLink",{attrs:{to:"/navitem/git/notes/workflow-feature-branch.html"}},[e._v("功能分支工作流")]),e._v("和"),s("code",[e._v("Gitflow")]),e._v("工作流已经感觉很舒适了。\n你应该也牢固的掌握了本地仓库的潜能，"),s("code",[e._v("push")]),e._v("/"),s("code",[e._v("pull")]),e._v("模式和"),s("code",[e._v("Git")]),e._v("健壮的分支和合并模型。")],1),e._v(" "),s("p",[e._v("记住，这里演示的工作流只是可能用法的例子，而不是在实际工作中使用"),s("code",[e._v("Git")]),e._v("不可违逆的条例。\n所以不要畏惧按自己需要对工作流的用法做取舍。不变的目标就是让"),s("code",[e._v("Git")]),e._v("为你所用。")]),e._v(" "),s("hr"),e._v(" "),s("h2",{attrs:{id:"_2-4-forking工作流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-forking工作流"}},[e._v("#")]),e._v(" 2.4 "),s("code",[e._v("Forking")]),e._v("工作流")]),e._v(" "),s("p",[s("code",[e._v("Forking")]),e._v("工作流是分布式工作流，充分利用了"),s("code",[e._v("Git")]),e._v("在分支和克隆上的优势。可以安全可靠地管理大团队的开发者（"),s("code",[e._v("developer")]),e._v("），并能接受不信任贡献者（"),s("code",[e._v("contributor")]),e._v("）的提交。")]),e._v(" "),s("p",[s("code",[e._v("Forking")]),e._v("工作流和前面讨论的几种工作流有根本的不同，这种工作流不是使用单个服务端仓库作为『中央』代码基线，而让各个开发者都有一个服务端仓库。这意味着各个代码贡献者有2个"),s("code",[e._v("Git")]),e._v("仓库而不是1个：一个本地私有的，另一个服务端公开的。")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/34.png",alt:""}})]),e._v(" "),s("p",[s("code",[e._v("Forking")]),e._v("工作流的一个主要优势是，贡献的代码可以被集成，而不需要所有人都能"),s("code",[e._v("push")]),e._v("代码到仅有的中央仓库中。\n开发者"),s("code",[e._v("push")]),e._v("到自己的服务端仓库，而只有项目维护者才能"),s("code",[e._v("push")]),e._v("到正式仓库。\n这样项目维护者可以接受任何开发者的提交，但无需给他正式代码库的写权限。")]),e._v(" "),s("p",[e._v("效果就是一个分布式的工作流，能为大型、自发性的团队（包括了不受信的第三方）提供灵活的方式来安全的协作。\n也让这个工作流成为开源项目的理想工作流。")]),e._v(" "),s("h3",{attrs:{id:"_2-4-1-工作方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-1-工作方式"}},[e._v("#")]),e._v(" 2.4.1 工作方式")]),e._v(" "),s("p",[e._v("和其它的"),s("code",[e._v("Git")]),e._v("工作流一样，"),s("code",[e._v("Forking")]),e._v("工作流要先有一个公开的正式仓库存储在服务器上。\n但一个新的开发者想要在项目上工作时，不是直接从正式仓库克隆，而是"),s("code",[e._v("fork")]),e._v("正式项目在服务器上创建一个拷贝。")]),e._v(" "),s("p",[e._v("这个仓库拷贝作为他个人公开仓库 ——\n其它开发者不允许"),s("code",[e._v("push")]),e._v("到这个仓库，但可以"),s("code",[e._v("pull")]),e._v("到修改（后面我们很快就会看这点很重要）。\n在创建了自己服务端拷贝之后，和之前的工作流一样，开发者执行"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/git-basics#!clone",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("git clone")]),e._v("命令"),s("OutboundLink")],1),e._v("克隆仓库到本地机器上，作为私有的开发环境。")]),e._v(" "),s("p",[e._v("要提交本地修改时，"),s("code",[e._v("push")]),e._v("提交到自己公开仓库中 —— 而不是正式仓库中。\n然后，给正式仓库发起一个"),s("code",[e._v("pull request")]),e._v("，让项目维护者知道有更新已经准备好可以集成了。\n对于贡献的代码，"),s("code",[e._v("pull request")]),e._v("也可以很方便地作为一个讨论的地方。")]),e._v(" "),s("p",[e._v("为了集成功能到正式代码库，维护者"),s("code",[e._v("pull")]),e._v("贡献者的变更到自己的本地仓库中，检查变更以确保不会让项目出错，\n"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/git-branches#!merge",target:"_blank",rel:"noopener noreferrer"}},[e._v("合并变更到自己本地的"),s("code",[e._v("master")]),e._v("分支"),s("OutboundLink")],1),e._v("，\n然后"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/remote-repositories#!push",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("push")]),s("OutboundLink")],1),s("code",[e._v("master")]),e._v("分支到服务器的正式仓库中。\n到此，贡献的提交成为了项目的一部分，其它的开发者应该执行"),s("code",[e._v("pull")]),e._v("操作与正式仓库同步自己本地仓库。")]),e._v(" "),s("h3",{attrs:{id:"_2-4-2-正式仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-2-正式仓库"}},[e._v("#")]),e._v(" 2.4.2 正式仓库")]),e._v(" "),s("p",[e._v("在"),s("code",[e._v("Forking")]),e._v("工作流中，『官方』仓库的叫法只是一个约定，理解这点很重要。\n从技术上来看，各个开发者仓库和正式仓库在"),s("code",[e._v("Git")]),e._v("看来没有任何区别。\n事实上，让正式仓库之所以正式的唯一原因是它是项目维护者的公开仓库。")]),e._v(" "),s("h3",{attrs:{id:"_2-4-3-forking工作流的分支使用方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-3-forking工作流的分支使用方式"}},[e._v("#")]),e._v(" 2.4.3 "),s("code",[e._v("Forking")]),e._v("工作流的分支使用方式")]),e._v(" "),s("p",[e._v("所有的个人公开仓库实际上只是为了方便和其它的开发者共享分支。\n各个开发者应该用分支隔离各个功能，就像在"),s("RouterLink",{attrs:{to:"/navitem/git/notes/workflow-feature-branch.html"}},[e._v("功能分支工作流")]),e._v("和"),s("RouterLink",{attrs:{to:"/navitem/git/notes/workflow-forking.html"}},[s("code",[e._v("Gitflow")]),e._v("工作流")]),e._v("一样。\n唯一的区别是这些分支被共享了。在"),s("code",[e._v("Forking")]),e._v("工作流中这些分支会被"),s("code",[e._v("pull")]),e._v("到另一个开发者的本地仓库中，而在功能分支工作流和"),s("code",[e._v("Gitflow")]),e._v("工作流中是直接被"),s("code",[e._v("push")]),e._v("到正式仓库中。")],1),e._v(" "),s("h3",{attrs:{id:"_2-4-4-示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-4-示例"}},[e._v("#")]),e._v(" 2.4.4 示例")]),e._v(" "),s("h4",{attrs:{id:"项目维护者初始化正式仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#项目维护者初始化正式仓库"}},[e._v("#")]),e._v(" 项目维护者初始化正式仓库")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/35.png",alt:""}})]),e._v(" "),s("p",[e._v("和任何使用"),s("code",[e._v("Git")]),e._v("项目一样，第一步是创建在服务器上一个正式仓库，让所有团队成员都可以访问到。\n通常这个仓库也会作为项目维护者的公开仓库。")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/git-basics#!init",target:"_blank",rel:"noopener noreferrer"}},[e._v("公开仓库应该是裸仓库"),s("OutboundLink")],1),e._v("，不管是不是正式代码库。\n所以项目维护者会运行像下面的命令来搭建正式仓库：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ssh")]),e._v(" user@host\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" init --bare /path/to/repo.git\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[s("code",[e._v("Bitbucket")]),e._v("和"),s("code",[e._v("Stash")]),e._v("提供了一个方便的"),s("code",[e._v("GUI")]),e._v("客户端以完成上面命令行做的事。\n这个搭建中央仓库的过程和前面提到的工作流完全一样。\n如果有现存的代码库，维护者也要"),s("code",[e._v("push")]),e._v("到这个仓库中。")]),e._v(" "),s("h4",{attrs:{id:"开发者fork正式仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开发者fork正式仓库"}},[e._v("#")]),e._v(" 开发者"),s("code",[e._v("fork")]),e._v("正式仓库")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/36.png",alt:""}})]),e._v(" "),s("p",[e._v("其它所有的开发需要"),s("code",[e._v("fork")]),e._v("正式仓库。\n可以用"),s("code",[e._v("git clone")]),e._v("命令"),s("a",{attrs:{href:"https://confluence.atlassian.com/display/BITBUCKET/Set+up+SSH+for+Git",target:"_blank",rel:"noopener noreferrer"}},[e._v("用"),s("code",[e._v("SSH")]),e._v("协议连通到服务器"),s("OutboundLink")],1),e._v("，\n拷贝仓库到服务器另一个位置 —— 是的，"),s("code",[e._v("fork")]),e._v("操作基本上就只是一个服务端的克隆。\n"),s("code",[e._v("Bitbucket")]),e._v("和"),s("code",[e._v("Stash")]),e._v("上可以点一下按钮就让开发者完成仓库的"),s("code",[e._v("fork")]),e._v("操作。")]),e._v(" "),s("p",[e._v("这一步完成后，每个开发都在服务端有一个自己的仓库。和正式仓库一样，这些仓库应该是裸仓库。")]),e._v(" "),s("h4",{attrs:{id:"开发者克隆自己fork出来的仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开发者克隆自己fork出来的仓库"}},[e._v("#")]),e._v(" 开发者克隆自己"),s("code",[e._v("fork")]),e._v("出来的仓库")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/37.png",alt:""}})]),e._v(" "),s("p",[e._v("下一步，各个开发者要克隆自己的公开仓库，用熟悉的"),s("code",[e._v("git clone")]),e._v("命令。")]),e._v(" "),s("p",[e._v("在这个示例中，假定用"),s("code",[e._v("Bitbucket")]),e._v("托管了仓库。记住，如果这样的话各个开发者需要有各自的"),s("code",[e._v("Bitbucket")]),e._v("账号，\n使用下面命令克隆服务端自己的仓库：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone https://user@bitbucket.org/user/repo.git\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("相比前面介绍的工作流只用了一个"),s("code",[e._v("origin")]),e._v("远程别名指向中央仓库，"),s("code",[e._v("Forking")]),e._v("工作流需要2个远程别名 ——\n一个指向正式仓库，另一个指向开发者自己的服务端仓库。别名的名字可以任意命名，常见的约定是使用"),s("code",[e._v("origin")]),e._v("作为远程克隆的仓库的别名\n（这个别名会在运行"),s("code",[e._v("git clone")]),e._v("自动创建），"),s("code",[e._v("upstream")]),e._v("（上游）作为正式仓库的别名。")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" upstream https://bitbucket.org/maintainer/repo\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("需要自己用上面的命令创建"),s("code",[e._v("upstream")]),e._v("别名。这样可以简单地保持本地仓库和正式仓库的同步更新。\n注意，如果上游仓库需要认证（比如不是开源的），你需要提供用户：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" upstream https://user@bitbucket.org/maintainer/repo.git\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("这时在克隆和"),s("code",[e._v("pull")]),e._v("正式仓库时，需要提供用户的密码。")]),e._v(" "),s("h4",{attrs:{id:"开发者开发自己的功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开发者开发自己的功能"}},[e._v("#")]),e._v(" 开发者开发自己的功能")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/38.png",alt:""}})]),e._v(" "),s("p",[e._v("在刚克隆的本地仓库中，开发者可以像其它工作流一样的编辑代码、"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/git-basics#!commit",target:"_blank",rel:"noopener noreferrer"}},[e._v("提交修改"),s("OutboundLink")],1),e._v("和"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/git-branches#!branch",target:"_blank",rel:"noopener noreferrer"}},[e._v("新建分支"),s("OutboundLink")],1),e._v("：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout -b some-feature\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Edit some code")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" commit -a -m "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Add first draft of some feature"')]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("所有的修改都是私有的直到"),s("code",[e._v("push")]),e._v("到自己公开仓库中。如果正式项目已经往前走了，可以用"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/remote-repositories#!pull",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("git pull")]),e._v("命令"),s("OutboundLink")],1),e._v("获得新的提交：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" pull upstream master\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("由于开发者应该都在专门的功能分支上工作，"),s("code",[e._v("pull")]),e._v("操作结果会都是"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/git-branches#!merge",target:"_blank",rel:"noopener noreferrer"}},[e._v("快进合并"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("h4",{attrs:{id:"开发者发布自己的功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开发者发布自己的功能"}},[e._v("#")]),e._v(" 开发者发布自己的功能")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/39.png",alt:""}})]),e._v(" "),s("p",[e._v("一旦开发者准备好了分享新功能，需要做二件事。\n首先，通过"),s("code",[e._v("push")]),e._v("他的贡献代码到自己的公开仓库中，让其它的开发者都可以访问到。\n他的"),s("code",[e._v("origin")]),e._v("远程别名应该已经有了，所以要做的就是：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push origin feature-branch\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("这里和之前的工作流的差异是，"),s("code",[e._v("origin")]),e._v("远程别名指向开发者自己的服务端仓库，而不是正式仓库。")]),e._v(" "),s("p",[e._v("第二件事，开发者要通知项目维护者，想要合并他的新功能到正式库中。\n"),s("code",[e._v("Bitbucket")]),e._v("和"),s("code",[e._v("Stash")]),e._v("提供了"),s("a",{attrs:{href:"https://confluence.atlassian.com/display/STASH/Using+pull+requests+in+Stash",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("Pull Request")]),s("OutboundLink")],1),e._v("按钮，弹出表单让你指定哪个分支要合并到正式仓库。\n一般你会想集成你的功能分支到上游远程仓库的"),s("code",[e._v("master")]),e._v("分支中。")]),e._v(" "),s("h4",{attrs:{id:"项目维护者集成开发者的功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#项目维护者集成开发者的功能"}},[e._v("#")]),e._v(" 项目维护者集成开发者的功能")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/40.png",alt:""}})]),e._v(" "),s("p",[e._v("当项目维护者收到"),s("code",[e._v("pull request")]),e._v("，他要做的是决定是否集成它到正式代码库中。有二种方式来做：")]),e._v(" "),s("ol",[s("li",[e._v("直接在"),s("code",[e._v("pull request")]),e._v("中查看代码")]),e._v(" "),s("li",[s("code",[e._v("pull")]),e._v("代码到他自己的本地仓库，再手动合并")])]),e._v(" "),s("p",[e._v("第一种做法更简单，维护者可以在"),s("code",[e._v("GUI")]),e._v("中查看变更的差异，做评注和执行合并。\n但如果出现了合并冲突，需要第二种做法来解决。这种情况下，维护者需要从开发者的服务端仓库中"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/remote-repositories#!fetch",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("fetch")]),s("OutboundLink")],1),e._v("功能分支，\n合并到他本地的"),s("code",[e._v("master")]),e._v("分支，解决冲突：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" fetch https://bitbucket.org/user/repo feature-branch\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查看变更")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout master\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" merge FETCH_HEAD\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("变更集成到本地的"),s("code",[e._v("master")]),e._v("分支后，维护者要"),s("code",[e._v("push")]),e._v("变更到服务器上的正式仓库，这样其它的开发者都能访问到：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push origin master\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("注意，维护者的"),s("code",[e._v("origin")]),e._v("是指向他自己公开仓库的，即是项目的正式代码库。到此，开发者的贡献完全集成到了项目中。")]),e._v(" "),s("h4",{attrs:{id:"开发者和正式仓库做同步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开发者和正式仓库做同步"}},[e._v("#")]),e._v(" 开发者和正式仓库做同步")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/41.png",alt:""}})]),e._v(" "),s("p",[e._v("由于正式代码库往前走了，其它的开发需要和正式仓库做同步：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" pull upstream master\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("如果你之前是使用"),s("code",[e._v("SVN")]),e._v("，"),s("code",[e._v("Forking")]),e._v("工作流可能看起来像是一个激进的范式切换（paradigm shift）。\n但不要害怕，这个工作流实际上就是在"),s("RouterLink",{attrs:{to:"/navitem/git/notes/workflow-feature-branch.html"}},[e._v("功能分支工作流")]),e._v("之上引入另一个抽象层。\n不是直接通过单个中央仓库来分享分支，而是把贡献代码发布到开发者自己的服务端仓库中。")],1),e._v(" "),s("p",[e._v("示例中解释了，一个贡献如何从一个开发者流到正式的"),s("code",[e._v("master")]),e._v("分支中，但同样的方法可以把贡献集成到任一个仓库中。\n比如，如果团队的几个人协作实现一个功能，可以在开发之间用相同的方法分享变更，完全不涉及正式仓库。")]),e._v(" "),s("p",[e._v("这使得"),s("code",[e._v("Forking")]),e._v("工作流对于松散组织的团队来说是个非常强大的工具。任一开发者可以方便地和另一开发者分享变更，任何分支都能有效地合并到正式代码库中。")]),e._v(" "),s("hr"),e._v(" "),s("h2",{attrs:{id:"_2-5-pull-requests"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-pull-requests"}},[e._v("#")]),e._v(" 2.5 "),s("code",[e._v("Pull Requests")])]),e._v(" "),s("p",[s("code",[e._v("Pull requests")]),e._v("是"),s("code",[e._v("Bitbucket")]),e._v("提供的让开发者更方便地进行协作的功能，提供了友好的"),s("code",[e._v("Web")]),e._v("界面可以在提议的修改合并到正式项目之前对修改进行讨论。")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/42.png",alt:""}})]),e._v(" "),s("p",[e._v("开发者向团队成员通知功能开发已经完成，"),s("code",[e._v("Pull Requests")]),e._v("是最简单的用法。\n开发者完成功能开发后，通过"),s("code",[e._v("Bitbucket")]),e._v("账号发起一个"),s("code",[e._v("Pull Request")]),e._v("。\n这样让涉及这个功能的所有人知道要去做"),s("code",[e._v("Code Review")]),e._v("和合并到"),s("code",[e._v("master")]),e._v("分支。")]),e._v(" "),s("p",[e._v("但是，"),s("code",[e._v("Pull Request")]),e._v("远不止一个简单的通知，而是为讨论提交的功能的一个专门论坛。\n如果变更有任何问题，团队成员反馈在"),s("code",[e._v("Pull Request")]),e._v("中，甚至"),s("code",[e._v("push")]),e._v("新的提交微调功能。\n所有的这些活动都直接跟踪在"),s("code",[e._v("Pull Request")]),e._v("中。")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/43.png",alt:""}})]),e._v(" "),s("p",[e._v("相比其它的协作模型，这种分享提交的形式有助于打造一个更流畅的工作流。\n"),s("code",[e._v("SVN")]),e._v("和"),s("code",[e._v("Git")]),e._v("都能通过一个简单的脚本收到通知邮件；但是，讨论变更时，开发者通常只能去回复邮件。\n这样做会变得杂乱，尤其还要涉及后面的几个提交时。\n"),s("code",[e._v("Pull Requests")]),e._v("把所有相关功能整合到一个和"),s("code",[e._v("Bitbucket")]),e._v("仓库界面集成的用户友好"),s("code",[e._v("Web")]),e._v("界面中。")]),e._v(" "),s("h3",{attrs:{id:"_2-5-1-解析pull-request"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-1-解析pull-request"}},[e._v("#")]),e._v(" 2.5.1 解析"),s("code",[e._v("Pull Request")])]),e._v(" "),s("p",[e._v("当要发起一个"),s("code",[e._v("Pull Request")]),e._v("，你所要做的就是请求（"),s("code",[e._v("Request")]),e._v("）另一个开发者（比如项目的维护者）\n来"),s("code",[e._v("pull")]),e._v("你仓库中一个分支到他的仓库中。这意味着你要提供4个信息以发起"),s("code",[e._v("Pull Request")]),e._v("：\n源仓库、源分支、目的仓库、目的分支。")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/44.png",alt:""}})]),e._v(" "),s("p",[e._v("这几值多数"),s("code",[e._v("Bitbucket")]),e._v("都会设置上合适的缺省值。但取决你用的协作工作流，你的团队可能会要指定不同的值。\n上图显示了一个"),s("code",[e._v("Pull Request")]),e._v("请求合并一个功能分支到正式的"),s("code",[e._v("master")]),e._v("分支上，但可以有多种不同的"),s("code",[e._v("Pull Request")]),e._v("用法。")]),e._v(" "),s("h3",{attrs:{id:"_2-5-2-工作方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-2-工作方式"}},[e._v("#")]),e._v(" 2.5.2 工作方式")]),e._v(" "),s("p",[s("code",[e._v("Pull Request")]),e._v("可以和"),s("RouterLink",{attrs:{to:"/navitem/git/notes/workflow-feature-branch.html"}},[e._v("功能分支工作流")]),e._v("、"),s("RouterLink",{attrs:{to:"/navitem/git/notes/workflow-gitflow.html"}},[s("code",[e._v("Gitflow")]),e._v("工作流")]),e._v("或"),s("RouterLink",{attrs:{to:"/navitem/git/notes/workflow-forking.html"}},[s("code",[e._v("Forking")]),e._v("工作流")]),e._v("一起使用。\n但一个"),s("code",[e._v("Pull Request")]),e._v("要求要么分支不同要么仓库不同，所以不能用于"),s("RouterLink",{attrs:{to:"/navitem/git/notes/workflow-centralized.html"}},[e._v("集中式工作流")]),e._v("。\n在不同的工作流中使用"),s("code",[e._v("Pull Request")]),e._v("会有一些不同，但基本的过程是这样的：")],1),e._v(" "),s("ol",[s("li",[e._v("开发者在本地仓库中新建一个专门的分支开发功能。")]),e._v(" "),s("li",[e._v("开发者"),s("code",[e._v("push")]),e._v("分支修改到公开的"),s("code",[e._v("Bitbucket")]),e._v("仓库中。")]),e._v(" "),s("li",[e._v("开发者通过"),s("code",[e._v("Bitbucket")]),e._v("发起一个"),s("code",[e._v("Pull Request")]),e._v("。")]),e._v(" "),s("li",[e._v("团队的其它成员"),s("code",[e._v("review")]),e._v(" "),s("code",[e._v("code")]),e._v("，讨论并修改。")]),e._v(" "),s("li",[e._v("项目维护者合并功能到官方仓库中并关闭"),s("code",[e._v("Pull Request")]),e._v("。")])]),e._v(" "),s("p",[e._v("本文后面内容说明，"),s("code",[e._v("Pull Request")]),e._v("在不同协作工作流中如何应用。")]),e._v(" "),s("h3",{attrs:{id:"_2-5-3-在功能分支工作流中使用pull-request"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-3-在功能分支工作流中使用pull-request"}},[e._v("#")]),e._v(" 2.5.3 在功能分支工作流中使用"),s("code",[e._v("Pull Request")])]),e._v(" "),s("p",[e._v("功能分支工作流用一个共享的"),s("code",[e._v("Bitbucket")]),e._v("仓库来管理协作，开发者在专门的分支上开发功能。\n但不是立即合并到"),s("code",[e._v("master")]),e._v("分支上，而是在合并到主代码库之前开发者应该开一个"),s("code",[e._v("Pull Request")]),e._v("发起功能的讨论。")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/45.png",alt:""}})]),e._v(" "),s("p",[e._v("功能分支工作流只有一个公开的仓库，所以"),s("code",[e._v("Pull Request")]),e._v("的目的仓库和源仓库总是同一个。\n通常开发者会指定他的功能分支作为源分支，"),s("code",[e._v("master")]),e._v("分支作为目的分支。")]),e._v(" "),s("p",[e._v("收到"),s("code",[e._v("Pull Request")]),e._v("后，项目维护者要决定如何做。如果功能没问题，就简单地合并到"),s("code",[e._v("master")]),e._v("分支，关闭"),s("code",[e._v("Pull Request")]),e._v("。\n但如果提交的变更有问题，他可以在"),s("code",[e._v("Pull Request")]),e._v("中反馈。之后新加的提交也会评论之后接着显示出来。")]),e._v(" "),s("p",[e._v("在功能还没有完全开发完的时候，也可能发起一个"),s("code",[e._v("Pull Request")]),e._v("。\n比如开发者在实现某个需求时碰到了麻烦，他可以发一个包含正在进行中工作的"),s("code",[e._v("Pull Request")]),e._v("。\n其它的开发者可以在"),s("code",[e._v("Pull Request")]),e._v("提供建议，或者甚至直接添加提交来解决问题。")]),e._v(" "),s("h3",{attrs:{id:"_2-5-4-在gitflow工作流中使用pull-request"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-4-在gitflow工作流中使用pull-request"}},[e._v("#")]),e._v(" 2.5.4 在"),s("code",[e._v("Gitflow")]),e._v("工作流中使用"),s("code",[e._v("Pull Request")])]),e._v(" "),s("p",[s("code",[e._v("Gitflow")]),e._v("工作流和功能分支工作流类似，但围绕项目发布定义一个严格的分支模型。\n在"),s("code",[e._v("Gitflow")]),e._v("工作流中使用"),s("code",[e._v("Pull Request")]),e._v("让开发者在发布分支或是维护分支上工作时，\n可以有个方便的地方对关于发布分支或是维护分支的问题进行交流。")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/46.png",alt:""}})]),e._v(" "),s("p",[s("code",[e._v("Gitflow")]),e._v("工作流中"),s("code",[e._v("Pull Request")]),e._v("的使用过程和上一节中完全一致：\n当一个功能、发布或是热修复分支需要"),s("code",[e._v("Review")]),e._v("时，开发者简单发起一个"),s("code",[e._v("Pull Request")]),e._v("，\n团队的其它成员会通过"),s("code",[e._v("Bitbucket")]),e._v("收到通知。")]),e._v(" "),s("p",[e._v("新功能一般合并到"),s("code",[e._v("develop")]),e._v("分支，而发布和热修复则要同时合并到"),s("code",[e._v("develop")]),e._v("分支和"),s("code",[e._v("master")]),e._v("分支上。\n"),s("code",[e._v("Pull Request")]),e._v("可能用做所有合并的正式管理。")]),e._v(" "),s("h3",{attrs:{id:"_2-5-5-在forking工作流中使用pull-request"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-5-在forking工作流中使用pull-request"}},[e._v("#")]),e._v(" 2.5.5 在"),s("code",[e._v("Forking")]),e._v("工作流中使用"),s("code",[e._v("Pull Request")])]),e._v(" "),s("p",[e._v("在"),s("code",[e._v("Forking")]),e._v("工作流中，开发者"),s("code",[e._v("push")]),e._v("完成的功能到他自己的仓库中，而不是共享仓库。\n然后，他发起一个"),s("code",[e._v("Pull Request")]),e._v("，让项目维护者知道他的功能已经可以"),s("code",[e._v("Review")]),e._v("了。")]),e._v(" "),s("p",[e._v("在这个工作流，"),s("code",[e._v("Pull Request")]),e._v("的通知功能非常有用，\n因为项目维护者不可能知道其它开发者在他们自己的仓库添加了提交。")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/47.png",alt:""}})]),e._v(" "),s("p",[e._v("由于各个开发有自己的公开仓库，"),s("code",[e._v("Pull Request")]),e._v("的源仓库和目标仓库不是同一个。\n源仓库是开发者的公开仓库，源分支是包含了修改的分支。\n如果开发者要合并修改到正式代码库中，那么目标仓库是正式仓库，目标分支是"),s("code",[e._v("master")]),e._v("分支。")]),e._v(" "),s("p",[s("code",[e._v("Pull Request")]),e._v("也可以用于正式项目之外的其它开发者之间的协作。\n比如，如果一个开发者和一个团队成员一起开发一个功能，他们可以发起一个"),s("code",[e._v("Pull Request")]),e._v("，\n用团队成员的"),s("code",[e._v("Bitbucket")]),e._v("仓库作为目标，而不是正式项目的仓库。\n然后使用相同的功能分支作为源和目标分支。")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/48.png",alt:""}})]),e._v(" "),s("p",[e._v("2个开发者之间可以在"),s("code",[e._v("Pull Request")]),e._v("中讨论和开发功能。\n完成开发后，他们可以发起另一个"),s("code",[e._v("Pull Request")]),e._v("，请求合并功能到正式的"),s("code",[e._v("master")]),e._v("分支。\n在"),s("code",[e._v("Forking")]),e._v("工作流中，这样的灵活性让"),s("code",[e._v("Pull Request")]),e._v("成为一个强有力的协作工具。")]),e._v(" "),s("h3",{attrs:{id:"_2-5-6-示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-6-示例"}},[e._v("#")]),e._v(" 2.5.6 示例")]),e._v(" "),s("p",[e._v("下面的示例演示了"),s("code",[e._v("Pull Request")]),e._v("如何在在"),s("code",[e._v("Forking")]),e._v("工作流中使用。\n也同样适用于小团队的开发协作和第三方开发者向开源项目的贡献。")]),e._v(" "),s("p",[e._v("在示例中，小红是个开发，小明是项目维护者。他们各自有一个公开的"),s("code",[e._v("Bitbucket")]),e._v("仓库，而小明的仓库包含了正式工程。")]),e._v(" "),s("h4",{attrs:{id:"小红fork正式项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小红fork正式项目"}},[e._v("#")]),e._v(" 小红"),s("code",[e._v("fork")]),e._v("正式项目")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/49.png",alt:""}})]),e._v(" "),s("p",[e._v("小红先要"),s("code",[e._v("fork")]),e._v("小明的"),s("code",[e._v("Bitbucket")]),e._v("仓库，开始项目的开发。她登陆"),s("code",[e._v("Bitbucket")]),e._v("，浏览到小明的仓库页面，\n点"),s("code",[e._v("Fork")]),e._v("按钮。")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/50.png",alt:""}})]),e._v(" "),s("p",[e._v("然后为"),s("code",[e._v("fork")]),e._v("出来的仓库填写名字和描述，这样小红就有了服务端的项目拷贝了。")]),e._v(" "),s("h4",{attrs:{id:"小红克隆她的bitbucket仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小红克隆她的bitbucket仓库"}},[e._v("#")]),e._v(" 小红克隆她的"),s("code",[e._v("Bitbucket")]),e._v("仓库")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/51.png",alt:""}})]),e._v(" "),s("p",[e._v("下一步，小红克隆自己刚才"),s("code",[e._v("fork")]),e._v("出来的"),s("code",[e._v("Bitbucket")]),e._v("仓库，以在本机上准备出工作拷贝。命令如下：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone https://user@bitbucket.org/user/repo.git\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("请记住，"),s("code",[e._v("git clone")]),e._v("会自动创建"),s("code",[e._v("origin")]),e._v("远程别名，是指向小红"),s("code",[e._v("fork")]),e._v("出来的仓库。")]),e._v(" "),s("h4",{attrs:{id:"小红开发新功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小红开发新功能"}},[e._v("#")]),e._v(" 小红开发新功能")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/52.png",alt:""}})]),e._v(" "),s("p",[e._v("在开始改代码前，小红要为新功能先新建一个新分支。她会用这个分支作为"),s("code",[e._v("Pull Request")]),e._v("的源分支。")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout -b some-feature\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 编辑代码")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" commit -a -m "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Add first draft of some feature"')]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("在新功能分支上，小红按需要添加提交。甚至如果小红觉得功能分支上的提交历史太乱了，她可以用"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/rewriting-git-history#!rebase-i",target:"_blank",rel:"noopener noreferrer"}},[e._v("交互式"),s("code",[e._v("rebase")]),s("OutboundLink")],1),e._v("来删除或压制提交。\n对于大型项目，整理功能分支的历史可以让项目维护者更容易看出在"),s("code",[e._v("Pull Request")]),e._v("中做了什么内容。")]),e._v(" "),s("h4",{attrs:{id:"小红push功能到她的bitbucket仓库中"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小红push功能到她的bitbucket仓库中"}},[e._v("#")]),e._v(" 小红"),s("code",[e._v("push")]),e._v("功能到她的"),s("code",[e._v("Bitbucket")]),e._v("仓库中")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/53.png",alt:""}})]),e._v(" "),s("p",[e._v("小红完成了功能后，"),s("code",[e._v("push")]),e._v("功能到她自己的"),s("code",[e._v("Bitbucket")]),e._v("仓库中（不是正式仓库），用下面简单的命令：")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push origin some-branch\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("这时她的变更可以让项目维护者看到了（或者任何想要看的协作者）。")]),e._v(" "),s("h4",{attrs:{id:"小红发起pull-request"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小红发起pull-request"}},[e._v("#")]),e._v(" 小红发起"),s("code",[e._v("Pull Request")])]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/54.png",alt:""}})]),e._v(" "),s("p",[s("code",[e._v("Bitbucket")]),e._v("上有了她的功能分支后，小红可以用她的"),s("code",[e._v("Bitbucket")]),e._v("账号浏览到她的"),s("code",[e._v("fork")]),e._v("出来的仓库页面，\n点右上角的【"),s("code",[e._v("Pull Request")]),e._v("】按钮，发起一个"),s("code",[e._v("Pull Request")]),e._v("。\n弹出的表单自动设置小红的仓库为源仓库，询问小红以指定源分支、目标仓库和目标分支。")]),e._v(" "),s("p",[e._v("小红想要合并功能到正式仓库，所以源分支是她的功能分支，目标仓库是小明的公开仓库，\n而目标分支是"),s("code",[e._v("master")]),e._v("分支。另外，小红需要提供"),s("code",[e._v("Pull Request")]),e._v("的标题和描述信息。\n如果需要小明以外的人审核批准代码，她可以把这些人填在【"),s("code",[e._v("Reviewers")]),e._v("】文本框中。")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/55.png",alt:""}})]),e._v(" "),s("p",[e._v("创建好了"),s("code",[e._v("Pull Request")]),e._v("，通知会通过"),s("code",[e._v("Bitbucket")]),e._v("系统消息或邮件（可选）发给小明。")]),e._v(" "),s("h4",{attrs:{id:"小明review-pull-request"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小明review-pull-request"}},[e._v("#")]),e._v(" 小明review "),s("code",[e._v("Pull Request")])]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/56.png",alt:""}})]),e._v(" "),s("p",[e._v("在小明的"),s("code",[e._v("Bitbucket")]),e._v("仓库页面的【"),s("code",[e._v("Pull Request")]),e._v("】Tab可以看到所有人发起的"),s("code",[e._v("Pull Request")]),e._v("。\n点击小红的"),s("code",[e._v("Pull Request")]),e._v("会显示出"),s("code",[e._v("Pull Request")]),e._v("的描述、功能的提交历史和每个变更的差异（"),s("code",[e._v("diff")]),e._v("）。")]),e._v(" "),s("p",[e._v("如果小明想要合并到项目中，只要点一下【"),s("code",[e._v("Merge")]),e._v("】按钮，就可以同意"),s("code",[e._v("Pull Request")]),e._v("并合并到"),s("code",[e._v("master")]),e._v("分支。")]),e._v(" "),s("p",[e._v("但如果像这个示例中一样小明发现了在小红的代码中的一个小"),s("code",[e._v("Bug")]),e._v("，要小红在合并前修复。\n小明可以在整个"),s("code",[e._v("Pull Request")]),e._v("上加上评注，或是选择历史中的某个提交加上评注。")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/57.png",alt:""}})]),e._v(" "),s("h4",{attrs:{id:"小红补加提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小红补加提交"}},[e._v("#")]),e._v(" 小红补加提交")]),e._v(" "),s("p",[e._v("如果小红对反馈有任何疑问，可以在"),s("code",[e._v("Pull Request")]),e._v("中响应，把"),s("code",[e._v("Pull Request")]),e._v("当作是她功能讨论的论坛。")]),e._v(" "),s("p",[e._v("小红在她的功能分支新加提交以解决代码问题，并"),s("code",[e._v("push")]),e._v("到她的"),s("code",[e._v("Bitbucket")]),e._v("仓库中，就像前一轮中的做法一样。\n这些提交会进入的"),s("code",[e._v("Pull Request")]),e._v("，小明在原来的评注旁边可以再次"),s("code",[e._v("review")]),e._v("变更。")]),e._v(" "),s("h4",{attrs:{id:"小明接受pull-request"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小明接受pull-request"}},[e._v("#")]),e._v(" 小明接受"),s("code",[e._v("Pull Request")])]),e._v(" "),s("p",[e._v("最终，小明接受变更，合并功能分支到"),s("code",[e._v("Master")]),e._v("分支，并关闭"),s("code",[e._v("Pull Request")]),e._v("。\n至此，功能集成到项目中，其它的项目开发者可以用标准的"),s("code",[e._v("git pull")]),e._v("命令"),s("code",[e._v("pull")]),e._v("这些变更到自己的本地仓库中。")]),e._v(" "),s("p",[e._v("到了这里，你应该有了所有需要的工具来集成"),s("code",[e._v("Pull Request")]),e._v("到你自己的工作流。\n请记住，"),s("code",[e._v("Pull Request")]),e._v("并不是为了替代任何 "),s("code",[e._v("基于")]),e._v("Git"),s("code",[e._v("的协作工作流")]),e._v("，\n而是它们的一个便利的补充，让团队成员间的协作更轻松方便。")]),e._v(" "),s("hr"),e._v(" "),s("h2",{attrs:{id:"三、企业日常开发模式探索"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、企业日常开发模式探索"}},[e._v("#")]),e._v(" 三、企业日常开发模式探索")]),e._v(" "),s("p",[e._v("在看这部分前，请先回顾阅读业界认可的成功的 "),s("code",[e._v("Git Branch Work Flow")]),e._v(" 模型 "),s("a",{attrs:{href:"http://nvie.com/posts/a-successful-git-branching-model/",target:"_blank",rel:"noopener noreferrer"}},[e._v("A Successful Git Branching Model"),s("OutboundLink")],1),e._v(" ，了解日常开发中的场景，有助于熟悉下面的使用过程。")]),e._v(" "),s("p",[e._v("在企业开发中，使用 "),s("code",[e._v("Git")]),e._v(" 作为版本控制软件最看重的还是结合公司自己搭建的 "),s("a",{attrs:{href:"https://about.gitlab.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Gitlab"),s("OutboundLink")],1),e._v("，将 "),s("code",[e._v("Code Review")]),e._v(" 加入打包部署持续集成的流程中，这样，代码开发完成，提交测试前，便可以对开发人员提交的代码进行 "),s("code",[e._v("Review")]),e._v("，发现潜在的问题，及时指导，对于新人来讲，也能更快更好的学习。")]),e._v(" "),s("p",[e._v("解决的需求场景如下：")]),e._v(" "),s("ul",[s("li",[e._v("能支持日常迭代开发、紧急线上"),s("code",[e._v("bug")]),e._v("修复、多功能并行开发")]),e._v(" "),s("li",[e._v("大概"),s("code",[e._v("50")]),e._v("人左右的团队，平日迭代项目较多，且周期短（"),s("code",[e._v("1~2")]),e._v("周一个迭代）")]),e._v(" "),s("li",[e._v("能够通过"),s("code",[e._v("tag")]),e._v("重建整个系统")]),e._v(" "),s("li",[e._v("支持"),s("code",[e._v("code review")])]),e._v(" "),s("li",[e._v("所有上线的代码必须都是经过测试保证，且能自动同步到下一次的迭代中")]),e._v(" "),s("li",[e._v("能和公司的项目管理/持续集成系统整合")])]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/58.png",alt:"图片"}})]),e._v(" "),s("p",[e._v("上图就是 "),s("code",[e._v("xirong")]),e._v(" 团队在日常开发中总结出来的适合企业开发的模式，下面进行简单的介绍，方便大家学习了解，欢迎提交 "),s("code",[e._v("Issue")]),e._v(" 进行讨论。（本模式适合敏捷开发流程，小迭代上线，传统的瀑布开发模型并没有进行测试）")]),e._v(" "),s("ol",[s("li",[e._v("迭代需求会、冲刺会后确定本次迭代的目标后，将迭代内容视为一个项目，在 "),s("code",[e._v("Gitlab")]),e._v(" 上创建一个 "),s("code",[e._v("Repository")]),e._v("，初始化工程代码结构，根据上线日期，比如"),s("code",[e._v("20150730")]),e._v("上线，开出分支 "),s("code",[e._v("release20150730")]),e._v("、"),s("code",[e._v("dev20150730")]),e._v(" 两个分支，"),s("code",[e._v("dev")]),e._v(" 分支作为日常开发主干分支，"),s("code",[e._v("release")]),e._v(" 分支作为提测打包、"),s("code",[e._v("Code Review")]),e._v(" 的分支。")]),e._v(" "),s("li",[e._v("迭代开始，日常开发进行中，开发人员在 "),s("code",[e._v("dev")]),e._v(" 分支上进行 "),s("code",[e._v("Commit")]),e._v("、"),s("code",[e._v("Push")]),e._v(" 代码，并且解决掉日常协同开发中的冲突等问题，等到达到提测条件的时候，提测者，首先 "),s("code",[e._v("Merge Master")]),e._v(" 分支上的最新代码 "),s("code",[e._v("git merge --no-ff origin/master")]),e._v(" ，使得 "),s("code",[e._v("Master")]),e._v(" 分支上的变更更新到迭代开发分支"),s("code",[e._v("dev")]),e._v("上面，之后，在 "),s("code",[e._v("Gitlab")]),e._v(" 上面发起 "),s("code",[e._v("pull request")]),e._v(" 请求，并指定 "),s("code",[e._v("Code Review")]),e._v(" 人，请求的分支选择本次上线的 "),s("code",[e._v("release")]),e._v(" 分支，即 "),s("code",[e._v("release20150730")]),e._v("。")]),e._v(" "),s("li",[e._v("被指定 "),s("code",[e._v("Code Review")]),e._v(" 的人，对发起者的代码 "),s("code",[e._v("Review")]),e._v(" 后，决定是否可以提交测试，若有问题，评论注释代码后，提交者对代码进行进行修改，重复步骤"),s("code",[e._v("2")]),e._v("，直到代码 "),s("code",[e._v("Review")]),e._v(" 者认为 "),s("code",[e._v("Ok")]),e._v("。之后便可以借助自己公司的打包部署，对这些代码发布到测试环境验证。")]),e._v(" "),s("li",[e._v("步骤"),s("code",[e._v("2-3")]),e._v("重复多次后，就会达到一个稳定可发布的版本，即上线版本，上线后，将 "),s("code",[e._v("release")]),e._v(" 版本上面最后的提交（图中"),s("code",[e._v("0.2.4")]),e._v("上线对应处）合并到 "),s("code",[e._v("Master")]),e._v(" 分支上面，并打 "),s("code",[e._v("Tag0.3")]),e._v("。至此，一次完整的迭代开发完成。")]),e._v(" "),s("li",[e._v("若此次上线后，不久发现生产环境有 "),s("code",[e._v("Bug")]),e._v(" 需要修复，则从 "),s("code",[e._v("Tag")]),e._v(" 处新开分支 "),s("code",[e._v("release_bugfix_20150731")]),e._v("、"),s("code",[e._v("dev_bugfix_20150731")]),e._v(" ，开发人员从 "),s("code",[e._v("dev_bugfix_20150731")]),e._v("分支上进行开发，提测"),s("code",[e._v("code review")]),e._v("在"),s("code",[e._v("release_bugfix_20150731")]),e._v(" 分支上，具体步骤参考"),s("code",[e._v("2-3")]),e._v("，测试环境验证通过后，发布到线上，验证"),s("code",[e._v("OK")]),e._v("，合并到 "),s("code",[e._v("Master")]),e._v(" 分支，并打 "),s("code",[e._v("Tag0.2.3")]),e._v("，此次 "),s("code",[e._v("Bug")]),e._v(" 修复完毕，专为解 "),s("code",[e._v("Bug")]),e._v(" 而生的这两个分支可以退伍了，删除"),s("code",[e._v("release_bugfix_20150731")]),e._v("、"),s("code",[e._v("dev_bugfix_20150731")]),e._v("两分支即可。（所有的历史 "),s("code",[e._v("Commit")]),e._v(" 信息均已经提交到了 "),s("code",[e._v("Master")]),e._v(" 分支上，不用担心丢失）")])]),e._v(" "),s("p",[e._v("这样经过上面的"),s("code",[e._v("1-5")]),e._v("步骤，企业日常迭代开发中的代码版本控制基本上就 "),s("code",[e._v("Ok")]),e._v(" 了，有问题欢迎 "),s("code",[e._v("Issue")]),e._v(" 讨论。")]),e._v(" "),s("p",[s("code",[e._v("2016-11")]),e._v("月 更新 "),s("strong",[s("code",[e._v("Git")]),e._v(" 分支开发部署模型")]),e._v(" 的一些使用原则如下:")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/59.jpg",alt:""}})]),e._v(" "),s("ul",[s("li",[s("code",[e._v("master：master")]),e._v("永远是线上代码，最稳定的分支，存放的是随时可供在生产环境中部署的代码，当开发活动告一段落，产生了一份新的可供部署的代码时，发布成功之后，代码才会由 "),s("code",[e._v("aone2")]),e._v(" 提交到 "),s("code",[e._v("master")]),e._v("，"),s("code",[e._v("master")]),e._v(" 分支上的代码会被更新。应用上 "),s("code",[e._v("aone2")]),e._v(" 后禁掉所有人的 "),s("code",[e._v("master")]),e._v("的写权限")]),e._v(" "),s("li",[s("code",[e._v("develop")]),e._v("：保存当前最新开发成果的分支。通常这个分支上的代码也是可进行每日夜间发布的代码，只对开发负责人开放"),s("code",[e._v("develop")]),e._v("权限。")]),e._v(" "),s("li",[s("code",[e._v("feature")]),e._v(": 功能特性分支，每个功能特性一个 "),s("code",[e._v("feature")]),e._v("/ 分支，开发完成自测通过后合并入 "),s("code",[e._v("develop")]),e._v(" 分支。可以从 "),s("code",[e._v("master")]),e._v(" 或者"),s("code",[e._v("develop")]),e._v(" 中拉出来。")]),e._v(" "),s("li",[s("code",[e._v("hotfix")]),e._v(": 紧急"),s("code",[e._v("bug")]),e._v("分支修复分支。修复上线后，可以直接合并入"),s("code",[e._v("master")]),e._v("。")])]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ahuntsun.gitee.io/blogimagebed/img/git/lesson11/60.jpg",alt:""}})]),e._v(" "),s("p",[s("code",[e._v("Git-Develop")]),e._v(" 分支模式是基于 "),s("code",[e._v("Git")]),e._v(" 代码库设计的一种需要严格控制发布质量和发布节奏的开发模式。"),s("code",[e._v("develop")]),e._v(" 作为固定的持续集成和发布分支，并且分支上的代码必须经过 "),s("code",[e._v("CodeReview")]),e._v(" 后才可以提交到 "),s("code",[e._v("Develop")]),e._v(" 分支。它的基本流程如下：")]),e._v(" "),s("ul",[s("li",[e._v("每一个需求/变更都单独从"),s("code",[e._v("Master")]),e._v("上创建一条"),s("code",[e._v("Branch")]),e._v("分支；")]),e._v(" "),s("li",[e._v("用户在这个"),s("code",[e._v("Branch")]),e._v("分支上进行"),s("code",[e._v("Codeing")]),e._v("活动；")]),e._v(" "),s("li",[e._v("代码达到发布准入条件后"),s("code",[e._v("aone")]),e._v("上提交"),s("code",[e._v("Codereview")]),e._v("，"),s("code",[e._v("Codereview")]),e._v("通过后代码自动合并到"),s("code",[e._v("Develop")]),e._v("分支；")]),e._v(" "),s("li",[e._v("待所有计划发布的变更分支代码都合并到"),s("code",[e._v("Develop")]),e._v("后，系统再 "),s("code",[e._v("rebase master")]),e._v(" 代码到"),s("code",[e._v("Develop")]),e._v(" 分支，然后自行构建，打包，部署等动作。")]),e._v(" "),s("li",[e._v("应用发布成功后"),s("code",[e._v("Aone")]),e._v("会基于"),s("code",[e._v("Develop")]),e._v("分支的发布版本打一个“当前线上版本"),s("code",[e._v("Tag")]),e._v("”基线；")]),e._v(" "),s("li",[e._v("应用发布成功后"),s("code",[e._v("Aone")]),e._v("会自动把"),s("code",[e._v("Develop")]),e._v("分支的发布版本合并回"),s("code",[e._v("master")]),e._v("；")])]),e._v(" "),s("h2",{attrs:{id:"四、开发工作流的讨论"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、开发工作流的讨论"}},[e._v("#")]),e._v(" 四、开发工作流的讨论")]),e._v(" "),s("p",[e._v("几篇业界的讨论文章")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"http://insights.thoughtworkers.org/gitflow-consider-harmful/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Gitflow 有害论"),s("OutboundLink")],1),e._v(" 作者对 "),s("code",[e._v("Gitflow")]),e._v(" 流程的使用过程中的吐槽，文章留言引起了强烈的讨论，可以关注下。")]),e._v(" "),s("li",[s("a",{attrs:{href:"http://scottchacon.com/2011/08/31/github-flow.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub Flow"),s("OutboundLink")],1),e._v(" "),s("code",[e._v("scottchacon")]),e._v(" 讲述在 "),s("code",[e._v("GitHub")]),e._v(" 工作中日常流程以及对每一点进行详细的介绍。")]),e._v(" "),s("li",[s("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/07/google-monolithic-source-repository.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("谷歌的代码管理"),s("OutboundLink")],1),e._v(" 谷歌和 "),s("code",[e._v("Facebook")]),e._v(" 都只有一个代码仓库，全公司的代码都放在这个库里，这里是阮一峰老师写的文章。")]),e._v(" "),s("li",[s("a",{attrs:{href:"http://cacm.acm.org/magazines/2016/7/204032-why-google-stores-billions-of-lines-of-code-in-a-single-repository/fulltext",target:"_blank",rel:"noopener noreferrer"}},[e._v("Why Google Stores Billions of Lines of Code in a Single Repository"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=v.exports}}]);